
MICRO1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002e00  00002e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800168  00800168  00002f9c  2**0
                  ALLOC
  3 .stab         00003678  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f15  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009529  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000096c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000098bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bcc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e224  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 37       	cpi	r26, 0x7D	; 125
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	fe e2       	ldi	r31, 0x2E	; 46
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <main>
      8a:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <SER_UART_void_send_string>:
#include "../MCAL/UART/UART_interface.h"
#include "../MCAL/DIO/Memmap.h"
#include "../LIB/BIT_Math.h"

void SER_UART_void_send_string(u8* s)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <SER_UART_void_send_string+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0;
     e3e:	19 82       	std	Y+1, r1	; 0x01
     e40:	0e c0       	rjmp	.+28     	; 0xe5e <SER_UART_void_send_string+0x30>
	while (s[count]!='\0')
	{
		UART_void_send_data(s[count]);
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	9b 81       	ldd	r25, Y+3	; 0x03
     e4c:	fc 01       	movw	r30, r24
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	80 81       	ld	r24, Z
     e54:	0e 94 11 08 	call	0x1022	; 0x1022 <UART_void_send_data>
		count++;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	89 83       	std	Y+1, r24	; 0x01
#include "../LIB/BIT_Math.h"

void SER_UART_void_send_string(u8* s)
{
	u8 count=0;
	while (s[count]!='\0')
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	fc 01       	movw	r30, r24
     e6a:	e2 0f       	add	r30, r18
     e6c:	f3 1f       	adc	r31, r19
     e6e:	80 81       	ld	r24, Z
     e70:	88 23       	and	r24, r24
     e72:	39 f7       	brne	.-50     	; 0xe42 <SER_UART_void_send_string+0x14>
	{
		UART_void_send_data(s[count]);
		count++;
	}
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <SER_UART_void_receive_string>:
void SER_UART_void_receive_string(u8* s)
{
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <SER_UART_void_receive_string+0xa>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9b 83       	std	Y+3, r25	; 0x03
     e92:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0;
     e94:	19 82       	std	Y+1, r1	; 0x01
	s[count]=UART_void_recieve_data();
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	8c 01       	movw	r16, r24
     ea2:	02 0f       	add	r16, r18
     ea4:	13 1f       	adc	r17, r19
     ea6:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_void_recieve_data>
     eaa:	f8 01       	movw	r30, r16
     eac:	80 83       	st	Z, r24
     eae:	0f c0       	rjmp	.+30     	; 0xece <SER_UART_void_receive_string+0x4e>
	while(s[count]!='$')
	{
		count++;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	89 83       	std	Y+1, r24	; 0x01
		s[count]=UART_void_recieve_data();
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	8c 01       	movw	r16, r24
     ec2:	02 0f       	add	r16, r18
     ec4:	13 1f       	adc	r17, r19
     ec6:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_void_recieve_data>
     eca:	f8 01       	movw	r30, r16
     ecc:	80 83       	st	Z, r24
}
void SER_UART_void_receive_string(u8* s)
{
	u8 count=0;
	s[count]=UART_void_recieve_data();
	while(s[count]!='$')
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	9b 81       	ldd	r25, Y+3	; 0x03
     ed8:	fc 01       	movw	r30, r24
     eda:	e2 0f       	add	r30, r18
     edc:	f3 1f       	adc	r31, r19
     ede:	80 81       	ld	r24, Z
     ee0:	84 32       	cpi	r24, 0x24	; 36
     ee2:	31 f7       	brne	.-52     	; 0xeb0 <SER_UART_void_receive_string+0x30>
	{
		count++;
		s[count]=UART_void_recieve_data();
	}
	s[count]='\0';
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	fc 01       	movw	r30, r24
     ef0:	e2 0f       	add	r30, r18
     ef2:	f3 1f       	adc	r31, r19
     ef4:	10 82       	st	Z, r1
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <SER_UART_void_receive_string_NOBLOCKING>:
void SER_UART_void_receive_string_NOBLOCKING(u8* s)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <SER_UART_void_receive_string_NOBLOCKING+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <SER_UART_void_receive_string_NOBLOCKING+0x8>
     f0e:	0f 92       	push	r0
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	9d 83       	std	Y+5, r25	; 0x05
     f16:	8c 83       	std	Y+4, r24	; 0x04
	       u8 statue,data,count=0;
     f18:	19 82       	std	Y+1, r1	; 0x01
	do{
		    statue=UART_u8RecieveDataNoBLOCKING(& data);
     f1a:	ce 01       	movw	r24, r28
     f1c:	03 96       	adiw	r24, 0x03	; 3
     f1e:	0e 94 3a 08 	call	0x1074	; 0x1074 <UART_u8RecieveDataNoBLOCKING>
     f22:	8a 83       	std	Y+2, r24	; 0x02
		    if (statue)
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	88 23       	and	r24, r24
     f28:	d9 f0       	breq	.+54     	; 0xf60 <SER_UART_void_receive_string_NOBLOCKING+0x5a>
				{
					s[count]=data;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	fc 01       	movw	r30, r24
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	80 83       	st	Z, r24
					count++;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	8f 5f       	subi	r24, 0xFF	; 255
     f42:	89 83       	std	Y+1, r24	; 0x01
				}
		    else
				{
					break;
				}
	     }while(s[count-1]!='$');
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9c 01       	movw	r18, r24
     f4c:	21 50       	subi	r18, 0x01	; 1
     f4e:	30 40       	sbci	r19, 0x00	; 0
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	fc 01       	movw	r30, r24
     f56:	e2 0f       	add	r30, r18
     f58:	f3 1f       	adc	r31, r19
     f5a:	80 81       	ld	r24, Z
     f5c:	84 32       	cpi	r24, 0x24	; 36
     f5e:	e9 f6       	brne	.-70     	; 0xf1a <SER_UART_void_receive_string_NOBLOCKING+0x14>
	s[count-1]='\0';
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9c 01       	movw	r18, r24
     f68:	21 50       	subi	r18, 0x01	; 1
     f6a:	30 40       	sbci	r19, 0x00	; 0
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	fc 01       	movw	r30, r24
     f72:	e2 0f       	add	r30, r18
     f74:	f3 1f       	adc	r31, r19
     f76:	10 82       	st	Z, r1
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <UART_void_initialize>:
#include "ADC_Interface.h"
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_type.h"
*/
void UART_void_initialize(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	SETBIT(UCSRB,RXEN);
     f90:	aa e2       	ldi	r26, 0x2A	; 42
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ea e2       	ldi	r30, 0x2A	; 42
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	8c 93       	st	X, r24
	SETBIT(UCSRB,TXEN);
     f9e:	aa e2       	ldi	r26, 0x2A	; 42
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ea e2       	ldi	r30, 0x2A	; 42
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	88 60       	ori	r24, 0x08	; 8
     faa:	8c 93       	st	X, r24
	CLRBIT(UCSRC, UMSEL);
     fac:	a0 e4       	ldi	r26, 0x40	; 64
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e0 e4       	ldi	r30, 0x40	; 64
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7b       	andi	r24, 0xBF	; 191
     fb8:	8c 93       	st	X, r24
	CLRBIT(UCSRC, UPM0);
     fba:	a0 e4       	ldi	r26, 0x40	; 64
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e0 e4       	ldi	r30, 0x40	; 64
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7e       	andi	r24, 0xEF	; 239
     fc6:	8c 93       	st	X, r24
	CLRBIT(UCSRC, UPM1);
     fc8:	a0 e4       	ldi	r26, 0x40	; 64
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e0 e4       	ldi	r30, 0x40	; 64
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8f 7d       	andi	r24, 0xDF	; 223
     fd4:	8c 93       	st	X, r24
	CLRBIT(UCSRC, USBS);
     fd6:	a0 e4       	ldi	r26, 0x40	; 64
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e0 e4       	ldi	r30, 0x40	; 64
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	87 7f       	andi	r24, 0xF7	; 247
     fe2:	8c 93       	st	X, r24
	SETBIT(UCSRC, UCSZ0);
     fe4:	a0 e4       	ldi	r26, 0x40	; 64
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e0 e4       	ldi	r30, 0x40	; 64
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	8c 93       	st	X, r24
	SETBIT(UCSRC, UCSZ1);
     ff2:	a0 e4       	ldi	r26, 0x40	; 64
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e0 e4       	ldi	r30, 0x40	; 64
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	84 60       	ori	r24, 0x04	; 4
     ffe:	8c 93       	st	X, r24
	CLRBIT(UCSRB, UCSZ2);
    1000:	aa e2       	ldi	r26, 0x2A	; 42
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ea e2       	ldi	r30, 0x2A	; 42
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	8c 93       	st	X, r24

	//BAUD RATE
	UBRRH=0;
    100e:	e0 e4       	ldi	r30, 0x40	; 64
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	10 82       	st	Z, r1
	UBRRL=207;
    1014:	e9 e2       	ldi	r30, 0x29	; 41
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	8f ec       	ldi	r24, 0xCF	; 207
    101a:	80 83       	st	Z, r24


}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <UART_void_send_data>:


void UART_void_send_data(u8 data)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01
	while (!(GETBIT(UCSRA,UDRE)));
    102e:	eb e2       	ldi	r30, 0x2B	; 43
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	82 95       	swap	r24
    1036:	86 95       	lsr	r24
    1038:	87 70       	andi	r24, 0x07	; 7
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	90 70       	andi	r25, 0x00	; 0
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	a1 f3       	breq	.-24     	; 0x102e <UART_void_send_data+0xc>
	UDR=data;
    1046:	ec e2       	ldi	r30, 0x2C	; 44
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	80 83       	st	Z, r24
}
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <UART_void_recieve_data>:

u8 UART_void_recieve_data(void)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
	while(!(GETBIT(UCSRA,RXC)));
    105e:	eb e2       	ldi	r30, 0x2B	; 43
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	dc f7       	brge	.-10     	; 0x105e <UART_void_recieve_data+0x8>
	return UDR;
    1068:	ec e2       	ldi	r30, 0x2C	; 44
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <UART_u8RecieveDataNoBLOCKING>:
u8 UART_u8RecieveDataNoBLOCKING(u8* ptr_data)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <UART_u8RecieveDataNoBLOCKING+0x6>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
    u8 status = 0;
    1084:	19 82       	std	Y+1, r1	; 0x01
    if (GETBIT(UCSRA, RXC))
    1086:	eb e2       	ldi	r30, 0x2B	; 43
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 23       	and	r24, r24
    108e:	44 f4       	brge	.+16     	; 0x10a0 <UART_u8RecieveDataNoBLOCKING+0x2c>
    {
        *ptr_data =UDR;
    1090:	ec e2       	ldi	r30, 0x2C	; 44
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	ea 81       	ldd	r30, Y+2	; 0x02
    1098:	fb 81       	ldd	r31, Y+3	; 0x03
    109a:	80 83       	st	Z, r24
        status =1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /* do nothing */
    }
    return status;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <TIMER1_voidICUInitilization>:
volatile static u16 temp3 = 0;
volatile static u8 x      = 0;
volatile static u8 y      = 0;

void TIMER1_voidICUInitilization(Timer1_Mode_type mode, Timer1_Prescaler_type prescaler)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <TIMER1_voidICUInitilization+0x6>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	6a 83       	std	Y+2, r22	; 0x02
    /* select mode of timer1 */
    switch (mode)
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	e1 f4       	brne	.+56     	; 0x10fe <TIMER1_voidICUInitilization+0x50>
    {
    case TIMER1_NORMAL_MODE:
        CLRBIT(TCCR1A, WGM10);
    10c6:	af e4       	ldi	r26, 0x4F	; 79
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ef e4       	ldi	r30, 0x4F	; 79
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8e 7f       	andi	r24, 0xFE	; 254
    10d2:	8c 93       	st	X, r24
        CLRBIT(TCCR1A, WGM11);
    10d4:	af e4       	ldi	r26, 0x4F	; 79
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	ef e4       	ldi	r30, 0x4F	; 79
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8d 7f       	andi	r24, 0xFD	; 253
    10e0:	8c 93       	st	X, r24
        CLRBIT(TCCR1B, WGM12);
    10e2:	ae e4       	ldi	r26, 0x4E	; 78
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ee e4       	ldi	r30, 0x4E	; 78
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	87 7f       	andi	r24, 0xF7	; 247
    10ee:	8c 93       	st	X, r24
        CLRBIT(TCCR1B, WGM13);
    10f0:	ae e4       	ldi	r26, 0x4E	; 78
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	ee e4       	ldi	r30, 0x4E	; 78
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8f 7e       	andi	r24, 0xEF	; 239
    10fc:	8c 93       	st	X, r24
    
    default:
        break;
    }

    TCCR1B &= TIMER1_COM_MASK;
    10fe:	ae e4       	ldi	r26, 0x4E	; 78
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	ee e4       	ldi	r30, 0x4E	; 78
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	88 7f       	andi	r24, 0xF8	; 248
    110a:	8c 93       	st	X, r24
    TCCR1B |=prescaler;
    110c:	ae e4       	ldi	r26, 0x4E	; 78
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ee e4       	ldi	r30, 0x4E	; 78
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	90 81       	ld	r25, Z
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	89 2b       	or	r24, r25
    111a:	8c 93       	st	X, r24

    /* OC0 */

    /* Select triger */
    SETBIT(TCCR1B, ICES1);
    111c:	ae e4       	ldi	r26, 0x4E	; 78
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	ee e4       	ldi	r30, 0x4E	; 78
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	80 64       	ori	r24, 0x40	; 64
    1128:	8c 93       	st	X, r24

    /* enable ICU interrupt */
    SETBIT(TIMSK, TICIE1);
    112a:	a9 e5       	ldi	r26, 0x59	; 89
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e9 e5       	ldi	r30, 0x59	; 89
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 62       	ori	r24, 0x20	; 32
    1136:	8c 93       	st	X, r24

}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <TIMER1_void_TimerStop>:


void TIMER1_void_TimerStop(void)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    TCCR1B &=TIMER1_COM_MASK;
    114a:	ae e4       	ldi	r26, 0x4E	; 78
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	ee e4       	ldi	r30, 0x4E	; 78
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	88 7f       	andi	r24, 0xF8	; 248
    1156:	8c 93       	st	X, r24
}
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <TIMER1_void_TimerStart>:


void TIMER1_void_TimerStart(Timer1_Prescaler_type Prescaler)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	89 83       	std	Y+1, r24	; 0x01
    TCCR1B &= TIMER1_COM_MASK;
    116a:	ae e4       	ldi	r26, 0x4E	; 78
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ee e4       	ldi	r30, 0x4E	; 78
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	88 7f       	andi	r24, 0xF8	; 248
    1176:	8c 93       	st	X, r24
    TCCR1B |= Prescaler;
    1178:	ae e4       	ldi	r26, 0x4E	; 78
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ee e4       	ldi	r30, 0x4E	; 78
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	90 81       	ld	r25, Z
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	89 2b       	or	r24, r25
    1186:	8c 93       	st	X, r24
}
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <TIMER_u8ICUDutyCycle>:

u8 TIMER_u8ICUDutyCycle(void)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <TIMER_u8ICUDutyCycle+0x6>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <TIMER_u8ICUDutyCycle+0x8>
    1198:	00 d0       	rcall	.+0      	; 0x119a <TIMER_u8ICUDutyCycle+0xa>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    u16 D;
    u16 Period;
    u16 On_time;
    
    while (flag !=3);
    119e:	80 91 68 01 	lds	r24, 0x0168
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	e1 f7       	brne	.-8      	; 0x119e <TIMER_u8ICUDutyCycle+0xe>
    Period = temp2 - temp1;
    11a6:	20 91 6b 01 	lds	r18, 0x016B
    11aa:	30 91 6c 01 	lds	r19, 0x016C
    11ae:	80 91 69 01 	lds	r24, 0x0169
    11b2:	90 91 6a 01 	lds	r25, 0x016A
    11b6:	a9 01       	movw	r20, r18
    11b8:	48 1b       	sub	r20, r24
    11ba:	59 0b       	sbc	r21, r25
    11bc:	ca 01       	movw	r24, r20
    11be:	9c 83       	std	Y+4, r25	; 0x04
    11c0:	8b 83       	std	Y+3, r24	; 0x03
    On_time = temp3 - temp2;
    11c2:	20 91 6d 01 	lds	r18, 0x016D
    11c6:	30 91 6e 01 	lds	r19, 0x016E
    11ca:	80 91 6b 01 	lds	r24, 0x016B
    11ce:	90 91 6c 01 	lds	r25, 0x016C
    11d2:	a9 01       	movw	r20, r18
    11d4:	48 1b       	sub	r20, r24
    11d6:	59 0b       	sbc	r21, r25
    11d8:	ca 01       	movw	r24, r20
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    D = (On_time / Period) * 100;
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	2b 81       	ldd	r18, Y+3	; 0x03
    11e4:	3c 81       	ldd	r19, Y+4	; 0x04
    11e6:	b9 01       	movw	r22, r18
    11e8:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodhi4>
    11ec:	cb 01       	movw	r24, r22
    11ee:	9c 01       	movw	r18, r24
    11f0:	84 e6       	ldi	r24, 0x64	; 100
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	ac 01       	movw	r20, r24
    11f6:	24 9f       	mul	r18, r20
    11f8:	c0 01       	movw	r24, r0
    11fa:	25 9f       	mul	r18, r21
    11fc:	90 0d       	add	r25, r0
    11fe:	34 9f       	mul	r19, r20
    1200:	90 0d       	add	r25, r0
    1202:	11 24       	eor	r1, r1
    1204:	9e 83       	std	Y+6, r25	; 0x06
    1206:	8d 83       	std	Y+5, r24	; 0x05

    return D;
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
}
    120a:	26 96       	adiw	r28, 0x06	; 6
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <TIMER1_u16CurrentTimerValue>:

u16 TIMER1_u16CurrentTimerValue(void)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1224:	ec e4       	ldi	r30, 0x4C	; 76
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	91 81       	ldd	r25, Z+1	; 0x01
}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <TIMER1_voidCLRCounter>:

void TIMER1_voidCLRCounter(void)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    123a:	ec e4       	ldi	r30, 0x4C	; 76
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	11 82       	std	Z+1, r1	; 0x01
    1240:	10 82       	st	Z, r1
}
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <ISR>:

ISR(TIMER1_CAPT_vect)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <ISR+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <ISR+0x8>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	89 83       	std	Y+1, r24	; 0x01
    if (flag == 0)
    1258:	80 91 68 01 	lds	r24, 0x0168
    125c:	88 23       	and	r24, r24
    125e:	f1 f4       	brne	.+60     	; 0x129c <ISR+0x54>
    {
        /* take copy from ICR register 2:40 */
        x = ICR1L;
    1260:	e6 e4       	ldi	r30, 0x46	; 70
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	80 93 6f 01 	sts	0x016F, r24
        y = ICR1H;
    126a:	e7 e4       	ldi	r30, 0x47	; 71
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	80 93 70 01 	sts	0x0170, r24

        temp1 = x | (y<<8);
    1274:	80 91 6f 01 	lds	r24, 0x016F
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	80 91 70 01 	lds	r24, 0x0170
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	98 2f       	mov	r25, r24
    1286:	88 27       	eor	r24, r24
    1288:	82 2b       	or	r24, r18
    128a:	93 2b       	or	r25, r19
    128c:	90 93 6a 01 	sts	0x016A, r25
    1290:	80 93 69 01 	sts	0x0169, r24
        flag = 1;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 68 01 	sts	0x0168, r24
    129a:	46 c0       	rjmp	.+140    	; 0x1328 <ISR+0xe0>
    }
    else if (flag == 1)
    129c:	80 91 68 01 	lds	r24, 0x0168
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	29 f5       	brne	.+74     	; 0x12ee <ISR+0xa6>
    {
        x = ICR1L;
    12a4:	e6 e4       	ldi	r30, 0x46	; 70
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	80 93 6f 01 	sts	0x016F, r24
        y = ICR1H;
    12ae:	e7 e4       	ldi	r30, 0x47	; 71
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 93 70 01 	sts	0x0170, r24

        temp2 = x | (y<<8);
    12b8:	80 91 6f 01 	lds	r24, 0x016F
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	80 91 70 01 	lds	r24, 0x0170
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	98 2f       	mov	r25, r24
    12ca:	88 27       	eor	r24, r24
    12cc:	82 2b       	or	r24, r18
    12ce:	93 2b       	or	r25, r19
    12d0:	90 93 6c 01 	sts	0x016C, r25
    12d4:	80 93 6b 01 	sts	0x016B, r24
        flag =2;
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	80 93 68 01 	sts	0x0168, r24
        /* change trigger to be on falling edge to detcet on time */
        CLRBIT(TCCR1B, ICES1);
    12de:	ae e4       	ldi	r26, 0x4E	; 78
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ee e4       	ldi	r30, 0x4E	; 78
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 7b       	andi	r24, 0xBF	; 191
    12ea:	8c 93       	st	X, r24
    12ec:	1d c0       	rjmp	.+58     	; 0x1328 <ISR+0xe0>
    }
    else
    {
        x = ICR1L;
    12ee:	e6 e4       	ldi	r30, 0x46	; 70
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 93 6f 01 	sts	0x016F, r24
        y = ICR1H;
    12f8:	e7 e4       	ldi	r30, 0x47	; 71
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 93 70 01 	sts	0x0170, r24

        temp3 = x | (y<<8);
    1302:	80 91 6f 01 	lds	r24, 0x016F
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	80 91 70 01 	lds	r24, 0x0170
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	98 2f       	mov	r25, r24
    1314:	88 27       	eor	r24, r24
    1316:	82 2b       	or	r24, r18
    1318:	93 2b       	or	r25, r19
    131a:	90 93 6e 01 	sts	0x016E, r25
    131e:	80 93 6d 01 	sts	0x016D, r24
        flag =2;
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	80 93 68 01 	sts	0x0168, r24

    }
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <TIMER0_void_Intialize>:

static u32 OverflowNumber =0;
static u8 Preload =0;

void TIMER0_void_Intialize(timerMode_type mode , prescaller_type prescaller , timerOC0_type OC0_type )
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <TIMER0_void_Intialize+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <TIMER0_void_Intialize+0x8>
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6a 83       	std	Y+2, r22	; 0x02
    1348:	4b 83       	std	Y+3, r20	; 0x03
	// step one :mode selction
	switch(mode)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3d 83       	std	Y+5, r19	; 0x05
    1352:	2c 83       	std	Y+4, r18	; 0x04
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	21 f1       	breq	.+72     	; 0x13a6 <TIMER0_void_Intialize+0x70>
    135e:	2c 81       	ldd	r18, Y+4	; 0x04
    1360:	3d 81       	ldd	r19, Y+5	; 0x05
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	2c f4       	brge	.+10     	; 0x1372 <TIMER0_void_Intialize+0x3c>
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	61 f0       	breq	.+24     	; 0x1388 <TIMER0_void_Intialize+0x52>
    1370:	46 c0       	rjmp	.+140    	; 0x13fe <TIMER0_void_Intialize+0xc8>
    1372:	2c 81       	ldd	r18, Y+4	; 0x04
    1374:	3d 81       	ldd	r19, Y+5	; 0x05
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	21 f1       	breq	.+72     	; 0x13c4 <TIMER0_void_Intialize+0x8e>
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	71 f1       	breq	.+92     	; 0x13e2 <TIMER0_void_Intialize+0xac>
    1386:	3b c0       	rjmp	.+118    	; 0x13fe <TIMER0_void_Intialize+0xc8>
	{
	case TIMER0_NORMAL_MODE:
		CLRBIT(TCCR0,WGM00);
    1388:	a3 e5       	ldi	r26, 0x53	; 83
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e3 e5       	ldi	r30, 0x53	; 83
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8f 7b       	andi	r24, 0xBF	; 191
    1394:	8c 93       	st	X, r24
		CLRBIT(TCCR0,WGM01);
    1396:	a3 e5       	ldi	r26, 0x53	; 83
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e3 e5       	ldi	r30, 0x53	; 83
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	87 7f       	andi	r24, 0xF7	; 247
    13a2:	8c 93       	st	X, r24
    13a4:	2c c0       	rjmp	.+88     	; 0x13fe <TIMER0_void_Intialize+0xc8>
	break;
	case TIMER0_CTC_MODE:
		CLRBIT(TCCR0,WGM00);
    13a6:	a3 e5       	ldi	r26, 0x53	; 83
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e3 e5       	ldi	r30, 0x53	; 83
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8f 7b       	andi	r24, 0xBF	; 191
    13b2:	8c 93       	st	X, r24
		SETBIT(TCCR0,WGM01);
    13b4:	a3 e5       	ldi	r26, 0x53	; 83
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e3 e5       	ldi	r30, 0x53	; 83
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	88 60       	ori	r24, 0x08	; 8
    13c0:	8c 93       	st	X, r24
    13c2:	1d c0       	rjmp	.+58     	; 0x13fe <TIMER0_void_Intialize+0xc8>
	break;
	case TIMER0_FASTPWM_MODE:
		SETBIT(TCCR0,WGM00);
    13c4:	a3 e5       	ldi	r26, 0x53	; 83
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e3 e5       	ldi	r30, 0x53	; 83
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	80 64       	ori	r24, 0x40	; 64
    13d0:	8c 93       	st	X, r24
		SETBIT(TCCR0,WGM01);
    13d2:	a3 e5       	ldi	r26, 0x53	; 83
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e3 e5       	ldi	r30, 0x53	; 83
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	88 60       	ori	r24, 0x08	; 8
    13de:	8c 93       	st	X, r24
    13e0:	0e c0       	rjmp	.+28     	; 0x13fe <TIMER0_void_Intialize+0xc8>
	break;
	case TIMER0_PHASECORRECT_MODE:
		SETBIT(TCCR0,WGM00);
    13e2:	a3 e5       	ldi	r26, 0x53	; 83
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e3 e5       	ldi	r30, 0x53	; 83
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	80 64       	ori	r24, 0x40	; 64
    13ee:	8c 93       	st	X, r24
		CLRBIT(TCCR0,WGM01);
    13f0:	a3 e5       	ldi	r26, 0x53	; 83
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e3 e5       	ldi	r30, 0x53	; 83
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	87 7f       	andi	r24, 0xF7	; 247
    13fc:	8c 93       	st	X, r24
	break;
	}

	// step 2 :Prescaller selction
	TCCR0 &= 0xf8;
    13fe:	a3 e5       	ldi	r26, 0x53	; 83
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e3 e5       	ldi	r30, 0x53	; 83
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	88 7f       	andi	r24, 0xF8	; 248
    140a:	8c 93       	st	X, r24
	TCCR0 |= prescaller;
    140c:	a3 e5       	ldi	r26, 0x53	; 83
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e3 e5       	ldi	r30, 0x53	; 83
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	90 81       	ld	r25, Z
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	89 2b       	or	r24, r25
    141a:	8c 93       	st	X, r24

	// step 3 :OC0Pin mode selction
	TCCR0 &= 0b11001111;
    141c:	a3 e5       	ldi	r26, 0x53	; 83
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e3 e5       	ldi	r30, 0x53	; 83
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8f 7c       	andi	r24, 0xCF	; 207
    1428:	8c 93       	st	X, r24
	TCCR0 |=(OC0_type<<4);
    142a:	a3 e5       	ldi	r26, 0x53	; 83
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e3 e5       	ldi	r30, 0x53	; 83
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	28 2f       	mov	r18, r24
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	82 95       	swap	r24
    143e:	92 95       	swap	r25
    1440:	90 7f       	andi	r25, 0xF0	; 240
    1442:	98 27       	eor	r25, r24
    1444:	80 7f       	andi	r24, 0xF0	; 240
    1446:	98 27       	eor	r25, r24
    1448:	82 2b       	or	r24, r18
    144a:	8c 93       	st	X, r24


}//end TIMER0_void_Intialize
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <TIMER0_void_TimerStop>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_TimerStop(void)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xf8;//0b1111 1100
    1464:	a3 e5       	ldi	r26, 0x53	; 83
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e3 e5       	ldi	r30, 0x53	; 83
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	88 7f       	andi	r24, 0xF8	; 248
    1470:	8c 93       	st	X, r24
}//end TIMER0_void_TimerStop
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <TIMER0_void_TimerStart>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_TimerStart(prescaller_type prescaller)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	0f 92       	push	r0
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= 0xf8;
    1484:	a3 e5       	ldi	r26, 0x53	; 83
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e3 e5       	ldi	r30, 0x53	; 83
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	88 7f       	andi	r24, 0xF8	; 248
    1490:	8c 93       	st	X, r24
	TCCR0 |= prescaller;
    1492:	a3 e5       	ldi	r26, 0x53	; 83
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e3 e5       	ldi	r30, 0x53	; 83
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	90 81       	ld	r25, Z
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	89 2b       	or	r24, r25
    14a0:	8c 93       	st	X, r24
}//end TIMER0_void_TimerStart
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <TIMER0_void_EnableOVInt>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_EnableOVInt(void)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG, SREG_I);
    14b2:	af e5       	ldi	r26, 0x5F	; 95
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	ef e5       	ldi	r30, 0x5F	; 95
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	80 68       	ori	r24, 0x80	; 128
    14be:	8c 93       	st	X, r24
	SETBIT(TIMSK, TOIE0);
    14c0:	a9 e5       	ldi	r26, 0x59	; 89
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e9 e5       	ldi	r30, 0x59	; 89
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	81 60       	ori	r24, 0x01	; 1
    14cc:	8c 93       	st	X, r24

}//end TIMER0_void_EnableOVInt
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <TIMER0_void_DisableOVInt>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_DisableOVInt(void)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK,TOIE0);
    14dc:	a9 e5       	ldi	r26, 0x59	; 89
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e9 e5       	ldi	r30, 0x59	; 89
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8e 7f       	andi	r24, 0xFE	; 254
    14e8:	8c 93       	st	X, r24

}//end TIMER0_void_DisableOVInt
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <TIMER0_void_SetOVCALLBack>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_SetOVCALLBack(void(*copy_ptr)(void))
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <TIMER0_void_SetOVCALLBack+0x6>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
	OVCallBackptr = copy_ptr  ;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	90 93 77 01 	sts	0x0177, r25
    1506:	80 93 76 01 	sts	0x0176, r24

}//end TIMER0_void_SetOVCALLBack
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <TIMER0_void_EnableCTCInt>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_EnableCTCInt(void)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG,7);
    151c:	af e5       	ldi	r26, 0x5F	; 95
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	ef e5       	ldi	r30, 0x5F	; 95
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	80 68       	ori	r24, 0x80	; 128
    1528:	8c 93       	st	X, r24
	SETBIT(TIMSK,OCIE0);
    152a:	a9 e5       	ldi	r26, 0x59	; 89
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e9 e5       	ldi	r30, 0x59	; 89
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	82 60       	ori	r24, 0x02	; 2
    1536:	8c 93       	st	X, r24

}//end TIMER0_void_EnableCTCInt
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <TIMER0_void_DisableCTCInt>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_DisableCTCInt(void)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK,OCIE0);
    1546:	a9 e5       	ldi	r26, 0x59	; 89
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e9 e5       	ldi	r30, 0x59	; 89
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8d 7f       	andi	r24, 0xFD	; 253
    1552:	8c 93       	st	X, r24

}//end TIMER0_void_DisableCTCInt
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <TIMER0_void_SetCTCCALLBack>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_SetCTCCALLBack(void(*copy_ptr)(void))
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <TIMER0_void_SetCTCCALLBack+0x6>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	9a 83       	std	Y+2, r25	; 0x02
    1566:	89 83       	std	Y+1, r24	; 0x01
	CTCCallBackptr = copy_ptr  ;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	90 93 79 01 	sts	0x0179, r25
    1570:	80 93 78 01 	sts	0x0178, r24

}//end TIMER0_void_SetCTCCALLBack
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <TIMER0_void_SetCompareValue>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_SetCompareValue(u8 Copy_CompValue)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	0f 92       	push	r0
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_CompValue;
    158a:	ec e5       	ldi	r30, 0x5C	; 92
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	80 83       	st	Z, r24

}//end TIMER0_void_SetCompareValue
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <TIMER0_void_SetDesiredTime_MicroSec>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_SetDesiredTime_MicroSec(u32 copy_time,prescaller_type Copy_prescaller)// as delay Fun.
{
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	6d 97       	sbiw	r28, 0x1d	; 29
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	6f 8b       	std	Y+23, r22	; 0x17
    15b8:	78 8f       	std	Y+24, r23	; 0x18
    15ba:	89 8f       	std	Y+25, r24	; 0x19
    15bc:	9a 8f       	std	Y+26, r25	; 0x1a
    15be:	4b 8f       	std	Y+27, r20	; 0x1b
	u16 prescaller;
	switch(Copy_prescaller)
    15c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	3d 8f       	std	Y+29, r19	; 0x1d
    15c8:	2c 8f       	std	Y+28, r18	; 0x1c
    15ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	91 05       	cpc	r25, r1
    15d2:	29 f1       	breq	.+74     	; 0x161e <TIMER0_void_SetDesiredTime_MicroSec+0x84>
    15d4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15d6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    15d8:	24 30       	cpi	r18, 0x04	; 4
    15da:	31 05       	cpc	r19, r1
    15dc:	5c f4       	brge	.+22     	; 0x15f4 <TIMER0_void_SetDesiredTime_MicroSec+0x5a>
    15de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	91 05       	cpc	r25, r1
    15e6:	89 f0       	breq	.+34     	; 0x160a <TIMER0_void_SetDesiredTime_MicroSec+0x70>
    15e8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15ea:	3d 8d       	ldd	r19, Y+29	; 0x1d
    15ec:	22 30       	cpi	r18, 0x02	; 2
    15ee:	31 05       	cpc	r19, r1
    15f0:	89 f0       	breq	.+34     	; 0x1614 <TIMER0_void_SetDesiredTime_MicroSec+0x7a>
    15f2:	23 c0       	rjmp	.+70     	; 0x163a <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
    15f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	91 05       	cpc	r25, r1
    15fc:	a9 f0       	breq	.+42     	; 0x1628 <TIMER0_void_SetDesiredTime_MicroSec+0x8e>
    15fe:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1600:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1602:	25 30       	cpi	r18, 0x05	; 5
    1604:	31 05       	cpc	r19, r1
    1606:	a9 f0       	breq	.+42     	; 0x1632 <TIMER0_void_SetDesiredTime_MicroSec+0x98>
    1608:	18 c0       	rjmp	.+48     	; 0x163a <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
	{
	case NO_Prescaller:
		prescaller = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9e 8b       	std	Y+22, r25	; 0x16
    1610:	8d 8b       	std	Y+21, r24	; 0x15
    1612:	13 c0       	rjmp	.+38     	; 0x163a <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
	break;
	case Prescaller_8:
			prescaller = 8;
    1614:	88 e0       	ldi	r24, 0x08	; 8
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9e 8b       	std	Y+22, r25	; 0x16
    161a:	8d 8b       	std	Y+21, r24	; 0x15
    161c:	0e c0       	rjmp	.+28     	; 0x163a <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
	break;
	case Prescaller_64:
			prescaller = 64;
    161e:	80 e4       	ldi	r24, 0x40	; 64
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9e 8b       	std	Y+22, r25	; 0x16
    1624:	8d 8b       	std	Y+21, r24	; 0x15
    1626:	09 c0       	rjmp	.+18     	; 0x163a <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
	break;
	case Prescaller_256:
			prescaller = 256;
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	9e 8b       	std	Y+22, r25	; 0x16
    162e:	8d 8b       	std	Y+21, r24	; 0x15
    1630:	04 c0       	rjmp	.+8      	; 0x163a <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
	break;
	case Prescaller_1024:
			prescaller = 1024;
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	94 e0       	ldi	r25, 0x04	; 4
    1636:	9e 8b       	std	Y+22, r25	; 0x16
    1638:	8d 8b       	std	Y+21, r24	; 0x15
	break;


	}
	u32 TickTime =(prescaller * 1000000) / TIMER0_F_CPU;
    163a:	8d 89       	ldd	r24, Y+21	; 0x15
    163c:	9e 89       	ldd	r25, Y+22	; 0x16
    163e:	cc 01       	movw	r24, r24
    1640:	a0 e0       	ldi	r26, 0x00	; 0
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	20 e4       	ldi	r18, 0x40	; 64
    1646:	32 e4       	ldi	r19, 0x42	; 66
    1648:	4f e0       	ldi	r20, 0x0F	; 15
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__mulsi3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	32 e1       	ldi	r19, 0x12	; 18
    165c:	4a e7       	ldi	r20, 0x7A	; 122
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__udivmodsi4>
    1668:	da 01       	movw	r26, r20
    166a:	c9 01       	movw	r24, r18
    166c:	89 8b       	std	Y+17, r24	; 0x11
    166e:	9a 8b       	std	Y+18, r25	; 0x12
    1670:	ab 8b       	std	Y+19, r26	; 0x13
    1672:	bc 8b       	std	Y+20, r27	; 0x14
	u32 OverFlowTime = TickTime *TIMER0_REG_CABACITY;
    1674:	89 89       	ldd	r24, Y+17	; 0x11
    1676:	9a 89       	ldd	r25, Y+18	; 0x12
    1678:	ab 89       	ldd	r26, Y+19	; 0x13
    167a:	bc 89       	ldd	r27, Y+20	; 0x14
    167c:	ba 2f       	mov	r27, r26
    167e:	a9 2f       	mov	r26, r25
    1680:	98 2f       	mov	r25, r24
    1682:	88 27       	eor	r24, r24
    1684:	8d 87       	std	Y+13, r24	; 0x0d
    1686:	9e 87       	std	Y+14, r25	; 0x0e
    1688:	af 87       	std	Y+15, r26	; 0x0f
    168a:	b8 8b       	std	Y+16, r27	; 0x10
	u32 DesiredTime = copy_time;
    168c:	8f 89       	ldd	r24, Y+23	; 0x17
    168e:	98 8d       	ldd	r25, Y+24	; 0x18
    1690:	a9 8d       	ldd	r26, Y+25	; 0x19
    1692:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1694:	89 87       	std	Y+9, r24	; 0x09
    1696:	9a 87       	std	Y+10, r25	; 0x0a
    1698:	ab 87       	std	Y+11, r26	; 0x0b
    169a:	bc 87       	std	Y+12, r27	; 0x0c

	OverflowNumber = DesiredTime / OverFlowTime;
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	ab 85       	ldd	r26, Y+11	; 0x0b
    16a2:	bc 85       	ldd	r27, Y+12	; 0x0c
    16a4:	2d 85       	ldd	r18, Y+13	; 0x0d
    16a6:	3e 85       	ldd	r19, Y+14	; 0x0e
    16a8:	4f 85       	ldd	r20, Y+15	; 0x0f
    16aa:	58 89       	ldd	r21, Y+16	; 0x10
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__udivmodsi4>
    16b4:	da 01       	movw	r26, r20
    16b6:	c9 01       	movw	r24, r18
    16b8:	80 93 71 01 	sts	0x0171, r24
    16bc:	90 93 72 01 	sts	0x0172, r25
    16c0:	a0 93 73 01 	sts	0x0173, r26
    16c4:	b0 93 74 01 	sts	0x0174, r27
	u32 OverFlowRemTime = DesiredTime % OverFlowTime;
    16c8:	89 85       	ldd	r24, Y+9	; 0x09
    16ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    16cc:	ab 85       	ldd	r26, Y+11	; 0x0b
    16ce:	bc 85       	ldd	r27, Y+12	; 0x0c
    16d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    16d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    16d4:	4f 85       	ldd	r20, Y+15	; 0x0f
    16d6:	58 89       	ldd	r21, Y+16	; 0x10
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__udivmodsi4>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	9e 83       	std	Y+6, r25	; 0x06
    16e8:	af 83       	std	Y+7, r26	; 0x07
    16ea:	b8 87       	std	Y+8, r27	; 0x08
	u32 OverFlowRemCounts = ((float)OverFlowRemTime/OverFlowTime)*TIMER0_REG_CABACITY;
    16ec:	6d 81       	ldd	r22, Y+5	; 0x05
    16ee:	7e 81       	ldd	r23, Y+6	; 0x06
    16f0:	8f 81       	ldd	r24, Y+7	; 0x07
    16f2:	98 85       	ldd	r25, Y+8	; 0x08
    16f4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    16f8:	7b 01       	movw	r14, r22
    16fa:	8c 01       	movw	r16, r24
    16fc:	6d 85       	ldd	r22, Y+13	; 0x0d
    16fe:	7e 85       	ldd	r23, Y+14	; 0x0e
    1700:	8f 85       	ldd	r24, Y+15	; 0x0f
    1702:	98 89       	ldd	r25, Y+16	; 0x10
    1704:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1708:	9b 01       	movw	r18, r22
    170a:	ac 01       	movw	r20, r24
    170c:	c8 01       	movw	r24, r16
    170e:	b7 01       	movw	r22, r14
    1710:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	53 e4       	ldi	r21, 0x43	; 67
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	ab 83       	std	Y+3, r26	; 0x03
    173e:	bc 83       	std	Y+4, r27	; 0x04

	TCNT0=0;
    1740:	e2 e5       	ldi	r30, 0x52	; 82
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	10 82       	st	Z, r1
	if(OverFlowRemTime>0)
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	af 81       	ldd	r26, Y+7	; 0x07
    174c:	b8 85       	ldd	r27, Y+8	; 0x08
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	a1 05       	cpc	r26, r1
    1752:	b1 05       	cpc	r27, r1
    1754:	e1 f0       	breq	.+56     	; 0x178e <TIMER0_void_SetDesiredTime_MicroSec+0x1f4>
	{
		Preload = TIMER0_REG_CABACITY - OverFlowRemCounts;
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	81 95       	neg	r24
    175a:	80 93 75 01 	sts	0x0175, r24
		TCNT0 = Preload;
    175e:	e2 e5       	ldi	r30, 0x52	; 82
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 91 75 01 	lds	r24, 0x0175
    1766:	80 83       	st	Z, r24
		OverflowNumber++;
    1768:	80 91 71 01 	lds	r24, 0x0171
    176c:	90 91 72 01 	lds	r25, 0x0172
    1770:	a0 91 73 01 	lds	r26, 0x0173
    1774:	b0 91 74 01 	lds	r27, 0x0174
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	a1 1d       	adc	r26, r1
    177c:	b1 1d       	adc	r27, r1
    177e:	80 93 71 01 	sts	0x0171, r24
    1782:	90 93 72 01 	sts	0x0172, r25
    1786:	a0 93 73 01 	sts	0x0173, r26
    178a:	b0 93 74 01 	sts	0x0174, r27
	}
}// end TIMER0_void_SetDesiredTime_MicroSec
    178e:	6d 96       	adiw	r28, 0x1d	; 29
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	08 95       	ret

000017a8 <TIMER0_void_FastPWM>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_FastPWM(u8 copy_DutyCycle ,timerOC0_type OC0_type,prescaller_type prescaller )
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <TIMER0_void_FastPWM+0x6>
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <TIMER0_void_FastPWM+0x8>
    17b0:	0f 92       	push	r0
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	6a 83       	std	Y+2, r22	; 0x02
    17ba:	4b 83       	std	Y+3, r20	; 0x03
	switch(OC0_type)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	3d 83       	std	Y+5, r19	; 0x05
    17c4:	2c 83       	std	Y+4, r18	; 0x04
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	91 05       	cpc	r25, r1
    17ce:	31 f0       	breq	.+12     	; 0x17dc <TIMER0_void_FastPWM+0x34>
    17d0:	2c 81       	ldd	r18, Y+4	; 0x04
    17d2:	3d 81       	ldd	r19, Y+5	; 0x05
    17d4:	23 30       	cpi	r18, 0x03	; 3
    17d6:	31 05       	cpc	r19, r1
    17d8:	89 f0       	breq	.+34     	; 0x17fc <TIMER0_void_FastPWM+0x54>
    17da:	22 c0       	rjmp	.+68     	; 0x1820 <TIMER0_void_FastPWM+0x78>
	{
	case TIMER0_NONINVERTING_PWM_OC0:
		OCR0 = ((copy_DutyCycle*256)/100)-1;
    17dc:	ec e5       	ldi	r30, 0x5C	; 92
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	98 2f       	mov	r25, r24
    17e8:	88 27       	eor	r24, r24
    17ea:	24 e6       	ldi	r18, 0x64	; 100
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	b9 01       	movw	r22, r18
    17f0:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__divmodhi4>
    17f4:	cb 01       	movw	r24, r22
    17f6:	81 50       	subi	r24, 0x01	; 1
    17f8:	80 83       	st	Z, r24
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <TIMER0_void_FastPWM+0x72>
	break;
	case TIMER0_INVERTING_PWM_OC0:
		OCR0 = 255-((copy_DutyCycle*256)/100);
    17fc:	ec e5       	ldi	r30, 0x5C	; 92
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	98 2f       	mov	r25, r24
    1808:	88 27       	eor	r24, r24
    180a:	24 e6       	ldi	r18, 0x64	; 100
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	b9 01       	movw	r22, r18
    1810:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__divmodhi4>
    1814:	cb 01       	movw	r24, r22
    1816:	80 95       	com	r24
    1818:	80 83       	st	Z, r24
	break;
	default:
	return;
	}
	TIMER0_void_TimerStart(prescaller);
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TIMER0_void_TimerStart>
}//end TIMER0_void_FastPWM
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <TIMER0_void_PhaseCorrectPWM>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_PhaseCorrectPWM(u8 copy_DutyCycle ,timerOC0_type OC0_type )
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	00 d0       	rcall	.+0      	; 0x1836 <TIMER0_void_PhaseCorrectPWM+0x6>
    1836:	00 d0       	rcall	.+0      	; 0x1838 <TIMER0_void_PhaseCorrectPWM+0x8>
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	6a 83       	std	Y+2, r22	; 0x02
	switch(OC0_type)
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3c 83       	std	Y+4, r19	; 0x04
    1848:	2b 83       	std	Y+3, r18	; 0x03
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	82 30       	cpi	r24, 0x02	; 2
    1850:	91 05       	cpc	r25, r1
    1852:	31 f0       	breq	.+12     	; 0x1860 <TIMER0_void_PhaseCorrectPWM+0x30>
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	23 30       	cpi	r18, 0x03	; 3
    185a:	31 05       	cpc	r19, r1
    185c:	e1 f0       	breq	.+56     	; 0x1896 <TIMER0_void_PhaseCorrectPWM+0x66>
    185e:	36 c0       	rjmp	.+108    	; 0x18cc <TIMER0_void_PhaseCorrectPWM+0x9c>
	{
	case TIMER0_NONINVERTING_PWM_OC0:
		OCR0 = ((copy_DutyCycle*255)/100);
    1860:	ec e5       	ldi	r30, 0x5C	; 92
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	48 2f       	mov	r20, r24
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	ca 01       	movw	r24, r20
    186c:	9c 01       	movw	r18, r24
    186e:	22 0f       	add	r18, r18
    1870:	33 1f       	adc	r19, r19
    1872:	c9 01       	movw	r24, r18
    1874:	96 95       	lsr	r25
    1876:	98 2f       	mov	r25, r24
    1878:	88 27       	eor	r24, r24
    187a:	97 95       	ror	r25
    187c:	87 95       	ror	r24
    187e:	82 1b       	sub	r24, r18
    1880:	93 0b       	sbc	r25, r19
    1882:	84 0f       	add	r24, r20
    1884:	95 1f       	adc	r25, r21
    1886:	24 e6       	ldi	r18, 0x64	; 100
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	b9 01       	movw	r22, r18
    188c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__divmodhi4>
    1890:	cb 01       	movw	r24, r22
    1892:	80 83       	st	Z, r24
    1894:	1b c0       	rjmp	.+54     	; 0x18cc <TIMER0_void_PhaseCorrectPWM+0x9c>
	break;
	case TIMER0_INVERTING_PWM_OC0:
		OCR0 = 255-((copy_DutyCycle*255)/100);
    1896:	ec e5       	ldi	r30, 0x5C	; 92
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	48 2f       	mov	r20, r24
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	ca 01       	movw	r24, r20
    18a2:	9c 01       	movw	r18, r24
    18a4:	22 0f       	add	r18, r18
    18a6:	33 1f       	adc	r19, r19
    18a8:	c9 01       	movw	r24, r18
    18aa:	96 95       	lsr	r25
    18ac:	98 2f       	mov	r25, r24
    18ae:	88 27       	eor	r24, r24
    18b0:	97 95       	ror	r25
    18b2:	87 95       	ror	r24
    18b4:	82 1b       	sub	r24, r18
    18b6:	93 0b       	sbc	r25, r19
    18b8:	84 0f       	add	r24, r20
    18ba:	95 1f       	adc	r25, r21
    18bc:	24 e6       	ldi	r18, 0x64	; 100
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	b9 01       	movw	r22, r18
    18c2:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__divmodhi4>
    18c6:	cb 01       	movw	r24, r22
    18c8:	80 95       	com	r24
    18ca:	80 83       	st	Z, r24
	break;
	default:
		return;
	}
}// end TIMER0_void_PhaseCorrectPWM
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <TIMER0_void_TIMER0_TickTime>:

u32 TIMER0_void_TIMER0_TickTime(prescaller_type prescaler)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	27 97       	sbiw	r28, 0x07	; 7
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	8d 83       	std	Y+5, r24	; 0x05
	switch(prescaler)
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	3f 83       	std	Y+7, r19	; 0x07
    18f8:	2e 83       	std	Y+6, r18	; 0x06
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
    18fc:	9f 81       	ldd	r25, Y+7	; 0x07
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	91 05       	cpc	r25, r1
    1902:	09 f1       	breq	.+66     	; 0x1946 <TIMER0_void_TIMER0_TickTime+0x6c>
    1904:	2e 81       	ldd	r18, Y+6	; 0x06
    1906:	3f 81       	ldd	r19, Y+7	; 0x07
    1908:	24 30       	cpi	r18, 0x04	; 4
    190a:	31 05       	cpc	r19, r1
    190c:	5c f4       	brge	.+22     	; 0x1924 <TIMER0_void_TIMER0_TickTime+0x4a>
    190e:	8e 81       	ldd	r24, Y+6	; 0x06
    1910:	9f 81       	ldd	r25, Y+7	; 0x07
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	91 05       	cpc	r25, r1
    1916:	89 f0       	breq	.+34     	; 0x193a <TIMER0_void_TIMER0_TickTime+0x60>
    1918:	2e 81       	ldd	r18, Y+6	; 0x06
    191a:	3f 81       	ldd	r19, Y+7	; 0x07
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	79 f0       	breq	.+30     	; 0x1940 <TIMER0_void_TIMER0_TickTime+0x66>
    1922:	17 c0       	rjmp	.+46     	; 0x1952 <TIMER0_void_TIMER0_TickTime+0x78>
    1924:	8e 81       	ldd	r24, Y+6	; 0x06
    1926:	9f 81       	ldd	r25, Y+7	; 0x07
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	91 05       	cpc	r25, r1
    192c:	79 f0       	breq	.+30     	; 0x194c <TIMER0_void_TIMER0_TickTime+0x72>
    192e:	2e 81       	ldd	r18, Y+6	; 0x06
    1930:	3f 81       	ldd	r19, Y+7	; 0x07
    1932:	25 30       	cpi	r18, 0x05	; 5
    1934:	31 05       	cpc	r19, r1
    1936:	61 f0       	breq	.+24     	; 0x1950 <TIMER0_void_TIMER0_TickTime+0x76>
    1938:	0c c0       	rjmp	.+24     	; 0x1952 <TIMER0_void_TIMER0_TickTime+0x78>
	{
	case NO_Prescaller:
		prescaler = 1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	8d 83       	std	Y+5, r24	; 0x05
    193e:	09 c0       	rjmp	.+18     	; 0x1952 <TIMER0_void_TIMER0_TickTime+0x78>
		break;
	case Prescaller_8:
			prescaler = 8;
    1940:	88 e0       	ldi	r24, 0x08	; 8
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <TIMER0_void_TIMER0_TickTime+0x78>
		break;
	case Prescaller_64:
			prescaler = 64;
    1946:	80 e4       	ldi	r24, 0x40	; 64
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <TIMER0_void_TIMER0_TickTime+0x78>
		break;
	case Prescaller_256:
			prescaler = 256;
    194c:	1d 82       	std	Y+5, r1	; 0x05
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <TIMER0_void_TIMER0_TickTime+0x78>
		break;
	case Prescaller_1024:
			prescaler = 1024;
    1950:	1d 82       	std	Y+5, r1	; 0x05
		break;

	}

	u32 TickTime = prescaler/TIMER0_F_CPU;
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	32 e1       	ldi	r19, 0x12	; 18
    1960:	4a e7       	ldi	r20, 0x7A	; 122
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__udivmodsi4>
    196c:	da 01       	movw	r26, r20
    196e:	c9 01       	movw	r24, r18
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	ab 83       	std	Y+3, r26	; 0x03
    1976:	bc 83       	std	Y+4, r27	; 0x04
	return TickTime;
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	ab 81       	ldd	r26, Y+3	; 0x03
    197e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	27 96       	adiw	r28, 0x07	; 7
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <SPI_InitMaster>:
#include "SPI.h"
#include "../DIO/Memmap.h"
#include "../../LIB/STD_TYPES.h"
#include "../DIO/DIO_interface.h"
void SPI_InitMaster()
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	DIO_void_setPin_direction(PORTB_ID,PIN4,OUTPUT);
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	64 e0       	ldi	r22, 0x04	; 4
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN5,OUTPUT);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	65 e0       	ldi	r22, 0x05	; 5
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN6,INPUT);
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	66 e0       	ldi	r22, 0x06	; 6
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN7,OUTPUT);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	67 e0       	ldi	r22, 0x07	; 7
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_void_setPin_direction>
	DIO_void_setPin_value(PORTB_ID,PIN4,LOW);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	64 e0       	ldi	r22, 0x04	; 4
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <DIO_void_setPin_value>
	SPCR |= (1<<SPE)|(1<<MSTR);
    19d0:	ad e2       	ldi	r26, 0x2D	; 45
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ed e2       	ldi	r30, 0x2D	; 45
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	80 65       	ori	r24, 0x50	; 80
    19dc:	8c 93       	st	X, r24
}
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <SPI_InitSlave>:

void SPI_InitSlave()
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
	DIO_void_setPin_direction(PORTB_ID,PIN6,OUTPUT);
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	66 e0       	ldi	r22, 0x06	; 6
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_void_setPin_direction>
	SPCR |= (1<<SPE);
    19f6:	ad e2       	ldi	r26, 0x2D	; 45
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	ed e2       	ldi	r30, 0x2D	; 45
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 64       	ori	r24, 0x40	; 64
    1a02:	8c 93       	st	X, r24
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <SPI_SendByte>:

void SPI_SendByte(u8 data)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	0f 92       	push	r0
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    1a16:	ef e2       	ldi	r30, 0x2F	; 47
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	80 83       	st	Z, r24
	while(Bit_Is_Clear(SPSR,SPIF));
    1a1e:	ee e2       	ldi	r30, 0x2E	; 46
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	88 23       	and	r24, r24
    1a26:	dc f7       	brge	.-10     	; 0x1a1e <SPI_SendByte+0x14>
}
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <SPI_ReceiveByte>:

u8 SPI_ReceiveByte()
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	while(Bit_Is_Clear(SPSR,SPIF));
    1a38:	ee e2       	ldi	r30, 0x2E	; 46
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 23       	and	r24, r24
    1a40:	dc f7       	brge	.-10     	; 0x1a38 <SPI_ReceiveByte+0x8>
	return SPDR;
    1a42:	ef e2       	ldi	r30, 0x2F	; 47
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
}
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <SPI_SendString>:

void SPI_SendString(u8 *str)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <SPI_SendString+0x6>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	9a 83       	std	Y+2, r25	; 0x02
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	0a c0       	rjmp	.+20     	; 0x1a72 <SPI_SendString+0x24>
	while(*str)
	{
		SPI_SendByte(*str);
    1a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a60:	fa 81       	ldd	r31, Y+2	; 0x02
    1a62:	80 81       	ld	r24, Z
    1a64:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <SPI_SendByte>
		str++;
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
	return SPDR;
}

void SPI_SendString(u8 *str)
{
	while(*str)
    1a72:	e9 81       	ldd	r30, Y+1	; 0x01
    1a74:	fa 81       	ldd	r31, Y+2	; 0x02
    1a76:	80 81       	ld	r24, Z
    1a78:	88 23       	and	r24, r24
    1a7a:	89 f7       	brne	.-30     	; 0x1a5e <SPI_SendString+0x10>
	{
		SPI_SendByte(*str);
		str++;
	}
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <SPI_ReceiveString>:

void SPI_ReceiveString(u8 *str)
{
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <SPI_ReceiveString+0xa>
    1a90:	0f 92       	push	r0
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	9b 83       	std	Y+3, r25	; 0x03
    1a98:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1a9a:	19 82       	std	Y+1, r1	; 0x01
	str[i] = SPI_ReceiveByte();
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa6:	8c 01       	movw	r16, r24
    1aa8:	02 0f       	add	r16, r18
    1aaa:	13 1f       	adc	r17, r19
    1aac:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <SPI_ReceiveByte>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	80 83       	st	Z, r24
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <SPI_ReceiveString+0x4e>
	while(str[i] != '#')
	{
		i++;
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_ReceiveByte();
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	8c 01       	movw	r16, r24
    1ac8:	02 0f       	add	r16, r18
    1aca:	13 1f       	adc	r17, r19
    1acc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <SPI_ReceiveByte>
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	80 83       	st	Z, r24

void SPI_ReceiveString(u8 *str)
{
	u8 i = 0;
	str[i] = SPI_ReceiveByte();
	while(str[i] != '#')
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ade:	fc 01       	movw	r30, r24
    1ae0:	e2 0f       	add	r30, r18
    1ae2:	f3 1f       	adc	r31, r19
    1ae4:	80 81       	ld	r24, Z
    1ae6:	83 32       	cpi	r24, 0x23	; 35
    1ae8:	31 f7       	brne	.-52     	; 0x1ab6 <SPI_ReceiveString+0x30>
	{
		i++;
		str[i] = SPI_ReceiveByte();
	}
	str[i] = '\0';
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	9b 81       	ldd	r25, Y+3	; 0x03
    1af4:	fc 01       	movw	r30, r24
    1af6:	e2 0f       	add	r30, r18
    1af8:	f3 1f       	adc	r31, r19
    1afa:	10 82       	st	Z, r1
}
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	08 95       	ret

00001b0c <EXTI_void_int>:
#include "../DIO/Memmap.h"
#include  "ex_int.h"


void EXTI_void_int( u8 INT)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <EXTI_void_int+0x6>
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	89 83       	std	Y+1, r24	; 0x01
	//INT0 is input ( done )
	//  Enable peripheral interrupt enable
		switch(INT)
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3b 83       	std	Y+3, r19	; 0x03
    1b22:	2a 83       	std	Y+2, r18	; 0x02
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	9b 81       	ldd	r25, Y+3	; 0x03
    1b28:	86 30       	cpi	r24, 0x06	; 6
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	59 f0       	breq	.+22     	; 0x1b44 <EXTI_void_int+0x38>
    1b2e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b30:	3b 81       	ldd	r19, Y+3	; 0x03
    1b32:	27 30       	cpi	r18, 0x07	; 7
    1b34:	31 05       	cpc	r19, r1
    1b36:	71 f0       	breq	.+28     	; 0x1b54 <EXTI_void_int+0x48>
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3c:	85 30       	cpi	r24, 0x05	; 5
    1b3e:	91 05       	cpc	r25, r1
    1b40:	89 f0       	breq	.+34     	; 0x1b64 <EXTI_void_int+0x58>
    1b42:	17 c0       	rjmp	.+46     	; 0x1b72 <EXTI_void_int+0x66>
		{
		case INT0:
			SETBIT(GICR,6);
    1b44:	ab e5       	ldi	r26, 0x5B	; 91
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	eb e5       	ldi	r30, 0x5B	; 91
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	80 64       	ori	r24, 0x40	; 64
    1b50:	8c 93       	st	X, r24
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <EXTI_void_int+0x66>
			break;
		case INT1:
			SETBIT(GICR,7);
    1b54:	ab e5       	ldi	r26, 0x5B	; 91
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	eb e5       	ldi	r30, 0x5B	; 91
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	80 68       	ori	r24, 0x80	; 128
    1b60:	8c 93       	st	X, r24
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <EXTI_void_int+0x66>
			break;
		case INT2:
			SETBIT(GICR,5);
    1b64:	ab e5       	ldi	r26, 0x5B	; 91
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	eb e5       	ldi	r30, 0x5B	; 91
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	80 62       	ori	r24, 0x20	; 32
    1b70:	8c 93       	st	X, r24
			break;
		}
     //Enable GIE
	 SETBIT(SREG,7);
    1b72:	af e5       	ldi	r26, 0x5F	; 95
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ef e5       	ldi	r30, 0x5F	; 95
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	80 68       	ori	r24, 0x80	; 128
    1b7e:	8c 93       	st	X, r24
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <EXTI_void_changeMod>:
void EXTI_void_changeMod(ext_mode_type mode,u8 INT)
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <EXTI_void_changeMod+0x6>
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <EXTI_void_changeMod+0x8>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <EXTI_void_changeMod+0xa>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	6a 83       	std	Y+2, r22	; 0x02
     if (INT==INT0)
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	86 30       	cpi	r24, 0x06	; 6
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <EXTI_void_changeMod+0x1a>
    1ba4:	5c c0       	rjmp	.+184    	; 0x1c5e <EXTI_void_changeMod+0xd2>
        {
       	 switch(mode )
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	3e 83       	std	Y+6, r19	; 0x06
    1bae:	2d 83       	std	Y+5, r18	; 0x05
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <EXTI_void_changeMod+0x30>
    1bba:	42 c0       	rjmp	.+132    	; 0x1c40 <EXTI_void_changeMod+0xb4>
    1bbc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bbe:	3e 81       	ldd	r19, Y+6	; 0x06
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <EXTI_void_changeMod+0x44>
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	61 f0       	breq	.+24     	; 0x1be6 <EXTI_void_changeMod+0x5a>
    1bce:	a6 c0       	rjmp	.+332    	; 0x1d1c <EXTI_void_changeMod+0x190>
    1bd0:	2d 81       	ldd	r18, Y+5	; 0x05
    1bd2:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	21 f1       	breq	.+72     	; 0x1c22 <EXTI_void_changeMod+0x96>
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	91 05       	cpc	r25, r1
    1be2:	81 f0       	breq	.+32     	; 0x1c04 <EXTI_void_changeMod+0x78>
    1be4:	9b c0       	rjmp	.+310    	; 0x1d1c <EXTI_void_changeMod+0x190>
       	 {
         case EXT_LOW_MODE :
			  CLRBIT(MCUCR,0);
    1be6:	a5 e5       	ldi	r26, 0x55	; 85
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e5 e5       	ldi	r30, 0x55	; 85
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8e 7f       	andi	r24, 0xFE	; 254
    1bf2:	8c 93       	st	X, r24
			  CLRBIT(MCUCR,1);
    1bf4:	a5 e5       	ldi	r26, 0x55	; 85
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e5 e5       	ldi	r30, 0x55	; 85
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8d 7f       	andi	r24, 0xFD	; 253
    1c00:	8c 93       	st	X, r24
    1c02:	8c c0       	rjmp	.+280    	; 0x1d1c <EXTI_void_changeMod+0x190>
			  break;
         case EXT_RAISING_MODE :
			  SETBIT(MCUCR,0);
    1c04:	a5 e5       	ldi	r26, 0x55	; 85
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e5 e5       	ldi	r30, 0x55	; 85
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	81 60       	ori	r24, 0x01	; 1
    1c10:	8c 93       	st	X, r24
			  SETBIT(MCUCR,1);
    1c12:	a5 e5       	ldi	r26, 0x55	; 85
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e5 e5       	ldi	r30, 0x55	; 85
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	82 60       	ori	r24, 0x02	; 2
    1c1e:	8c 93       	st	X, r24
    1c20:	7d c0       	rjmp	.+250    	; 0x1d1c <EXTI_void_changeMod+0x190>
			  break;
         case EXT_FAILLING_MODE :
			  CLRBIT(MCUCR,0);
    1c22:	a5 e5       	ldi	r26, 0x55	; 85
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e5 e5       	ldi	r30, 0x55	; 85
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8e 7f       	andi	r24, 0xFE	; 254
    1c2e:	8c 93       	st	X, r24
			  SETBIT(MCUCR,1);
    1c30:	a5 e5       	ldi	r26, 0x55	; 85
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e5 e5       	ldi	r30, 0x55	; 85
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	82 60       	ori	r24, 0x02	; 2
    1c3c:	8c 93       	st	X, r24
    1c3e:	6e c0       	rjmp	.+220    	; 0x1d1c <EXTI_void_changeMod+0x190>
			  break;
         case EXT_CHANGE_MODE :
			  SETBIT(MCUCR,0);
    1c40:	a5 e5       	ldi	r26, 0x55	; 85
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e5       	ldi	r30, 0x55	; 85
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	81 60       	ori	r24, 0x01	; 1
    1c4c:	8c 93       	st	X, r24
			  CLRBIT(MCUCR,1);
    1c4e:	a5 e5       	ldi	r26, 0x55	; 85
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e5 e5       	ldi	r30, 0x55	; 85
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	8d 7f       	andi	r24, 0xFD	; 253
    1c5a:	8c 93       	st	X, r24
    1c5c:	5f c0       	rjmp	.+190    	; 0x1d1c <EXTI_void_changeMod+0x190>
			  break;
            }
        }
     else if (INT==INT1)
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	87 30       	cpi	r24, 0x07	; 7
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <EXTI_void_changeMod+0xda>
    1c64:	5b c0       	rjmp	.+182    	; 0x1d1c <EXTI_void_changeMod+0x190>
            {
           	 switch(mode )
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3c 83       	std	Y+4, r19	; 0x04
    1c6e:	2b 83       	std	Y+3, r18	; 0x03
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <EXTI_void_changeMod+0xf0>
    1c7a:	42 c0       	rjmp	.+132    	; 0x1d00 <EXTI_void_changeMod+0x174>
    1c7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <EXTI_void_changeMod+0x104>
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	61 f0       	breq	.+24     	; 0x1ca6 <EXTI_void_changeMod+0x11a>
    1c8e:	46 c0       	rjmp	.+140    	; 0x1d1c <EXTI_void_changeMod+0x190>
    1c90:	2b 81       	ldd	r18, Y+3	; 0x03
    1c92:	3c 81       	ldd	r19, Y+4	; 0x04
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	21 f1       	breq	.+72     	; 0x1ce2 <EXTI_void_changeMod+0x156>
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	83 30       	cpi	r24, 0x03	; 3
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	81 f0       	breq	.+32     	; 0x1cc4 <EXTI_void_changeMod+0x138>
    1ca4:	3b c0       	rjmp	.+118    	; 0x1d1c <EXTI_void_changeMod+0x190>
           	 {
             case EXT_LOW_MODE :
				  CLRBIT(MCUCR,2);
    1ca6:	a5 e5       	ldi	r26, 0x55	; 85
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e5 e5       	ldi	r30, 0x55	; 85
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8b 7f       	andi	r24, 0xFB	; 251
    1cb2:	8c 93       	st	X, r24
				  CLRBIT(MCUCR,3);
    1cb4:	a5 e5       	ldi	r26, 0x55	; 85
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e5 e5       	ldi	r30, 0x55	; 85
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	87 7f       	andi	r24, 0xF7	; 247
    1cc0:	8c 93       	st	X, r24
    1cc2:	2c c0       	rjmp	.+88     	; 0x1d1c <EXTI_void_changeMod+0x190>
				  break;
             case EXT_RAISING_MODE :
				  SETBIT(MCUCR,2);
    1cc4:	a5 e5       	ldi	r26, 0x55	; 85
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e5 e5       	ldi	r30, 0x55	; 85
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	84 60       	ori	r24, 0x04	; 4
    1cd0:	8c 93       	st	X, r24
				  SETBIT(MCUCR,3);
    1cd2:	a5 e5       	ldi	r26, 0x55	; 85
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e5 e5       	ldi	r30, 0x55	; 85
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	88 60       	ori	r24, 0x08	; 8
    1cde:	8c 93       	st	X, r24
    1ce0:	1d c0       	rjmp	.+58     	; 0x1d1c <EXTI_void_changeMod+0x190>
				  break;
             case EXT_FAILLING_MODE :
				  CLRBIT(MCUCR,2);
    1ce2:	a5 e5       	ldi	r26, 0x55	; 85
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e5 e5       	ldi	r30, 0x55	; 85
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	8b 7f       	andi	r24, 0xFB	; 251
    1cee:	8c 93       	st	X, r24
				  SETBIT(MCUCR,3);
    1cf0:	a5 e5       	ldi	r26, 0x55	; 85
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e5 e5       	ldi	r30, 0x55	; 85
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	88 60       	ori	r24, 0x08	; 8
    1cfc:	8c 93       	st	X, r24
    1cfe:	0e c0       	rjmp	.+28     	; 0x1d1c <EXTI_void_changeMod+0x190>
				  break;
             case EXT_CHANGE_MODE :
				  SETBIT(MCUCR,2);
    1d00:	a5 e5       	ldi	r26, 0x55	; 85
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e5       	ldi	r30, 0x55	; 85
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	84 60       	ori	r24, 0x04	; 4
    1d0c:	8c 93       	st	X, r24
				  CLRBIT(MCUCR,3);
    1d0e:	a5 e5       	ldi	r26, 0x55	; 85
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e5 e5       	ldi	r30, 0x55	; 85
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	87 7f       	andi	r24, 0xF7	; 247
    1d1a:	8c 93       	st	X, r24
						 case EXT_FAILLING_MODE :
								  CLRBIT(mcucsr,6);
								  break;
					}*/
            }
}
    1d1c:	26 96       	adiw	r28, 0x06	; 6
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <DIO_void_setPin_value>:
#include "DIO_interface.h"

#include "../../LIB/STD_TYPES.h"

void DIO_void_setPin_value(port_type port, pin_type pin,value_type value)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	27 97       	sbiw	r28, 0x07	; 7
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	6a 83       	std	Y+2, r22	; 0x02
    1d46:	4b 83       	std	Y+3, r20	; 0x03
	if(value == LOW)
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	88 23       	and	r24, r24
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <DIO_void_setPin_value+0x22>
    1d4e:	74 c0       	rjmp	.+232    	; 0x1e38 <DIO_void_setPin_value+0x10a>
	{
		switch(port)
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	3f 83       	std	Y+7, r19	; 0x07
    1d58:	2e 83       	std	Y+6, r18	; 0x06
    1d5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	91 05       	cpc	r25, r1
    1d62:	59 f1       	breq	.+86     	; 0x1dba <DIO_void_setPin_value+0x8c>
    1d64:	2e 81       	ldd	r18, Y+6	; 0x06
    1d66:	3f 81       	ldd	r19, Y+7	; 0x07
    1d68:	22 30       	cpi	r18, 0x02	; 2
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <DIO_void_setPin_value+0x4a>
    1d6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d70:	9f 81       	ldd	r25, Y+7	; 0x07
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	69 f0       	breq	.+26     	; 0x1d90 <DIO_void_setPin_value+0x62>
    1d76:	d2 c0       	rjmp	.+420    	; 0x1f1c <DIO_void_setPin_value+0x1ee>
    1d78:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d7c:	22 30       	cpi	r18, 0x02	; 2
    1d7e:	31 05       	cpc	r19, r1
    1d80:	89 f1       	breq	.+98     	; 0x1de4 <DIO_void_setPin_value+0xb6>
    1d82:	8e 81       	ldd	r24, Y+6	; 0x06
    1d84:	9f 81       	ldd	r25, Y+7	; 0x07
    1d86:	83 30       	cpi	r24, 0x03	; 3
    1d88:	91 05       	cpc	r25, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <DIO_void_setPin_value+0x60>
    1d8c:	40 c0       	rjmp	.+128    	; 0x1e0e <DIO_void_setPin_value+0xe0>
    1d8e:	c6 c0       	rjmp	.+396    	; 0x1f1c <DIO_void_setPin_value+0x1ee>
		{
		case PORTA_ID:
			CLRBIT(PORTA, pin);
    1d90:	ab e3       	ldi	r26, 0x3B	; 59
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	eb e3       	ldi	r30, 0x3B	; 59
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <DIO_void_setPin_value+0x80>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <DIO_void_setPin_value+0x7c>
    1db2:	80 95       	com	r24
    1db4:	84 23       	and	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	b1 c0       	rjmp	.+354    	; 0x1f1c <DIO_void_setPin_value+0x1ee>
			break;
		case PORTB_ID:
			CLRBIT(PORTB, pin);
    1dba:	a8 e3       	ldi	r26, 0x38	; 56
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e8 e3       	ldi	r30, 0x38	; 56
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <DIO_void_setPin_value+0xaa>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <DIO_void_setPin_value+0xa6>
    1ddc:	80 95       	com	r24
    1dde:	84 23       	and	r24, r20
    1de0:	8c 93       	st	X, r24
    1de2:	9c c0       	rjmp	.+312    	; 0x1f1c <DIO_void_setPin_value+0x1ee>
			break;
		case PORTC_ID:
			CLRBIT(PORTC, pin);
    1de4:	a5 e3       	ldi	r26, 0x35	; 53
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e5 e3       	ldi	r30, 0x35	; 53
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <DIO_void_setPin_value+0xd4>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <DIO_void_setPin_value+0xd0>
    1e06:	80 95       	com	r24
    1e08:	84 23       	and	r24, r20
    1e0a:	8c 93       	st	X, r24
    1e0c:	87 c0       	rjmp	.+270    	; 0x1f1c <DIO_void_setPin_value+0x1ee>
			break;
		case PORTD_ID:
			CLRBIT(PORTD, pin);
    1e0e:	a2 e3       	ldi	r26, 0x32	; 50
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e2 e3       	ldi	r30, 0x32	; 50
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	48 2f       	mov	r20, r24
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	02 2e       	mov	r0, r18
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <DIO_void_setPin_value+0xfe>
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	0a 94       	dec	r0
    1e2e:	e2 f7       	brpl	.-8      	; 0x1e28 <DIO_void_setPin_value+0xfa>
    1e30:	80 95       	com	r24
    1e32:	84 23       	and	r24, r20
    1e34:	8c 93       	st	X, r24
    1e36:	72 c0       	rjmp	.+228    	; 0x1f1c <DIO_void_setPin_value+0x1ee>
			break;
		}//end switch
	}//end if
	else if(value == HIGH)
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <DIO_void_setPin_value+0x112>
    1e3e:	6e c0       	rjmp	.+220    	; 0x1f1c <DIO_void_setPin_value+0x1ee>
	{
		switch(port)
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	3d 83       	std	Y+5, r19	; 0x05
    1e48:	2c 83       	std	Y+4, r18	; 0x04
    1e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	91 05       	cpc	r25, r1
    1e52:	49 f1       	breq	.+82     	; 0x1ea6 <DIO_void_setPin_value+0x178>
    1e54:	2c 81       	ldd	r18, Y+4	; 0x04
    1e56:	3d 81       	ldd	r19, Y+5	; 0x05
    1e58:	22 30       	cpi	r18, 0x02	; 2
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <DIO_void_setPin_value+0x13a>
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	9d 81       	ldd	r25, Y+5	; 0x05
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	61 f0       	breq	.+24     	; 0x1e7e <DIO_void_setPin_value+0x150>
    1e66:	5a c0       	rjmp	.+180    	; 0x1f1c <DIO_void_setPin_value+0x1ee>
    1e68:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	71 f1       	breq	.+92     	; 0x1ece <DIO_void_setPin_value+0x1a0>
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	9d 81       	ldd	r25, Y+5	; 0x05
    1e76:	83 30       	cpi	r24, 0x03	; 3
    1e78:	91 05       	cpc	r25, r1
    1e7a:	e9 f1       	breq	.+122    	; 0x1ef6 <DIO_void_setPin_value+0x1c8>
    1e7c:	4f c0       	rjmp	.+158    	; 0x1f1c <DIO_void_setPin_value+0x1ee>
		{
		case PORTA_ID:
			SETBIT(PORTA, pin);
    1e7e:	ab e3       	ldi	r26, 0x3B	; 59
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	eb e3       	ldi	r30, 0x3B	; 59
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	48 2f       	mov	r20, r24
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	02 2e       	mov	r0, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <DIO_void_setPin_value+0x16e>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	0a 94       	dec	r0
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <DIO_void_setPin_value+0x16a>
    1ea0:	84 2b       	or	r24, r20
    1ea2:	8c 93       	st	X, r24
    1ea4:	3b c0       	rjmp	.+118    	; 0x1f1c <DIO_void_setPin_value+0x1ee>
			break;
		case PORTB_ID:
			SETBIT(PORTB, pin);
    1ea6:	a8 e3       	ldi	r26, 0x38	; 56
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e8 e3       	ldi	r30, 0x38	; 56
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	48 2f       	mov	r20, r24
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	02 2e       	mov	r0, r18
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <DIO_void_setPin_value+0x196>
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	0a 94       	dec	r0
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <DIO_void_setPin_value+0x192>
    1ec8:	84 2b       	or	r24, r20
    1eca:	8c 93       	st	X, r24
    1ecc:	27 c0       	rjmp	.+78     	; 0x1f1c <DIO_void_setPin_value+0x1ee>
			break;
		case PORTC_ID:
			SETBIT(PORTC, pin);
    1ece:	a5 e3       	ldi	r26, 0x35	; 53
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e5 e3       	ldi	r30, 0x35	; 53
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <DIO_void_setPin_value+0x1be>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <DIO_void_setPin_value+0x1ba>
    1ef0:	84 2b       	or	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	13 c0       	rjmp	.+38     	; 0x1f1c <DIO_void_setPin_value+0x1ee>
			break;
		case PORTD_ID:
			SETBIT(PORTD, pin);
    1ef6:	a2 e3       	ldi	r26, 0x32	; 50
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e2 e3       	ldi	r30, 0x32	; 50
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	48 2f       	mov	r20, r24
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 2e       	mov	r0, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <DIO_void_setPin_value+0x1e6>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	0a 94       	dec	r0
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <DIO_void_setPin_value+0x1e2>
    1f18:	84 2b       	or	r24, r20
    1f1a:	8c 93       	st	X, r24
	}//end else if
	else
	{

	}//end else
}//end DIO_void_setPin_value
    1f1c:	27 96       	adiw	r28, 0x07	; 7
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <DIO_void_setPin_direction>:
void DIO_void_setPin_direction(port_type port, pin_type pin,direction_type direction)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	27 97       	sbiw	r28, 0x07	; 7
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	6a 83       	std	Y+2, r22	; 0x02
    1f46:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == INPUT)
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <DIO_void_setPin_direction+0x22>
    1f4e:	74 c0       	rjmp	.+232    	; 0x2038 <DIO_void_setPin_direction+0x10a>
	{
		switch(port)
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	3f 83       	std	Y+7, r19	; 0x07
    1f58:	2e 83       	std	Y+6, r18	; 0x06
    1f5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	91 05       	cpc	r25, r1
    1f62:	59 f1       	breq	.+86     	; 0x1fba <DIO_void_setPin_direction+0x8c>
    1f64:	2e 81       	ldd	r18, Y+6	; 0x06
    1f66:	3f 81       	ldd	r19, Y+7	; 0x07
    1f68:	22 30       	cpi	r18, 0x02	; 2
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <DIO_void_setPin_direction+0x4a>
    1f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f70:	9f 81       	ldd	r25, Y+7	; 0x07
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	69 f0       	breq	.+26     	; 0x1f90 <DIO_void_setPin_direction+0x62>
    1f76:	d2 c0       	rjmp	.+420    	; 0x211c <DIO_void_setPin_direction+0x1ee>
    1f78:	2e 81       	ldd	r18, Y+6	; 0x06
    1f7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f7c:	22 30       	cpi	r18, 0x02	; 2
    1f7e:	31 05       	cpc	r19, r1
    1f80:	89 f1       	breq	.+98     	; 0x1fe4 <DIO_void_setPin_direction+0xb6>
    1f82:	8e 81       	ldd	r24, Y+6	; 0x06
    1f84:	9f 81       	ldd	r25, Y+7	; 0x07
    1f86:	83 30       	cpi	r24, 0x03	; 3
    1f88:	91 05       	cpc	r25, r1
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <DIO_void_setPin_direction+0x60>
    1f8c:	40 c0       	rjmp	.+128    	; 0x200e <DIO_void_setPin_direction+0xe0>
    1f8e:	c6 c0       	rjmp	.+396    	; 0x211c <DIO_void_setPin_direction+0x1ee>
		{
		case PORTA_ID:
			CLRBIT(DDRA, pin);
    1f90:	aa e3       	ldi	r26, 0x3A	; 58
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	ea e3       	ldi	r30, 0x3A	; 58
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	48 2f       	mov	r20, r24
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	02 2e       	mov	r0, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <DIO_void_setPin_direction+0x80>
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	0a 94       	dec	r0
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <DIO_void_setPin_direction+0x7c>
    1fb2:	80 95       	com	r24
    1fb4:	84 23       	and	r24, r20
    1fb6:	8c 93       	st	X, r24
    1fb8:	b1 c0       	rjmp	.+354    	; 0x211c <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTB_ID:
			CLRBIT(DDRB, pin);
    1fba:	a7 e3       	ldi	r26, 0x37	; 55
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e7 e3       	ldi	r30, 0x37	; 55
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	48 2f       	mov	r20, r24
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 2e       	mov	r0, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <DIO_void_setPin_direction+0xaa>
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	0a 94       	dec	r0
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <DIO_void_setPin_direction+0xa6>
    1fdc:	80 95       	com	r24
    1fde:	84 23       	and	r24, r20
    1fe0:	8c 93       	st	X, r24
    1fe2:	9c c0       	rjmp	.+312    	; 0x211c <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTC_ID:
			CLRBIT(DDRC, pin);
    1fe4:	a4 e3       	ldi	r26, 0x34	; 52
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e4 e3       	ldi	r30, 0x34	; 52
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	48 2f       	mov	r20, r24
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <DIO_void_setPin_direction+0xd4>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <DIO_void_setPin_direction+0xd0>
    2006:	80 95       	com	r24
    2008:	84 23       	and	r24, r20
    200a:	8c 93       	st	X, r24
    200c:	87 c0       	rjmp	.+270    	; 0x211c <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTD_ID:
			CLRBIT(DDRD, pin);
    200e:	a1 e3       	ldi	r26, 0x31	; 49
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e1 e3       	ldi	r30, 0x31	; 49
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	48 2f       	mov	r20, r24
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	02 2e       	mov	r0, r18
    2026:	02 c0       	rjmp	.+4      	; 0x202c <DIO_void_setPin_direction+0xfe>
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	0a 94       	dec	r0
    202e:	e2 f7       	brpl	.-8      	; 0x2028 <DIO_void_setPin_direction+0xfa>
    2030:	80 95       	com	r24
    2032:	84 23       	and	r24, r20
    2034:	8c 93       	st	X, r24
    2036:	72 c0       	rjmp	.+228    	; 0x211c <DIO_void_setPin_direction+0x1ee>
			break;
		}//end switch
	}//end if
	else if(direction == OUTPUT)
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	81 30       	cpi	r24, 0x01	; 1
    203c:	09 f0       	breq	.+2      	; 0x2040 <DIO_void_setPin_direction+0x112>
    203e:	6e c0       	rjmp	.+220    	; 0x211c <DIO_void_setPin_direction+0x1ee>
	{
		switch(port)
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	3d 83       	std	Y+5, r19	; 0x05
    2048:	2c 83       	std	Y+4, r18	; 0x04
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	91 05       	cpc	r25, r1
    2052:	49 f1       	breq	.+82     	; 0x20a6 <DIO_void_setPin_direction+0x178>
    2054:	2c 81       	ldd	r18, Y+4	; 0x04
    2056:	3d 81       	ldd	r19, Y+5	; 0x05
    2058:	22 30       	cpi	r18, 0x02	; 2
    205a:	31 05       	cpc	r19, r1
    205c:	2c f4       	brge	.+10     	; 0x2068 <DIO_void_setPin_direction+0x13a>
    205e:	8c 81       	ldd	r24, Y+4	; 0x04
    2060:	9d 81       	ldd	r25, Y+5	; 0x05
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	61 f0       	breq	.+24     	; 0x207e <DIO_void_setPin_direction+0x150>
    2066:	5a c0       	rjmp	.+180    	; 0x211c <DIO_void_setPin_direction+0x1ee>
    2068:	2c 81       	ldd	r18, Y+4	; 0x04
    206a:	3d 81       	ldd	r19, Y+5	; 0x05
    206c:	22 30       	cpi	r18, 0x02	; 2
    206e:	31 05       	cpc	r19, r1
    2070:	71 f1       	breq	.+92     	; 0x20ce <DIO_void_setPin_direction+0x1a0>
    2072:	8c 81       	ldd	r24, Y+4	; 0x04
    2074:	9d 81       	ldd	r25, Y+5	; 0x05
    2076:	83 30       	cpi	r24, 0x03	; 3
    2078:	91 05       	cpc	r25, r1
    207a:	e9 f1       	breq	.+122    	; 0x20f6 <DIO_void_setPin_direction+0x1c8>
    207c:	4f c0       	rjmp	.+158    	; 0x211c <DIO_void_setPin_direction+0x1ee>
		{
		case PORTA_ID:
			SETBIT(DDRA, pin);
    207e:	aa e3       	ldi	r26, 0x3A	; 58
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	ea e3       	ldi	r30, 0x3A	; 58
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	48 2f       	mov	r20, r24
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 2e       	mov	r0, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <DIO_void_setPin_direction+0x16e>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	0a 94       	dec	r0
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <DIO_void_setPin_direction+0x16a>
    20a0:	84 2b       	or	r24, r20
    20a2:	8c 93       	st	X, r24
    20a4:	3b c0       	rjmp	.+118    	; 0x211c <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTB_ID:
			SETBIT(DDRB, pin);
    20a6:	a7 e3       	ldi	r26, 0x37	; 55
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e7 e3       	ldi	r30, 0x37	; 55
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	48 2f       	mov	r20, r24
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 2e       	mov	r0, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <DIO_void_setPin_direction+0x196>
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	0a 94       	dec	r0
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <DIO_void_setPin_direction+0x192>
    20c8:	84 2b       	or	r24, r20
    20ca:	8c 93       	st	X, r24
    20cc:	27 c0       	rjmp	.+78     	; 0x211c <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTC_ID:
			SETBIT(DDRC, pin);
    20ce:	a4 e3       	ldi	r26, 0x34	; 52
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e4 e3       	ldi	r30, 0x34	; 52
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	48 2f       	mov	r20, r24
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	02 2e       	mov	r0, r18
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <DIO_void_setPin_direction+0x1be>
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	0a 94       	dec	r0
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <DIO_void_setPin_direction+0x1ba>
    20f0:	84 2b       	or	r24, r20
    20f2:	8c 93       	st	X, r24
    20f4:	13 c0       	rjmp	.+38     	; 0x211c <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTD_ID:
			SETBIT(DDRD, pin);
    20f6:	a1 e3       	ldi	r26, 0x31	; 49
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e1 e3       	ldi	r30, 0x31	; 49
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	48 2f       	mov	r20, r24
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	02 2e       	mov	r0, r18
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <DIO_void_setPin_direction+0x1e6>
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	0a 94       	dec	r0
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <DIO_void_setPin_direction+0x1e2>
    2118:	84 2b       	or	r24, r20
    211a:	8c 93       	st	X, r24
	}//end else if
	else
	{

	}//end else
}//end DIO_void_setPin_direction
    211c:	27 96       	adiw	r28, 0x07	; 7
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <DIO_value_type_getPin_value>:
value_type DIO_value_type_getPin_value(port_type port, pin_type pin)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	00 d0       	rcall	.+0      	; 0x2134 <DIO_value_type_getPin_value+0x6>
    2134:	00 d0       	rcall	.+0      	; 0x2136 <DIO_value_type_getPin_value+0x8>
    2136:	0f 92       	push	r0
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	8a 83       	std	Y+2, r24	; 0x02
    213e:	6b 83       	std	Y+3, r22	; 0x03
	value_type ret_val;

	switch(port)
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	3d 83       	std	Y+5, r19	; 0x05
    2148:	2c 83       	std	Y+4, r18	; 0x04
    214a:	4c 81       	ldd	r20, Y+4	; 0x04
    214c:	5d 81       	ldd	r21, Y+5	; 0x05
    214e:	41 30       	cpi	r20, 0x01	; 1
    2150:	51 05       	cpc	r21, r1
    2152:	41 f1       	breq	.+80     	; 0x21a4 <DIO_value_type_getPin_value+0x76>
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	82 30       	cpi	r24, 0x02	; 2
    215a:	91 05       	cpc	r25, r1
    215c:	34 f4       	brge	.+12     	; 0x216a <DIO_value_type_getPin_value+0x3c>
    215e:	2c 81       	ldd	r18, Y+4	; 0x04
    2160:	3d 81       	ldd	r19, Y+5	; 0x05
    2162:	21 15       	cp	r18, r1
    2164:	31 05       	cpc	r19, r1
    2166:	61 f0       	breq	.+24     	; 0x2180 <DIO_value_type_getPin_value+0x52>
    2168:	52 c0       	rjmp	.+164    	; 0x220e <DIO_value_type_getPin_value+0xe0>
    216a:	4c 81       	ldd	r20, Y+4	; 0x04
    216c:	5d 81       	ldd	r21, Y+5	; 0x05
    216e:	42 30       	cpi	r20, 0x02	; 2
    2170:	51 05       	cpc	r21, r1
    2172:	51 f1       	breq	.+84     	; 0x21c8 <DIO_value_type_getPin_value+0x9a>
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	9d 81       	ldd	r25, Y+5	; 0x05
    2178:	83 30       	cpi	r24, 0x03	; 3
    217a:	91 05       	cpc	r25, r1
    217c:	b9 f1       	breq	.+110    	; 0x21ec <DIO_value_type_getPin_value+0xbe>
    217e:	47 c0       	rjmp	.+142    	; 0x220e <DIO_value_type_getPin_value+0xe0>
	{
	case PORTA_ID:
		ret_val = GETBIT(PINA, pin);
    2180:	e9 e3       	ldi	r30, 0x39	; 57
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a9 01       	movw	r20, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_value_type_getPin_value+0x6a>
    2194:	55 95       	asr	r21
    2196:	47 95       	ror	r20
    2198:	8a 95       	dec	r24
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_value_type_getPin_value+0x66>
    219c:	ca 01       	movw	r24, r20
    219e:	81 70       	andi	r24, 0x01	; 1
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	35 c0       	rjmp	.+106    	; 0x220e <DIO_value_type_getPin_value+0xe0>
		break;
	case PORTB_ID:
		ret_val = GETBIT(PINB, pin);
    21a4:	e6 e3       	ldi	r30, 0x36	; 54
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a9 01       	movw	r20, r18
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <DIO_value_type_getPin_value+0x8e>
    21b8:	55 95       	asr	r21
    21ba:	47 95       	ror	r20
    21bc:	8a 95       	dec	r24
    21be:	e2 f7       	brpl	.-8      	; 0x21b8 <DIO_value_type_getPin_value+0x8a>
    21c0:	ca 01       	movw	r24, r20
    21c2:	81 70       	andi	r24, 0x01	; 1
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	23 c0       	rjmp	.+70     	; 0x220e <DIO_value_type_getPin_value+0xe0>
		break;
	case PORTC_ID:
		ret_val = GETBIT(PINC, pin);
    21c8:	e3 e3       	ldi	r30, 0x33	; 51
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	88 2f       	mov	r24, r24
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	a9 01       	movw	r20, r18
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <DIO_value_type_getPin_value+0xb2>
    21dc:	55 95       	asr	r21
    21de:	47 95       	ror	r20
    21e0:	8a 95       	dec	r24
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <DIO_value_type_getPin_value+0xae>
    21e4:	ca 01       	movw	r24, r20
    21e6:	81 70       	andi	r24, 0x01	; 1
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	11 c0       	rjmp	.+34     	; 0x220e <DIO_value_type_getPin_value+0xe0>
		break;
	case PORTD_ID:
		ret_val = GETBIT(PIND, pin);
    21ec:	e0 e3       	ldi	r30, 0x30	; 48
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a9 01       	movw	r20, r18
    21fe:	02 c0       	rjmp	.+4      	; 0x2204 <DIO_value_type_getPin_value+0xd6>
    2200:	55 95       	asr	r21
    2202:	47 95       	ror	r20
    2204:	8a 95       	dec	r24
    2206:	e2 f7       	brpl	.-8      	; 0x2200 <DIO_value_type_getPin_value+0xd2>
    2208:	ca 01       	movw	r24, r20
    220a:	81 70       	andi	r24, 0x01	; 1
    220c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}//end switch

	return ret_val;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
}//end DIO_value_type_getPin_value
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <DIO_void_setPort_direction>:
void DIO_void_setPort_direction(port_type port, u8 direction)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <DIO_void_setPort_direction+0x6>
    2226:	00 d0       	rcall	.+0      	; 0x2228 <DIO_void_setPort_direction+0x8>
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	3c 83       	std	Y+4, r19	; 0x04
    2238:	2b 83       	std	Y+3, r18	; 0x03
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	91 05       	cpc	r25, r1
    2242:	d1 f0       	breq	.+52     	; 0x2278 <DIO_void_setPort_direction+0x58>
    2244:	2b 81       	ldd	r18, Y+3	; 0x03
    2246:	3c 81       	ldd	r19, Y+4	; 0x04
    2248:	22 30       	cpi	r18, 0x02	; 2
    224a:	31 05       	cpc	r19, r1
    224c:	2c f4       	brge	.+10     	; 0x2258 <DIO_void_setPort_direction+0x38>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	61 f0       	breq	.+24     	; 0x226e <DIO_void_setPort_direction+0x4e>
    2256:	1e c0       	rjmp	.+60     	; 0x2294 <DIO_void_setPort_direction+0x74>
    2258:	2b 81       	ldd	r18, Y+3	; 0x03
    225a:	3c 81       	ldd	r19, Y+4	; 0x04
    225c:	22 30       	cpi	r18, 0x02	; 2
    225e:	31 05       	cpc	r19, r1
    2260:	81 f0       	breq	.+32     	; 0x2282 <DIO_void_setPort_direction+0x62>
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	83 30       	cpi	r24, 0x03	; 3
    2268:	91 05       	cpc	r25, r1
    226a:	81 f0       	breq	.+32     	; 0x228c <DIO_void_setPort_direction+0x6c>
    226c:	13 c0       	rjmp	.+38     	; 0x2294 <DIO_void_setPort_direction+0x74>
	{
	case PORTA_ID:
		DDRA = direction;
    226e:	ea e3       	ldi	r30, 0x3A	; 58
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	80 83       	st	Z, r24
    2276:	0e c0       	rjmp	.+28     	; 0x2294 <DIO_void_setPort_direction+0x74>
		break;
	case PORTB_ID:
		DDRB = direction;
    2278:	e7 e3       	ldi	r30, 0x37	; 55
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	80 83       	st	Z, r24
    2280:	09 c0       	rjmp	.+18     	; 0x2294 <DIO_void_setPort_direction+0x74>
		break;
	case PORTC_ID:
		DDRC = direction;
    2282:	e4 e3       	ldi	r30, 0x34	; 52
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	80 83       	st	Z, r24
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <DIO_void_setPort_direction+0x74>
		break;
	case PORTD_ID:
		DDRD = direction;
    228c:	e1 e3       	ldi	r30, 0x31	; 49
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	80 83       	st	Z, r24
		break;
	}//end switch

}//end DIO_void_setPort_direction
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <DIO_void_setPort_value>:
void DIO_void_setPort_value(port_type port, u8 value)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <DIO_void_setPort_value+0x6>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <DIO_void_setPort_value+0x8>
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	3c 83       	std	Y+4, r19	; 0x04
    22ba:	2b 83       	std	Y+3, r18	; 0x03
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	81 30       	cpi	r24, 0x01	; 1
    22c2:	91 05       	cpc	r25, r1
    22c4:	d1 f0       	breq	.+52     	; 0x22fa <DIO_void_setPort_value+0x58>
    22c6:	2b 81       	ldd	r18, Y+3	; 0x03
    22c8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ca:	22 30       	cpi	r18, 0x02	; 2
    22cc:	31 05       	cpc	r19, r1
    22ce:	2c f4       	brge	.+10     	; 0x22da <DIO_void_setPort_value+0x38>
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	61 f0       	breq	.+24     	; 0x22f0 <DIO_void_setPort_value+0x4e>
    22d8:	1e c0       	rjmp	.+60     	; 0x2316 <DIO_void_setPort_value+0x74>
    22da:	2b 81       	ldd	r18, Y+3	; 0x03
    22dc:	3c 81       	ldd	r19, Y+4	; 0x04
    22de:	22 30       	cpi	r18, 0x02	; 2
    22e0:	31 05       	cpc	r19, r1
    22e2:	81 f0       	breq	.+32     	; 0x2304 <DIO_void_setPort_value+0x62>
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	83 30       	cpi	r24, 0x03	; 3
    22ea:	91 05       	cpc	r25, r1
    22ec:	81 f0       	breq	.+32     	; 0x230e <DIO_void_setPort_value+0x6c>
    22ee:	13 c0       	rjmp	.+38     	; 0x2316 <DIO_void_setPort_value+0x74>
	{
	case PORTA_ID:
		PORTA = value;
    22f0:	eb e3       	ldi	r30, 0x3B	; 59
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	80 83       	st	Z, r24
    22f8:	0e c0       	rjmp	.+28     	; 0x2316 <DIO_void_setPort_value+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    22fa:	e8 e3       	ldi	r30, 0x38	; 56
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	80 83       	st	Z, r24
    2302:	09 c0       	rjmp	.+18     	; 0x2316 <DIO_void_setPort_value+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    2304:	e5 e3       	ldi	r30, 0x35	; 53
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	80 83       	st	Z, r24
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <DIO_void_setPort_value+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    230e:	e2 e3       	ldi	r30, 0x32	; 50
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	80 83       	st	Z, r24
		break;
	}//end switch
}//end DIO_void_setPort_value
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <ADC_void_init>:
#include "ADC_interface.h"
#include "../DIO/MemMap.h"
#include "../../LIB/BIT_MATH.h"
#include "ADC_interface.h"
void ADC_void_init(prescaller_no prescaller,vreff_type vreff)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <ADC_void_init+0x6>
    232a:	00 d0       	rcall	.+0      	; 0x232c <ADC_void_init+0x8>
    232c:	00 d0       	rcall	.+0      	; 0x232e <ADC_void_init+0xa>
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	6a 83       	std	Y+2, r22	; 0x02
	//ADC ENABLE
	SETBIT(ADCSRA,ADEN);
    2336:	a6 e2       	ldi	r26, 0x26	; 38
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e6 e2       	ldi	r30, 0x26	; 38
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	80 68       	ori	r24, 0x80	; 128
    2342:	8c 93       	st	X, r24
	//ADC INTERRUPT ENABLE
	CLRBIT(ADCSRA,ADIE);
    2344:	a6 e2       	ldi	r26, 0x26	; 38
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e6 e2       	ldi	r30, 0x26	; 38
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	87 7f       	andi	r24, 0xF7	; 247
    2350:	8c 93       	st	X, r24
	//ADC
	CLRBIT(ADMUX,ADLAR);
    2352:	a7 e2       	ldi	r26, 0x27	; 39
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e7 e2       	ldi	r30, 0x27	; 39
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	8f 7d       	andi	r24, 0xDF	; 223
    235e:	8c 93       	st	X, r24
	////////////////////
	switch(prescaller)
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	3e 83       	std	Y+6, r19	; 0x06
    2368:	2d 83       	std	Y+5, r18	; 0x05
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	83 30       	cpi	r24, 0x03	; 3
    2370:	91 05       	cpc	r25, r1
    2372:	09 f4       	brne	.+2      	; 0x2376 <ADC_void_init+0x52>
    2374:	6a c0       	rjmp	.+212    	; 0x244a <ADC_void_init+0x126>
    2376:	2d 81       	ldd	r18, Y+5	; 0x05
    2378:	3e 81       	ldd	r19, Y+6	; 0x06
    237a:	24 30       	cpi	r18, 0x04	; 4
    237c:	31 05       	cpc	r19, r1
    237e:	84 f4       	brge	.+32     	; 0x23a0 <ADC_void_init+0x7c>
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	a1 f1       	breq	.+104    	; 0x23f2 <ADC_void_init+0xce>
    238a:	2d 81       	ldd	r18, Y+5	; 0x05
    238c:	3e 81       	ldd	r19, Y+6	; 0x06
    238e:	22 30       	cpi	r18, 0x02	; 2
    2390:	31 05       	cpc	r19, r1
    2392:	0c f0       	brlt	.+2      	; 0x2396 <ADC_void_init+0x72>
    2394:	44 c0       	rjmp	.+136    	; 0x241e <ADC_void_init+0xfa>
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	a1 f0       	breq	.+40     	; 0x23c6 <ADC_void_init+0xa2>
    239e:	ac c0       	rjmp	.+344    	; 0x24f8 <ADC_void_init+0x1d4>
    23a0:	2d 81       	ldd	r18, Y+5	; 0x05
    23a2:	3e 81       	ldd	r19, Y+6	; 0x06
    23a4:	25 30       	cpi	r18, 0x05	; 5
    23a6:	31 05       	cpc	r19, r1
    23a8:	09 f4       	brne	.+2      	; 0x23ac <ADC_void_init+0x88>
    23aa:	7b c0       	rjmp	.+246    	; 0x24a2 <ADC_void_init+0x17e>
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	85 30       	cpi	r24, 0x05	; 5
    23b2:	91 05       	cpc	r25, r1
    23b4:	0c f4       	brge	.+2      	; 0x23b8 <ADC_void_init+0x94>
    23b6:	5f c0       	rjmp	.+190    	; 0x2476 <ADC_void_init+0x152>
    23b8:	2d 81       	ldd	r18, Y+5	; 0x05
    23ba:	3e 81       	ldd	r19, Y+6	; 0x06
    23bc:	26 30       	cpi	r18, 0x06	; 6
    23be:	31 05       	cpc	r19, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <ADC_void_init+0xa0>
    23c2:	85 c0       	rjmp	.+266    	; 0x24ce <ADC_void_init+0x1aa>
    23c4:	99 c0       	rjmp	.+306    	; 0x24f8 <ADC_void_init+0x1d4>
	{
	case ADC_PRESCALLER_2:    SETBIT(ADCSRA,ADPS0);   CLRBIT(ADCSRA,ADPS1);CLRBIT(ADCSRA,ADPS2);break;
    23c6:	a6 e2       	ldi	r26, 0x26	; 38
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e6 e2       	ldi	r30, 0x26	; 38
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	81 60       	ori	r24, 0x01	; 1
    23d2:	8c 93       	st	X, r24
    23d4:	a6 e2       	ldi	r26, 0x26	; 38
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e6 e2       	ldi	r30, 0x26	; 38
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	8d 7f       	andi	r24, 0xFD	; 253
    23e0:	8c 93       	st	X, r24
    23e2:	a6 e2       	ldi	r26, 0x26	; 38
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e6 e2       	ldi	r30, 0x26	; 38
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	8b 7f       	andi	r24, 0xFB	; 251
    23ee:	8c 93       	st	X, r24
    23f0:	83 c0       	rjmp	.+262    	; 0x24f8 <ADC_void_init+0x1d4>
	case ADC_PRESCALLER_4:    CLRBIT(ADCSRA,ADPS0);  SETBIT(ADCSRA,ADPS1);CLRBIT(ADCSRA,ADPS2);break;
    23f2:	a6 e2       	ldi	r26, 0x26	; 38
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e6 e2       	ldi	r30, 0x26	; 38
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	8e 7f       	andi	r24, 0xFE	; 254
    23fe:	8c 93       	st	X, r24
    2400:	a6 e2       	ldi	r26, 0x26	; 38
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e6 e2       	ldi	r30, 0x26	; 38
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	82 60       	ori	r24, 0x02	; 2
    240c:	8c 93       	st	X, r24
    240e:	a6 e2       	ldi	r26, 0x26	; 38
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e6 e2       	ldi	r30, 0x26	; 38
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	8b 7f       	andi	r24, 0xFB	; 251
    241a:	8c 93       	st	X, r24
    241c:	6d c0       	rjmp	.+218    	; 0x24f8 <ADC_void_init+0x1d4>
	case ADC_PRESCALLER_8:    SETBIT(ADCSRA,ADPS0);   SETBIT(ADCSRA,ADPS1);CLRBIT(ADCSRA,ADPS2);break;
    241e:	a6 e2       	ldi	r26, 0x26	; 38
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e6 e2       	ldi	r30, 0x26	; 38
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	81 60       	ori	r24, 0x01	; 1
    242a:	8c 93       	st	X, r24
    242c:	a6 e2       	ldi	r26, 0x26	; 38
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e6 e2       	ldi	r30, 0x26	; 38
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	82 60       	ori	r24, 0x02	; 2
    2438:	8c 93       	st	X, r24
    243a:	a6 e2       	ldi	r26, 0x26	; 38
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e6 e2       	ldi	r30, 0x26	; 38
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	8b 7f       	andi	r24, 0xFB	; 251
    2446:	8c 93       	st	X, r24
    2448:	57 c0       	rjmp	.+174    	; 0x24f8 <ADC_void_init+0x1d4>
	case ADC_PRESCALLER_16:  CLRBIT(ADCSRA,ADPS0);  CLRBIT(ADCSRA,ADPS1);SETBIT(ADCSRA,ADPS2);break;
    244a:	a6 e2       	ldi	r26, 0x26	; 38
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e6 e2       	ldi	r30, 0x26	; 38
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	8e 7f       	andi	r24, 0xFE	; 254
    2456:	8c 93       	st	X, r24
    2458:	a6 e2       	ldi	r26, 0x26	; 38
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e6 e2       	ldi	r30, 0x26	; 38
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	8d 7f       	andi	r24, 0xFD	; 253
    2464:	8c 93       	st	X, r24
    2466:	a6 e2       	ldi	r26, 0x26	; 38
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e6 e2       	ldi	r30, 0x26	; 38
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	84 60       	ori	r24, 0x04	; 4
    2472:	8c 93       	st	X, r24
    2474:	41 c0       	rjmp	.+130    	; 0x24f8 <ADC_void_init+0x1d4>
	case ADC_PRESCALLER_32:  SETBIT(ADCSRA,ADPS0);   CLRBIT(ADCSRA,ADPS1);SETBIT(ADCSRA,ADPS2);break;
    2476:	a6 e2       	ldi	r26, 0x26	; 38
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e6 e2       	ldi	r30, 0x26	; 38
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	81 60       	ori	r24, 0x01	; 1
    2482:	8c 93       	st	X, r24
    2484:	a6 e2       	ldi	r26, 0x26	; 38
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e6 e2       	ldi	r30, 0x26	; 38
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	8d 7f       	andi	r24, 0xFD	; 253
    2490:	8c 93       	st	X, r24
    2492:	a6 e2       	ldi	r26, 0x26	; 38
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e6 e2       	ldi	r30, 0x26	; 38
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	84 60       	ori	r24, 0x04	; 4
    249e:	8c 93       	st	X, r24
    24a0:	2b c0       	rjmp	.+86     	; 0x24f8 <ADC_void_init+0x1d4>
	case ADC_PRESCALLER_64:  CLRBIT(ADCSRA,ADPS0);  SETBIT(ADCSRA,ADPS1);SETBIT(ADCSRA,ADPS2);break;
    24a2:	a6 e2       	ldi	r26, 0x26	; 38
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e6 e2       	ldi	r30, 0x26	; 38
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	8e 7f       	andi	r24, 0xFE	; 254
    24ae:	8c 93       	st	X, r24
    24b0:	a6 e2       	ldi	r26, 0x26	; 38
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e6 e2       	ldi	r30, 0x26	; 38
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	82 60       	ori	r24, 0x02	; 2
    24bc:	8c 93       	st	X, r24
    24be:	a6 e2       	ldi	r26, 0x26	; 38
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e6 e2       	ldi	r30, 0x26	; 38
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	84 60       	ori	r24, 0x04	; 4
    24ca:	8c 93       	st	X, r24
    24cc:	15 c0       	rjmp	.+42     	; 0x24f8 <ADC_void_init+0x1d4>
	case ADC_PRESCALLER_128:SETBIT(ADCSRA,ADPS0);   SETBIT(ADCSRA,ADPS1);SETBIT(ADCSRA,ADPS2);break;
    24ce:	a6 e2       	ldi	r26, 0x26	; 38
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e6 e2       	ldi	r30, 0x26	; 38
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	81 60       	ori	r24, 0x01	; 1
    24da:	8c 93       	st	X, r24
    24dc:	a6 e2       	ldi	r26, 0x26	; 38
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e6 e2       	ldi	r30, 0x26	; 38
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	82 60       	ori	r24, 0x02	; 2
    24e8:	8c 93       	st	X, r24
    24ea:	a6 e2       	ldi	r26, 0x26	; 38
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e6 e2       	ldi	r30, 0x26	; 38
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	84 60       	ori	r24, 0x04	; 4
    24f6:	8c 93       	st	X, r24
	}
	//ADC SELECT VREF
	switch(vreff)
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	28 2f       	mov	r18, r24
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	3c 83       	std	Y+4, r19	; 0x04
    2500:	2b 83       	std	Y+3, r18	; 0x03
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	9c 81       	ldd	r25, Y+4	; 0x04
    2506:	81 30       	cpi	r24, 0x01	; 1
    2508:	91 05       	cpc	r25, r1
    250a:	c1 f0       	breq	.+48     	; 0x253c <ADC_void_init+0x218>
    250c:	2b 81       	ldd	r18, Y+3	; 0x03
    250e:	3c 81       	ldd	r19, Y+4	; 0x04
    2510:	23 30       	cpi	r18, 0x03	; 3
    2512:	31 05       	cpc	r19, r1
    2514:	11 f1       	breq	.+68     	; 0x255a <ADC_void_init+0x236>
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	61 f5       	brne	.+88     	; 0x2576 <ADC_void_init+0x252>
	{
	case ADC_AREFF:      CLRBIT(ADMUX,REFS0);        CLRBIT(ADMUX,REFS1);break;
    251e:	a7 e2       	ldi	r26, 0x27	; 39
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e7 e2       	ldi	r30, 0x27	; 39
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8f 7b       	andi	r24, 0xBF	; 191
    252a:	8c 93       	st	X, r24
    252c:	a7 e2       	ldi	r26, 0x27	; 39
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e7 e2       	ldi	r30, 0x27	; 39
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	8f 77       	andi	r24, 0x7F	; 127
    2538:	8c 93       	st	X, r24
    253a:	1d c0       	rjmp	.+58     	; 0x2576 <ADC_void_init+0x252>
	case ADC_AVCC:       CLRBIT(ADMUX,REFS0);         SETBIT(ADMUX,REFS1);break;
    253c:	a7 e2       	ldi	r26, 0x27	; 39
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e7 e2       	ldi	r30, 0x27	; 39
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	8f 7b       	andi	r24, 0xBF	; 191
    2548:	8c 93       	st	X, r24
    254a:	a7 e2       	ldi	r26, 0x27	; 39
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e7 e2       	ldi	r30, 0x27	; 39
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	80 68       	ori	r24, 0x80	; 128
    2556:	8c 93       	st	X, r24
    2558:	0e c0       	rjmp	.+28     	; 0x2576 <ADC_void_init+0x252>
	case ADC_INTERNAL:SETBIT(ADMUX,REFS0);          SETBIT(ADMUX,REFS1);break;
    255a:	a7 e2       	ldi	r26, 0x27	; 39
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e7 e2       	ldi	r30, 0x27	; 39
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	80 64       	ori	r24, 0x40	; 64
    2566:	8c 93       	st	X, r24
    2568:	a7 e2       	ldi	r26, 0x27	; 39
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e7 e2       	ldi	r30, 0x27	; 39
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	80 68       	ori	r24, 0x80	; 128
    2574:	8c 93       	st	X, r24
	}
}
    2576:	26 96       	adiw	r28, 0x06	; 6
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <ADC_u16_read>:
u16  ADC_u16_read(u8 channel)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	0f 92       	push	r0
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &=0xE0;
    2594:	a7 e2       	ldi	r26, 0x27	; 39
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e7 e2       	ldi	r30, 0x27	; 39
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	80 7e       	andi	r24, 0xE0	; 224
    25a0:	8c 93       	st	X, r24
	channel &=0x07;
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	87 70       	andi	r24, 0x07	; 7
    25a6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX |= channel;
    25a8:	a7 e2       	ldi	r26, 0x27	; 39
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e7 e2       	ldi	r30, 0x27	; 39
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	90 81       	ld	r25, Z
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	89 2b       	or	r24, r25
    25b6:	8c 93       	st	X, r24

	//ADC start single conversion
	SETBIT(ADCSRA,ADSC);
    25b8:	a6 e2       	ldi	r26, 0x26	; 38
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e6 e2       	ldi	r30, 0x26	; 38
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	80 64       	ori	r24, 0x40	; 64
    25c4:	8c 93       	st	X, r24

	//ADC wait for conversion
	while(!(ADCSRA & (1<<ADIF)));
    25c6:	e6 e2       	ldi	r30, 0x26	; 38
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	88 2f       	mov	r24, r24
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	80 71       	andi	r24, 0x10	; 16
    25d2:	90 70       	andi	r25, 0x00	; 0
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	b9 f3       	breq	.-18     	; 0x25c6 <ADC_u16_read+0x3e>
	//ADC CLEAR FLAG
	SETBIT(ADCSRA,ADIF);
    25d8:	a6 e2       	ldi	r26, 0x26	; 38
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e6 e2       	ldi	r30, 0x26	; 38
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	80 61       	ori	r24, 0x10	; 16
    25e4:	8c 93       	st	X, r24

	return ADC;
    25e6:	e4 e2       	ldi	r30, 0x24	; 36
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
}
    25ee:	0f 90       	pop	r0
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <TEMP_u16_Read>:
#include "sensors.h"
#include "../../LIB/STD_TYPES.h"

u16 TEMP_u16_Read(void)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <TEMP_u16_Read+0x6>
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <TEMP_u16_Read+0x8>
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <TEMP_u16_Read+0xa>
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
	//ADC_void_init(ADC_PRESCALLER_64 ,ADC_AVCC);
	u16 adc_read = ADC_u16_read(ADC0);
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	0e 94 c4 12 	call	0x2588	; 0x2588 <ADC_u16_read>
    260a:	9e 83       	std	Y+6, r25	; 0x06
    260c:	8d 83       	std	Y+5, r24	; 0x05

	u16 volt = ((unsigned long)5000 * adc_read)/1024;
    260e:	8d 81       	ldd	r24, Y+5	; 0x05
    2610:	9e 81       	ldd	r25, Y+6	; 0x06
    2612:	cc 01       	movw	r24, r24
    2614:	a0 e0       	ldi	r26, 0x00	; 0
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	28 e8       	ldi	r18, 0x88	; 136
    261a:	33 e1       	ldi	r19, 0x13	; 19
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__mulsi3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	07 2e       	mov	r0, r23
    262e:	7a e0       	ldi	r23, 0x0A	; 10
    2630:	b6 95       	lsr	r27
    2632:	a7 95       	ror	r26
    2634:	97 95       	ror	r25
    2636:	87 95       	ror	r24
    2638:	7a 95       	dec	r23
    263a:	d1 f7       	brne	.-12     	; 0x2630 <TEMP_u16_Read+0x3a>
    263c:	70 2d       	mov	r23, r0
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	8b 83       	std	Y+3, r24	; 0x03
	u16 temp =  volt /10;
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	2a e0       	ldi	r18, 0x0A	; 10
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	b9 01       	movw	r22, r18
    264c:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodhi4>
    2650:	cb 01       	movw	r24, r22
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01

	return temp;
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
}
    265a:	26 96       	adiw	r28, 0x06	; 6
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <ULTRASONIC_voidInit>:

static volatile u16 pulse = 0;
static volatile u8 i = 0;

void ULTRASONIC_voidInit(void)
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    /* set direction of trriger and echo */
    DIO_void_setPin_direction(TRRIGER_PORT, TRRIGER_PIN, TRRIGER_DDR);
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	64 e0       	ldi	r22, 0x04	; 4
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_void_setPin_direction>
    DIO_void_setPin_direction(ECHO_PORT, ECHO_PIN, ECHO_DDR);
    267e:	83 e0       	ldi	r24, 0x03	; 3
    2680:	62 e0       	ldi	r22, 0x02	; 2
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_void_setPin_direction>
    // /* set value to echo */
    // DIO_void_setPin_value(ECHO_PORT, ECHO_PIN, ECHO_DDR);
    EXTI_void_int(INT0);
    2688:	86 e0       	ldi	r24, 0x06	; 6
    268a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <EXTI_void_int>
    EXTI_void_changeMod(EXT_CHANGE_MODE, INT0);
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	66 e0       	ldi	r22, 0x06	; 6
    2692:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <EXTI_void_changeMod>
    TCCR1A = 0;
    2696:	ef e4       	ldi	r30, 0x4F	; 79
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	10 82       	st	Z, r1
}
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <ULTRASONIC_voidRead>:


void ULTRASONIC_voidRead(void)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	68 97       	sbiw	r28, 0x18	; 24
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    /* enable trriger for 10 us to send brust single, then disable */
    DIO_void_setPin_value(TRRIGER_PORT, TRRIGER_PIN, HIGH);
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	64 e0       	ldi	r22, 0x04	; 4
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <DIO_void_setPin_value>
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a0 e7       	ldi	r26, 0x70	; 112
    26c6:	b1 e4       	ldi	r27, 0x41	; 65
    26c8:	8d 8b       	std	Y+21, r24	; 0x15
    26ca:	9e 8b       	std	Y+22, r25	; 0x16
    26cc:	af 8b       	std	Y+23, r26	; 0x17
    26ce:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26d0:	6d 89       	ldd	r22, Y+21	; 0x15
    26d2:	7e 89       	ldd	r23, Y+22	; 0x16
    26d4:	8f 89       	ldd	r24, Y+23	; 0x17
    26d6:	98 8d       	ldd	r25, Y+24	; 0x18
    26d8:	2b ea       	ldi	r18, 0xAB	; 171
    26da:	3a ea       	ldi	r19, 0xAA	; 170
    26dc:	4a e2       	ldi	r20, 0x2A	; 42
    26de:	50 e4       	ldi	r21, 0x40	; 64
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	89 8b       	std	Y+17, r24	; 0x11
    26ea:	9a 8b       	std	Y+18, r25	; 0x12
    26ec:	ab 8b       	std	Y+19, r26	; 0x13
    26ee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    26f0:	69 89       	ldd	r22, Y+17	; 0x11
    26f2:	7a 89       	ldd	r23, Y+18	; 0x12
    26f4:	8b 89       	ldd	r24, Y+19	; 0x13
    26f6:	9c 89       	ldd	r25, Y+20	; 0x14
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e8       	ldi	r20, 0x80	; 128
    26fe:	5f e3       	ldi	r21, 0x3F	; 63
    2700:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2704:	88 23       	and	r24, r24
    2706:	1c f4       	brge	.+6      	; 0x270e <ULTRASONIC_voidRead+0x6c>
		__ticks = 1;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	88 8b       	std	Y+16, r24	; 0x10
    270c:	91 c0       	rjmp	.+290    	; 0x2830 <ULTRASONIC_voidRead+0x18e>
	else if (__tmp > 255)
    270e:	69 89       	ldd	r22, Y+17	; 0x11
    2710:	7a 89       	ldd	r23, Y+18	; 0x12
    2712:	8b 89       	ldd	r24, Y+19	; 0x13
    2714:	9c 89       	ldd	r25, Y+20	; 0x14
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	4f e7       	ldi	r20, 0x7F	; 127
    271c:	53 e4       	ldi	r21, 0x43	; 67
    271e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2722:	18 16       	cp	r1, r24
    2724:	0c f0       	brlt	.+2      	; 0x2728 <ULTRASONIC_voidRead+0x86>
    2726:	7b c0       	rjmp	.+246    	; 0x281e <ULTRASONIC_voidRead+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2728:	6d 89       	ldd	r22, Y+21	; 0x15
    272a:	7e 89       	ldd	r23, Y+22	; 0x16
    272c:	8f 89       	ldd	r24, Y+23	; 0x17
    272e:	98 8d       	ldd	r25, Y+24	; 0x18
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a e7       	ldi	r20, 0x7A	; 122
    2736:	54 e4       	ldi	r21, 0x44	; 68
    2738:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	8c 87       	std	Y+12, r24	; 0x0c
    2742:	9d 87       	std	Y+13, r25	; 0x0d
    2744:	ae 87       	std	Y+14, r26	; 0x0e
    2746:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2748:	6c 85       	ldd	r22, Y+12	; 0x0c
    274a:	7d 85       	ldd	r23, Y+13	; 0x0d
    274c:	8e 85       	ldd	r24, Y+14	; 0x0e
    274e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	4a ef       	ldi	r20, 0xFA	; 250
    2756:	54 e4       	ldi	r21, 0x44	; 68
    2758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	88 87       	std	Y+8, r24	; 0x08
    2762:	99 87       	std	Y+9, r25	; 0x09
    2764:	aa 87       	std	Y+10, r26	; 0x0a
    2766:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2768:	68 85       	ldd	r22, Y+8	; 0x08
    276a:	79 85       	ldd	r23, Y+9	; 0x09
    276c:	8a 85       	ldd	r24, Y+10	; 0x0a
    276e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e8       	ldi	r20, 0x80	; 128
    2776:	5f e3       	ldi	r21, 0x3F	; 63
    2778:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    277c:	88 23       	and	r24, r24
    277e:	2c f4       	brge	.+10     	; 0x278a <ULTRASONIC_voidRead+0xe8>
		__ticks = 1;
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	9f 83       	std	Y+7, r25	; 0x07
    2786:	8e 83       	std	Y+6, r24	; 0x06
    2788:	3f c0       	rjmp	.+126    	; 0x2808 <ULTRASONIC_voidRead+0x166>
	else if (__tmp > 65535)
    278a:	68 85       	ldd	r22, Y+8	; 0x08
    278c:	79 85       	ldd	r23, Y+9	; 0x09
    278e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2790:	9b 85       	ldd	r25, Y+11	; 0x0b
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	3f ef       	ldi	r19, 0xFF	; 255
    2796:	4f e7       	ldi	r20, 0x7F	; 127
    2798:	57 e4       	ldi	r21, 0x47	; 71
    279a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    279e:	18 16       	cp	r1, r24
    27a0:	4c f5       	brge	.+82     	; 0x27f4 <ULTRASONIC_voidRead+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    27a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    27a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e2       	ldi	r20, 0x20	; 32
    27b0:	51 e4       	ldi	r21, 0x41	; 65
    27b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	9f 83       	std	Y+7, r25	; 0x07
    27c8:	8e 83       	std	Y+6, r24	; 0x06
    27ca:	0f c0       	rjmp	.+30     	; 0x27ea <ULTRASONIC_voidRead+0x148>
    27cc:	88 ec       	ldi	r24, 0xC8	; 200
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	9d 83       	std	Y+5, r25	; 0x05
    27d2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27d4:	8c 81       	ldd	r24, Y+4	; 0x04
    27d6:	9d 81       	ldd	r25, Y+5	; 0x05
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <ULTRASONIC_voidRead+0x136>
    27dc:	9d 83       	std	Y+5, r25	; 0x05
    27de:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e0:	8e 81       	ldd	r24, Y+6	; 0x06
    27e2:	9f 81       	ldd	r25, Y+7	; 0x07
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	9f 83       	std	Y+7, r25	; 0x07
    27e8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ea:	8e 81       	ldd	r24, Y+6	; 0x06
    27ec:	9f 81       	ldd	r25, Y+7	; 0x07
    27ee:	00 97       	sbiw	r24, 0x00	; 0
    27f0:	69 f7       	brne	.-38     	; 0x27cc <ULTRASONIC_voidRead+0x12a>
    27f2:	24 c0       	rjmp	.+72     	; 0x283c <ULTRASONIC_voidRead+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f4:	68 85       	ldd	r22, Y+8	; 0x08
    27f6:	79 85       	ldd	r23, Y+9	; 0x09
    27f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    27fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	9f 83       	std	Y+7, r25	; 0x07
    2806:	8e 83       	std	Y+6, r24	; 0x06
    2808:	8e 81       	ldd	r24, Y+6	; 0x06
    280a:	9f 81       	ldd	r25, Y+7	; 0x07
    280c:	9b 83       	std	Y+3, r25	; 0x03
    280e:	8a 83       	std	Y+2, r24	; 0x02
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	9b 81       	ldd	r25, Y+3	; 0x03
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <ULTRASONIC_voidRead+0x172>
    2818:	9b 83       	std	Y+3, r25	; 0x03
    281a:	8a 83       	std	Y+2, r24	; 0x02
    281c:	0f c0       	rjmp	.+30     	; 0x283c <ULTRASONIC_voidRead+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    281e:	69 89       	ldd	r22, Y+17	; 0x11
    2820:	7a 89       	ldd	r23, Y+18	; 0x12
    2822:	8b 89       	ldd	r24, Y+19	; 0x13
    2824:	9c 89       	ldd	r25, Y+20	; 0x14
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	88 8b       	std	Y+16, r24	; 0x10
    2830:	88 89       	ldd	r24, Y+16	; 0x10
    2832:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	8a 95       	dec	r24
    2838:	f1 f7       	brne	.-4      	; 0x2836 <ULTRASONIC_voidRead+0x194>
    283a:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);
    DIO_void_setPin_value(TRRIGER_PORT, TRRIGER_PIN, LOW);
    283c:	83 e0       	ldi	r24, 0x03	; 3
    283e:	64 e0       	ldi	r22, 0x04	; 4
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <DIO_void_setPin_value>
}
    2846:	68 96       	adiw	r28, 0x18	; 24
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <__vector_1>:

ISR(INT0_vect)
{
    2858:	1f 92       	push	r1
    285a:	0f 92       	push	r0
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	0f 92       	push	r0
    2860:	11 24       	eor	r1, r1
    2862:	2f 93       	push	r18
    2864:	3f 93       	push	r19
    2866:	4f 93       	push	r20
    2868:	5f 93       	push	r21
    286a:	6f 93       	push	r22
    286c:	7f 93       	push	r23
    286e:	8f 93       	push	r24
    2870:	9f 93       	push	r25
    2872:	af 93       	push	r26
    2874:	bf 93       	push	r27
    2876:	ef 93       	push	r30
    2878:	ff 93       	push	r31
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    if (i==1)
    2882:	80 91 7c 01 	lds	r24, 0x017C
    2886:	81 30       	cpi	r24, 0x01	; 1
    2888:	61 f4       	brne	.+24     	; 0x28a2 <__vector_1+0x4a>
    {
    	//stop timer
    	TIMER1_void_TimerStop();
    288a:	0e 94 a1 08 	call	0x1142	; 0x1142 <TIMER1_void_TimerStop>
    	pulse = TIMER1_u16CurrentTimerValue();
    288e:	0e 94 0e 09 	call	0x121c	; 0x121c <TIMER1_u16CurrentTimerValue>
    2892:	90 93 7b 01 	sts	0x017B, r25
    2896:	80 93 7a 01 	sts	0x017A, r24
    	TIMER1_voidCLRCounter();
    289a:	0e 94 19 09 	call	0x1232	; 0x1232 <TIMER1_voidCLRCounter>
        i=0;
    289e:	10 92 7c 01 	sts	0x017C, r1
    }
    if (i==0)
    28a2:	80 91 7c 01 	lds	r24, 0x017C
    28a6:	88 23       	and	r24, r24
    28a8:	31 f4       	brne	.+12     	; 0x28b6 <__vector_1+0x5e>
    {
    	//no prescaller
    	TIMER1_void_TimerStart(NO_Prescaller);
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	0e 94 af 08 	call	0x115e	; 0x115e <TIMER1_void_TimerStart>
        i=1;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 7c 01 	sts	0x017C, r24
    }
}
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	ff 91       	pop	r31
    28bc:	ef 91       	pop	r30
    28be:	bf 91       	pop	r27
    28c0:	af 91       	pop	r26
    28c2:	9f 91       	pop	r25
    28c4:	8f 91       	pop	r24
    28c6:	7f 91       	pop	r23
    28c8:	6f 91       	pop	r22
    28ca:	5f 91       	pop	r21
    28cc:	4f 91       	pop	r20
    28ce:	3f 91       	pop	r19
    28d0:	2f 91       	pop	r18
    28d2:	0f 90       	pop	r0
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	0f 90       	pop	r0
    28d8:	1f 90       	pop	r1
    28da:	18 95       	reti

000028dc <getdistance>:
u16 getdistance(void)
{
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
	//LCD_void_print_signed_integer(1);
	return pulse/464;
    28e4:	80 91 7a 01 	lds	r24, 0x017A
    28e8:	90 91 7b 01 	lds	r25, 0x017B
    28ec:	20 ed       	ldi	r18, 0xD0	; 208
    28ee:	31 e0       	ldi	r19, 0x01	; 1
    28f0:	b9 01       	movw	r22, r18
    28f2:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodhi4>
    28f6:	cb 01       	movw	r24, r22
}
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <KeyPad_void_intialize>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "util/delay.h"


void KeyPad_void_intialize(void)
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
/*	//keypad connected to portD
	//rows connected to pins 0/1/2/3
	//columns connected to pins 4/5/6/78/*/
}
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <KeyPad_4x4_adjustKeyNumber>:

static u8 KeyPad_4x4_adjustKeyNumber(u8 button_number)
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <KeyPad_4x4_adjustKeyNumber+0x6>
    2912:	00 d0       	rcall	.+0      	; 0x2914 <KeyPad_4x4_adjustKeyNumber+0x8>
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	3c 83       	std	Y+4, r19	; 0x04
    2922:	2b 83       	std	Y+3, r18	; 0x03
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	88 30       	cpi	r24, 0x08	; 8
    292a:	91 05       	cpc	r25, r1
    292c:	09 f4       	brne	.+2      	; 0x2930 <KeyPad_4x4_adjustKeyNumber+0x24>
    292e:	70 c0       	rjmp	.+224    	; 0x2a10 <KeyPad_4x4_adjustKeyNumber+0x104>
    2930:	2b 81       	ldd	r18, Y+3	; 0x03
    2932:	3c 81       	ldd	r19, Y+4	; 0x04
    2934:	29 30       	cpi	r18, 0x09	; 9
    2936:	31 05       	cpc	r19, r1
    2938:	5c f5       	brge	.+86     	; 0x2990 <KeyPad_4x4_adjustKeyNumber+0x84>
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	9c 81       	ldd	r25, Y+4	; 0x04
    293e:	84 30       	cpi	r24, 0x04	; 4
    2940:	91 05       	cpc	r25, r1
    2942:	09 f4       	brne	.+2      	; 0x2946 <KeyPad_4x4_adjustKeyNumber+0x3a>
    2944:	59 c0       	rjmp	.+178    	; 0x29f8 <KeyPad_4x4_adjustKeyNumber+0xec>
    2946:	2b 81       	ldd	r18, Y+3	; 0x03
    2948:	3c 81       	ldd	r19, Y+4	; 0x04
    294a:	25 30       	cpi	r18, 0x05	; 5
    294c:	31 05       	cpc	r19, r1
    294e:	9c f4       	brge	.+38     	; 0x2976 <KeyPad_4x4_adjustKeyNumber+0x6a>
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	9c 81       	ldd	r25, Y+4	; 0x04
    2954:	82 30       	cpi	r24, 0x02	; 2
    2956:	91 05       	cpc	r25, r1
    2958:	09 f4       	brne	.+2      	; 0x295c <KeyPad_4x4_adjustKeyNumber+0x50>
    295a:	48 c0       	rjmp	.+144    	; 0x29ec <KeyPad_4x4_adjustKeyNumber+0xe0>
    295c:	2b 81       	ldd	r18, Y+3	; 0x03
    295e:	3c 81       	ldd	r19, Y+4	; 0x04
    2960:	23 30       	cpi	r18, 0x03	; 3
    2962:	31 05       	cpc	r19, r1
    2964:	0c f0       	brlt	.+2      	; 0x2968 <KeyPad_4x4_adjustKeyNumber+0x5c>
    2966:	45 c0       	rjmp	.+138    	; 0x29f2 <KeyPad_4x4_adjustKeyNumber+0xe6>
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	9c 81       	ldd	r25, Y+4	; 0x04
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	91 05       	cpc	r25, r1
    2970:	09 f4       	brne	.+2      	; 0x2974 <KeyPad_4x4_adjustKeyNumber+0x68>
    2972:	39 c0       	rjmp	.+114    	; 0x29e6 <KeyPad_4x4_adjustKeyNumber+0xda>
    2974:	67 c0       	rjmp	.+206    	; 0x2a44 <KeyPad_4x4_adjustKeyNumber+0x138>
    2976:	2b 81       	ldd	r18, Y+3	; 0x03
    2978:	3c 81       	ldd	r19, Y+4	; 0x04
    297a:	26 30       	cpi	r18, 0x06	; 6
    297c:	31 05       	cpc	r19, r1
    297e:	09 f4       	brne	.+2      	; 0x2982 <KeyPad_4x4_adjustKeyNumber+0x76>
    2980:	41 c0       	rjmp	.+130    	; 0x2a04 <KeyPad_4x4_adjustKeyNumber+0xf8>
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	9c 81       	ldd	r25, Y+4	; 0x04
    2986:	87 30       	cpi	r24, 0x07	; 7
    2988:	91 05       	cpc	r25, r1
    298a:	0c f0       	brlt	.+2      	; 0x298e <KeyPad_4x4_adjustKeyNumber+0x82>
    298c:	3e c0       	rjmp	.+124    	; 0x2a0a <KeyPad_4x4_adjustKeyNumber+0xfe>
    298e:	37 c0       	rjmp	.+110    	; 0x29fe <KeyPad_4x4_adjustKeyNumber+0xf2>
    2990:	2b 81       	ldd	r18, Y+3	; 0x03
    2992:	3c 81       	ldd	r19, Y+4	; 0x04
    2994:	2c 30       	cpi	r18, 0x0C	; 12
    2996:	31 05       	cpc	r19, r1
    2998:	09 f4       	brne	.+2      	; 0x299c <KeyPad_4x4_adjustKeyNumber+0x90>
    299a:	46 c0       	rjmp	.+140    	; 0x2a28 <KeyPad_4x4_adjustKeyNumber+0x11c>
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	9c 81       	ldd	r25, Y+4	; 0x04
    29a0:	8d 30       	cpi	r24, 0x0D	; 13
    29a2:	91 05       	cpc	r25, r1
    29a4:	5c f4       	brge	.+22     	; 0x29bc <KeyPad_4x4_adjustKeyNumber+0xb0>
    29a6:	2b 81       	ldd	r18, Y+3	; 0x03
    29a8:	3c 81       	ldd	r19, Y+4	; 0x04
    29aa:	2a 30       	cpi	r18, 0x0A	; 10
    29ac:	31 05       	cpc	r19, r1
    29ae:	b1 f1       	breq	.+108    	; 0x2a1c <KeyPad_4x4_adjustKeyNumber+0x110>
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	8b 30       	cpi	r24, 0x0B	; 11
    29b6:	91 05       	cpc	r25, r1
    29b8:	a4 f5       	brge	.+104    	; 0x2a22 <KeyPad_4x4_adjustKeyNumber+0x116>
    29ba:	2d c0       	rjmp	.+90     	; 0x2a16 <KeyPad_4x4_adjustKeyNumber+0x10a>
    29bc:	2b 81       	ldd	r18, Y+3	; 0x03
    29be:	3c 81       	ldd	r19, Y+4	; 0x04
    29c0:	2e 30       	cpi	r18, 0x0E	; 14
    29c2:	31 05       	cpc	r19, r1
    29c4:	b9 f1       	breq	.+110    	; 0x2a34 <KeyPad_4x4_adjustKeyNumber+0x128>
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ca:	8e 30       	cpi	r24, 0x0E	; 14
    29cc:	91 05       	cpc	r25, r1
    29ce:	7c f1       	brlt	.+94     	; 0x2a2e <KeyPad_4x4_adjustKeyNumber+0x122>
    29d0:	2b 81       	ldd	r18, Y+3	; 0x03
    29d2:	3c 81       	ldd	r19, Y+4	; 0x04
    29d4:	2f 30       	cpi	r18, 0x0F	; 15
    29d6:	31 05       	cpc	r19, r1
    29d8:	79 f1       	breq	.+94     	; 0x2a38 <KeyPad_4x4_adjustKeyNumber+0x12c>
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	80 31       	cpi	r24, 0x10	; 16
    29e0:	91 05       	cpc	r25, r1
    29e2:	69 f1       	breq	.+90     	; 0x2a3e <KeyPad_4x4_adjustKeyNumber+0x132>
    29e4:	2f c0       	rjmp	.+94     	; 0x2a44 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
    29e6:	97 e0       	ldi	r25, 0x07	; 7
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	2e c0       	rjmp	.+92     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
    29ec:	28 e0       	ldi	r18, 0x08	; 8
    29ee:	2a 83       	std	Y+2, r18	; 0x02
    29f0:	2b c0       	rjmp	.+86     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
    29f2:	39 e0       	ldi	r19, 0x09	; 9
    29f4:	3a 83       	std	Y+2, r19	; 0x02
    29f6:	28 c0       	rjmp	.+80     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    29f8:	85 e2       	ldi	r24, 0x25	; 37
    29fa:	8a 83       	std	Y+2, r24	; 0x02
    29fc:	25 c0       	rjmp	.+74     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
    29fe:	94 e0       	ldi	r25, 0x04	; 4
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	22 c0       	rjmp	.+68     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    2a04:	25 e0       	ldi	r18, 0x05	; 5
    2a06:	2a 83       	std	Y+2, r18	; 0x02
    2a08:	1f c0       	rjmp	.+62     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
    2a0a:	36 e0       	ldi	r19, 0x06	; 6
    2a0c:	3a 83       	std	Y+2, r19	; 0x02
    2a0e:	1c c0       	rjmp	.+56     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    2a10:	8a e2       	ldi	r24, 0x2A	; 42
    2a12:	8a 83       	std	Y+2, r24	; 0x02
    2a14:	19 c0       	rjmp	.+50     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
    2a16:	91 e0       	ldi	r25, 0x01	; 1
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	16 c0       	rjmp	.+44     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
    2a1c:	22 e0       	ldi	r18, 0x02	; 2
    2a1e:	2a 83       	std	Y+2, r18	; 0x02
    2a20:	13 c0       	rjmp	.+38     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
    2a22:	33 e0       	ldi	r19, 0x03	; 3
    2a24:	3a 83       	std	Y+2, r19	; 0x02
    2a26:	10 c0       	rjmp	.+32     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    2a28:	8d e2       	ldi	r24, 0x2D	; 45
    2a2a:	8a 83       	std	Y+2, r24	; 0x02
    2a2c:	0d c0       	rjmp	.+26     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return ' ';  /* ASCII of Space */
    2a2e:	90 e2       	ldi	r25, 0x20	; 32
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	0a c0       	rjmp	.+20     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
    2a34:	1a 82       	std	Y+2, r1	; 0x02
    2a36:	08 c0       	rjmp	.+16     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    2a38:	2d e3       	ldi	r18, 0x3D	; 61
    2a3a:	2a 83       	std	Y+2, r18	; 0x02
    2a3c:	05 c0       	rjmp	.+10     	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    2a3e:	3b e2       	ldi	r19, 0x2B	; 43
    2a40:	3a 83       	std	Y+2, r19	; 0x02
    2a42:	02 c0       	rjmp	.+4      	; 0x2a48 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	8a 83       	std	Y+2, r24	; 0x02
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <KeyPad_getPressedKey>:
u8 KeyPad_getPressedKey(void)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <KeyPad_getPressedKey+0x6>
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
		u8 col,row;
		while(1)
		{
		for(col=0;col<N_col;col++) /* loop for columns */
    2a62:	1a 82       	std	Y+2, r1	; 0x02
    2a64:	42 c0       	rjmp	.+132    	; 0x2aea <KeyPad_getPressedKey+0x92>
		/*
		 * each time only one of the column pins will be output and
		 * the rest will be input pins include the row pins DDRD= (0b00010000<<col);
		 */

		DIO_void_setPort_direction(KEYPAD_PORT, (0b00010000<<col));
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	80 e1       	ldi	r24, 0x10	; 16
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <KeyPad_getPressedKey+0x1e>
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	2a 95       	dec	r18
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <KeyPad_getPressedKey+0x1a>
    2a7a:	98 2f       	mov	r25, r24
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	69 2f       	mov	r22, r25
    2a80:	0e 94 10 11 	call	0x2220	; 0x2220 <DIO_void_setPort_direction>

		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins PORTD = (~(0b00010000<<col));
		 */
		DIO_void_setPort_value(KEYPAD_PORT, (~(0b00010000<<col)));
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	80 e1       	ldi	r24, 0x10	; 16
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <KeyPad_getPressedKey+0x3c>
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	2a 95       	dec	r18
    2a96:	e2 f7       	brpl	.-8      	; 0x2a90 <KeyPad_getPressedKey+0x38>
    2a98:	98 2f       	mov	r25, r24
    2a9a:	90 95       	com	r25
    2a9c:	82 e0       	ldi	r24, 0x02	; 2
    2a9e:	69 2f       	mov	r22, r25
    2aa0:	0e 94 51 11 	call	0x22a2	; 0x22a2 <DIO_void_setPort_value>

			for(row=0;row<N_row;row++) /* loop for rows */
    2aa4:	19 82       	std	Y+1, r1	; 0x01
    2aa6:	1b c0       	rjmp	.+54     	; 0x2ade <KeyPad_getPressedKey+0x86>
				{
				if (DIO_value_type_getPin_value(KEYPAD_PORT, row) == LOW) /* if the switch is press in this row */
    2aa8:	82 e0       	ldi	r24, 0x02	; 2
    2aaa:	69 81       	ldd	r22, Y+1	; 0x01
    2aac:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_value_type_getPin_value>
    2ab0:	88 23       	and	r24, r24
    2ab2:	91 f4       	brne	.+36     	; 0x2ad8 <KeyPad_getPressedKey+0x80>
				{return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);}//end if
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	88 2f       	mov	r24, r24
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	98 2f       	mov	r25, r24
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	89 0f       	add	r24, r25
    2ac8:	8f 5f       	subi	r24, 0xFF	; 255
    2aca:	0e 94 86 14 	call	0x290c	; 0x290c <KeyPad_4x4_adjustKeyNumber>
				}//end for loop (rows)
			}//end for columns loop
		}//end while(1)
	}//end function
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins PORTD = (~(0b00010000<<col));
		 */
		DIO_void_setPort_value(KEYPAD_PORT, (~(0b00010000<<col)));

			for(row=0;row<N_row;row++) /* loop for rows */
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	8f 5f       	subi	r24, 0xFF	; 255
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	84 30       	cpi	r24, 0x04	; 4
    2ae2:	10 f3       	brcs	.-60     	; 0x2aa8 <KeyPad_getPressedKey+0x50>
u8 KeyPad_getPressedKey(void)
{
		u8 col,row;
		while(1)
		{
		for(col=0;col<N_col;col++) /* loop for columns */
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	8f 5f       	subi	r24, 0xFF	; 255
    2ae8:	8a 83       	std	Y+2, r24	; 0x02
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	84 30       	cpi	r24, 0x04	; 4
    2aee:	08 f4       	brcc	.+2      	; 0x2af2 <KeyPad_getPressedKey+0x9a>
    2af0:	ba cf       	rjmp	.-140    	; 0x2a66 <KeyPad_getPressedKey+0xe>
    2af2:	b7 cf       	rjmp	.-146    	; 0x2a62 <KeyPad_getPressedKey+0xa>

00002af4 <main>:
#include "../MCAL/SPI/SPI.h"
#include "../HAL/Ultrasonic/Ultrasonic_int.h"


int main(void)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	67 97       	sbiw	r28, 0x17	; 23
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
	u8 Buffer1[2];


	///////////////////////////
	/* set direction of temperature sensor */
	DIO_void_setPin_direction(PORTA_ID,PIN0,INPUT);
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTD_ID,PIN1,OUTPUT);
    2b12:	83 e0       	ldi	r24, 0x03	; 3
    2b14:	61 e0       	ldi	r22, 0x01	; 1
    2b16:	41 e0       	ldi	r20, 0x01	; 1
    2b18:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_void_setPin_direction>

	/* initialize ADC   */
	ADC_void_init(ADC_PRESCALLER_64,ADC_AREFF);
    2b1c:	85 e0       	ldi	r24, 0x05	; 5
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	0e 94 92 11 	call	0x2324	; 0x2324 <ADC_void_init>
	UART_void_initialize();
    2b24:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_void_initialize>

	KeyPad_void_intialize();
    2b28:	0e 94 7f 14 	call	0x28fe	; 0x28fe <KeyPad_void_intialize>

	ULTRASONIC_voidInit();
    2b2c:	0e 94 36 13 	call	0x266c	; 0x266c <ULTRASONIC_voidInit>


	/* Read password form user then send to MCU2 to check  */
	do
	{
		key_num = KeyPad_getPressedKey();
    2b30:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <KeyPad_getPressedKey>
    2b34:	8f 87       	std	Y+15, r24	; 0x0f
		if((key_num >= 0) && (key_num <= 9))
    2b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b38:	8a 30       	cpi	r24, 0x0A	; 10
    2b3a:	20 f4       	brcc	.+8      	; 0x2b44 <main+0x50>
			 {
				 UART_void_send_data(key_num+'0');
    2b3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b3e:	80 5d       	subi	r24, 0xD0	; 208
    2b40:	0e 94 11 08 	call	0x1022	; 0x1022 <UART_void_send_data>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a6 e9       	ldi	r26, 0x96	; 150
    2b4a:	b3 e4       	ldi	r27, 0x43	; 67
    2b4c:	8b 87       	std	Y+11, r24	; 0x0b
    2b4e:	9c 87       	std	Y+12, r25	; 0x0c
    2b50:	ad 87       	std	Y+13, r26	; 0x0d
    2b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a ef       	ldi	r20, 0xFA	; 250
    2b62:	54 e4       	ldi	r21, 0x44	; 68
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	8f 83       	std	Y+7, r24	; 0x07
    2b6e:	98 87       	std	Y+8, r25	; 0x08
    2b70:	a9 87       	std	Y+9, r26	; 0x09
    2b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b74:	6f 81       	ldd	r22, Y+7	; 0x07
    2b76:	78 85       	ldd	r23, Y+8	; 0x08
    2b78:	89 85       	ldd	r24, Y+9	; 0x09
    2b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <main+0xa2>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	3f c0       	rjmp	.+126    	; 0x2c14 <main+0x120>
	else if (__tmp > 65535)
    2b96:	6f 81       	ldd	r22, Y+7	; 0x07
    2b98:	78 85       	ldd	r23, Y+8	; 0x08
    2b9a:	89 85       	ldd	r24, Y+9	; 0x09
    2b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	4c f5       	brge	.+82     	; 0x2c00 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <main+0x102>
    2bd8:	88 ec       	ldi	r24, 0xC8	; 200
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	9c 83       	std	Y+4, r25	; 0x04
    2bde:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	9c 81       	ldd	r25, Y+4	; 0x04
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <main+0xf0>
    2be8:	9c 83       	std	Y+4, r25	; 0x04
    2bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	9e 83       	std	Y+6, r25	; 0x06
    2bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <main+0xe4>
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	6f 81       	ldd	r22, Y+7	; 0x07
    2c02:	78 85       	ldd	r23, Y+8	; 0x08
    2c04:	89 85       	ldd	r24, Y+9	; 0x09
    2c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9e 83       	std	Y+6, r25	; 0x06
    2c12:	8d 83       	std	Y+5, r24	; 0x05
    2c14:	8d 81       	ldd	r24, Y+5	; 0x05
    2c16:	9e 81       	ldd	r25, Y+6	; 0x06
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <main+0x12c>
    2c24:	9a 83       	std	Y+2, r25	; 0x02
    2c26:	89 83       	std	Y+1, r24	; 0x01
			 }
			/* new pressed every 300ms */
			 _delay_ms(300);
	}while(key_num!='=');
    2c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2a:	8d 33       	cpi	r24, 0x3D	; 61
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <main+0x13c>
    2c2e:	80 cf       	rjmp	.-256    	; 0x2b30 <main+0x3c>


	while(1)
	{
		/* send temperature to MCU2 */
		 UART_void_send_data('T');
    2c30:	84 e5       	ldi	r24, 0x54	; 84
    2c32:	0e 94 11 08 	call	0x1022	; 0x1022 <UART_void_send_data>
		 /* store temperature degree in TempData */
		 Temp_data=TEMP_u16_Read();
    2c36:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <TEMP_u16_Read>
    2c3a:	99 8b       	std	Y+17, r25	; 0x11
    2c3c:	88 8b       	std	Y+16, r24	; 0x10
		 itoa(Temp_data,Buffer,10);
    2c3e:	88 89       	ldd	r24, Y+16	; 0x10
    2c40:	99 89       	ldd	r25, Y+17	; 0x11
    2c42:	9e 01       	movw	r18, r28
    2c44:	2c 5e       	subi	r18, 0xEC	; 236
    2c46:	3f 4f       	sbci	r19, 0xFF	; 255
    2c48:	b9 01       	movw	r22, r18
    2c4a:	4a e0       	ldi	r20, 0x0A	; 10
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <itoa>
		 SER_UART_void_send_string(Buffer);
    2c52:	ce 01       	movw	r24, r28
    2c54:	44 96       	adiw	r24, 0x14	; 20
    2c56:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UART_void_send_string>
    2c5a:	ea cf       	rjmp	.-44     	; 0x2c30 <main+0x13c>

00002c5c <__mulsi3>:
    2c5c:	62 9f       	mul	r22, r18
    2c5e:	d0 01       	movw	r26, r0
    2c60:	73 9f       	mul	r23, r19
    2c62:	f0 01       	movw	r30, r0
    2c64:	82 9f       	mul	r24, r18
    2c66:	e0 0d       	add	r30, r0
    2c68:	f1 1d       	adc	r31, r1
    2c6a:	64 9f       	mul	r22, r20
    2c6c:	e0 0d       	add	r30, r0
    2c6e:	f1 1d       	adc	r31, r1
    2c70:	92 9f       	mul	r25, r18
    2c72:	f0 0d       	add	r31, r0
    2c74:	83 9f       	mul	r24, r19
    2c76:	f0 0d       	add	r31, r0
    2c78:	74 9f       	mul	r23, r20
    2c7a:	f0 0d       	add	r31, r0
    2c7c:	65 9f       	mul	r22, r21
    2c7e:	f0 0d       	add	r31, r0
    2c80:	99 27       	eor	r25, r25
    2c82:	72 9f       	mul	r23, r18
    2c84:	b0 0d       	add	r27, r0
    2c86:	e1 1d       	adc	r30, r1
    2c88:	f9 1f       	adc	r31, r25
    2c8a:	63 9f       	mul	r22, r19
    2c8c:	b0 0d       	add	r27, r0
    2c8e:	e1 1d       	adc	r30, r1
    2c90:	f9 1f       	adc	r31, r25
    2c92:	bd 01       	movw	r22, r26
    2c94:	cf 01       	movw	r24, r30
    2c96:	11 24       	eor	r1, r1
    2c98:	08 95       	ret

00002c9a <__udivmodhi4>:
    2c9a:	aa 1b       	sub	r26, r26
    2c9c:	bb 1b       	sub	r27, r27
    2c9e:	51 e1       	ldi	r21, 0x11	; 17
    2ca0:	07 c0       	rjmp	.+14     	; 0x2cb0 <__udivmodhi4_ep>

00002ca2 <__udivmodhi4_loop>:
    2ca2:	aa 1f       	adc	r26, r26
    2ca4:	bb 1f       	adc	r27, r27
    2ca6:	a6 17       	cp	r26, r22
    2ca8:	b7 07       	cpc	r27, r23
    2caa:	10 f0       	brcs	.+4      	; 0x2cb0 <__udivmodhi4_ep>
    2cac:	a6 1b       	sub	r26, r22
    2cae:	b7 0b       	sbc	r27, r23

00002cb0 <__udivmodhi4_ep>:
    2cb0:	88 1f       	adc	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	5a 95       	dec	r21
    2cb6:	a9 f7       	brne	.-22     	; 0x2ca2 <__udivmodhi4_loop>
    2cb8:	80 95       	com	r24
    2cba:	90 95       	com	r25
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	08 95       	ret

00002cc2 <__divmodhi4>:
    2cc2:	97 fb       	bst	r25, 7
    2cc4:	09 2e       	mov	r0, r25
    2cc6:	07 26       	eor	r0, r23
    2cc8:	0a d0       	rcall	.+20     	; 0x2cde <__divmodhi4_neg1>
    2cca:	77 fd       	sbrc	r23, 7
    2ccc:	04 d0       	rcall	.+8      	; 0x2cd6 <__divmodhi4_neg2>
    2cce:	e5 df       	rcall	.-54     	; 0x2c9a <__udivmodhi4>
    2cd0:	06 d0       	rcall	.+12     	; 0x2cde <__divmodhi4_neg1>
    2cd2:	00 20       	and	r0, r0
    2cd4:	1a f4       	brpl	.+6      	; 0x2cdc <__divmodhi4_exit>

00002cd6 <__divmodhi4_neg2>:
    2cd6:	70 95       	com	r23
    2cd8:	61 95       	neg	r22
    2cda:	7f 4f       	sbci	r23, 0xFF	; 255

00002cdc <__divmodhi4_exit>:
    2cdc:	08 95       	ret

00002cde <__divmodhi4_neg1>:
    2cde:	f6 f7       	brtc	.-4      	; 0x2cdc <__divmodhi4_exit>
    2ce0:	90 95       	com	r25
    2ce2:	81 95       	neg	r24
    2ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce6:	08 95       	ret

00002ce8 <__udivmodsi4>:
    2ce8:	a1 e2       	ldi	r26, 0x21	; 33
    2cea:	1a 2e       	mov	r1, r26
    2cec:	aa 1b       	sub	r26, r26
    2cee:	bb 1b       	sub	r27, r27
    2cf0:	fd 01       	movw	r30, r26
    2cf2:	0d c0       	rjmp	.+26     	; 0x2d0e <__udivmodsi4_ep>

00002cf4 <__udivmodsi4_loop>:
    2cf4:	aa 1f       	adc	r26, r26
    2cf6:	bb 1f       	adc	r27, r27
    2cf8:	ee 1f       	adc	r30, r30
    2cfa:	ff 1f       	adc	r31, r31
    2cfc:	a2 17       	cp	r26, r18
    2cfe:	b3 07       	cpc	r27, r19
    2d00:	e4 07       	cpc	r30, r20
    2d02:	f5 07       	cpc	r31, r21
    2d04:	20 f0       	brcs	.+8      	; 0x2d0e <__udivmodsi4_ep>
    2d06:	a2 1b       	sub	r26, r18
    2d08:	b3 0b       	sbc	r27, r19
    2d0a:	e4 0b       	sbc	r30, r20
    2d0c:	f5 0b       	sbc	r31, r21

00002d0e <__udivmodsi4_ep>:
    2d0e:	66 1f       	adc	r22, r22
    2d10:	77 1f       	adc	r23, r23
    2d12:	88 1f       	adc	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	1a 94       	dec	r1
    2d18:	69 f7       	brne	.-38     	; 0x2cf4 <__udivmodsi4_loop>
    2d1a:	60 95       	com	r22
    2d1c:	70 95       	com	r23
    2d1e:	80 95       	com	r24
    2d20:	90 95       	com	r25
    2d22:	9b 01       	movw	r18, r22
    2d24:	ac 01       	movw	r20, r24
    2d26:	bd 01       	movw	r22, r26
    2d28:	cf 01       	movw	r24, r30
    2d2a:	08 95       	ret

00002d2c <__prologue_saves__>:
    2d2c:	2f 92       	push	r2
    2d2e:	3f 92       	push	r3
    2d30:	4f 92       	push	r4
    2d32:	5f 92       	push	r5
    2d34:	6f 92       	push	r6
    2d36:	7f 92       	push	r7
    2d38:	8f 92       	push	r8
    2d3a:	9f 92       	push	r9
    2d3c:	af 92       	push	r10
    2d3e:	bf 92       	push	r11
    2d40:	cf 92       	push	r12
    2d42:	df 92       	push	r13
    2d44:	ef 92       	push	r14
    2d46:	ff 92       	push	r15
    2d48:	0f 93       	push	r16
    2d4a:	1f 93       	push	r17
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	ca 1b       	sub	r28, r26
    2d56:	db 0b       	sbc	r29, r27
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	09 94       	ijmp

00002d64 <__epilogue_restores__>:
    2d64:	2a 88       	ldd	r2, Y+18	; 0x12
    2d66:	39 88       	ldd	r3, Y+17	; 0x11
    2d68:	48 88       	ldd	r4, Y+16	; 0x10
    2d6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d70:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d72:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d74:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d76:	b9 84       	ldd	r11, Y+9	; 0x09
    2d78:	c8 84       	ldd	r12, Y+8	; 0x08
    2d7a:	df 80       	ldd	r13, Y+7	; 0x07
    2d7c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d7e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d80:	0c 81       	ldd	r16, Y+4	; 0x04
    2d82:	1b 81       	ldd	r17, Y+3	; 0x03
    2d84:	aa 81       	ldd	r26, Y+2	; 0x02
    2d86:	b9 81       	ldd	r27, Y+1	; 0x01
    2d88:	ce 0f       	add	r28, r30
    2d8a:	d1 1d       	adc	r29, r1
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	ed 01       	movw	r28, r26
    2d98:	08 95       	ret

00002d9a <itoa>:
    2d9a:	fb 01       	movw	r30, r22
    2d9c:	9f 01       	movw	r18, r30
    2d9e:	e8 94       	clt
    2da0:	42 30       	cpi	r20, 0x02	; 2
    2da2:	c4 f0       	brlt	.+48     	; 0x2dd4 <itoa+0x3a>
    2da4:	45 32       	cpi	r20, 0x25	; 37
    2da6:	b4 f4       	brge	.+44     	; 0x2dd4 <itoa+0x3a>
    2da8:	4a 30       	cpi	r20, 0x0A	; 10
    2daa:	29 f4       	brne	.+10     	; 0x2db6 <itoa+0x1c>
    2dac:	97 fb       	bst	r25, 7
    2dae:	1e f4       	brtc	.+6      	; 0x2db6 <itoa+0x1c>
    2db0:	90 95       	com	r25
    2db2:	81 95       	neg	r24
    2db4:	9f 4f       	sbci	r25, 0xFF	; 255
    2db6:	64 2f       	mov	r22, r20
    2db8:	77 27       	eor	r23, r23
    2dba:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodhi4>
    2dbe:	80 5d       	subi	r24, 0xD0	; 208
    2dc0:	8a 33       	cpi	r24, 0x3A	; 58
    2dc2:	0c f0       	brlt	.+2      	; 0x2dc6 <itoa+0x2c>
    2dc4:	89 5d       	subi	r24, 0xD9	; 217
    2dc6:	81 93       	st	Z+, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	a1 f7       	brne	.-24     	; 0x2db6 <itoa+0x1c>
    2dce:	16 f4       	brtc	.+4      	; 0x2dd4 <itoa+0x3a>
    2dd0:	5d e2       	ldi	r21, 0x2D	; 45
    2dd2:	51 93       	st	Z+, r21
    2dd4:	10 82       	st	Z, r1
    2dd6:	c9 01       	movw	r24, r18
    2dd8:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <strrev>

00002ddc <strrev>:
    2ddc:	dc 01       	movw	r26, r24
    2dde:	fc 01       	movw	r30, r24
    2de0:	67 2f       	mov	r22, r23
    2de2:	71 91       	ld	r23, Z+
    2de4:	77 23       	and	r23, r23
    2de6:	e1 f7       	brne	.-8      	; 0x2de0 <strrev+0x4>
    2de8:	32 97       	sbiw	r30, 0x02	; 2
    2dea:	04 c0       	rjmp	.+8      	; 0x2df4 <strrev+0x18>
    2dec:	7c 91       	ld	r23, X
    2dee:	6d 93       	st	X+, r22
    2df0:	70 83       	st	Z, r23
    2df2:	62 91       	ld	r22, -Z
    2df4:	ae 17       	cp	r26, r30
    2df6:	bf 07       	cpc	r27, r31
    2df8:	c8 f3       	brcs	.-14     	; 0x2dec <strrev+0x10>
    2dfa:	08 95       	ret

00002dfc <_exit>:
    2dfc:	f8 94       	cli

00002dfe <__stop_program>:
    2dfe:	ff cf       	rjmp	.-2      	; 0x2dfe <__stop_program>
