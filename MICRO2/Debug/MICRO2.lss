
MICRO2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00003e6a  00003efe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800196  00800196  00004034  2**0
                  ALLOC
  3 .stab         00003ff0  00000000  00000000  00004034  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002738  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a75c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000aaee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000cef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e27f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f458  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f90e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001027c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <main>
      8a:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 1e 	jmp	0x3dac	; 0x3dac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e8       	ldi	r26, 0x8D	; 141
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 1e 	jmp	0x3dac	; 0x3dac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e8       	ldi	r24, 0x8D	; 141
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e8       	ldi	r22, 0x8D	; 141
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 56       	subi	r30, 0x6B	; 107
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <SER_UART_void_send_string>:
#include "../MCAL/UART/UART_interface.h"
#include "../SERV_UART/SERV_UART.h"
#include "../MCAL/DIO/Memmap.h"
#include "../LIB/BIT_Math.h"
void SER_UART_void_send_string(u8* s)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <SER_UART_void_send_string+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0;
     e3e:	19 82       	std	Y+1, r1	; 0x01
     e40:	0e c0       	rjmp	.+28     	; 0xe5e <SER_UART_void_send_string+0x30>
	while (s[count]!='\0')
	{
		UART_void_send_data(s[count]);
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	9b 81       	ldd	r25, Y+3	; 0x03
     e4c:	fc 01       	movw	r30, r24
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	80 81       	ld	r24, Z
     e54:	0e 94 11 08 	call	0x1022	; 0x1022 <UART_void_send_data>
		count++;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	89 83       	std	Y+1, r24	; 0x01
#include "../MCAL/DIO/Memmap.h"
#include "../LIB/BIT_Math.h"
void SER_UART_void_send_string(u8* s)
{
	u8 count=0;
	while (s[count]!='\0')
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	fc 01       	movw	r30, r24
     e6a:	e2 0f       	add	r30, r18
     e6c:	f3 1f       	adc	r31, r19
     e6e:	80 81       	ld	r24, Z
     e70:	88 23       	and	r24, r24
     e72:	39 f7       	brne	.-50     	; 0xe42 <SER_UART_void_send_string+0x14>
	{
		UART_void_send_data(s[count]);
		count++;
	}
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <SER_UART_void_receive_string>:
void SER_UART_void_receive_string(u8* s)
{
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <SER_UART_void_receive_string+0xa>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9b 83       	std	Y+3, r25	; 0x03
     e92:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0;
     e94:	19 82       	std	Y+1, r1	; 0x01
	s[count]=UART_void_recieve_data();
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	8c 01       	movw	r16, r24
     ea2:	02 0f       	add	r16, r18
     ea4:	13 1f       	adc	r17, r19
     ea6:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_void_recieve_data>
     eaa:	f8 01       	movw	r30, r16
     eac:	80 83       	st	Z, r24
     eae:	0f c0       	rjmp	.+30     	; 0xece <SER_UART_void_receive_string+0x4e>
	while(s[count]!='$')
	{
		count++;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	89 83       	std	Y+1, r24	; 0x01
		s[count]=UART_void_recieve_data();
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	8c 01       	movw	r16, r24
     ec2:	02 0f       	add	r16, r18
     ec4:	13 1f       	adc	r17, r19
     ec6:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_void_recieve_data>
     eca:	f8 01       	movw	r30, r16
     ecc:	80 83       	st	Z, r24
}
void SER_UART_void_receive_string(u8* s)
{
	u8 count=0;
	s[count]=UART_void_recieve_data();
	while(s[count]!='$')
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	9b 81       	ldd	r25, Y+3	; 0x03
     ed8:	fc 01       	movw	r30, r24
     eda:	e2 0f       	add	r30, r18
     edc:	f3 1f       	adc	r31, r19
     ede:	80 81       	ld	r24, Z
     ee0:	84 32       	cpi	r24, 0x24	; 36
     ee2:	31 f7       	brne	.-52     	; 0xeb0 <SER_UART_void_receive_string+0x30>
	{
		count++;
		s[count]=UART_void_recieve_data();
	}
	s[count]='\0';
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	fc 01       	movw	r30, r24
     ef0:	e2 0f       	add	r30, r18
     ef2:	f3 1f       	adc	r31, r19
     ef4:	10 82       	st	Z, r1
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <SER_UART_void_receive_string_NOBLOCKING>:
void SER_UART_void_receive_string_NOBLOCKING(u8* s)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <SER_UART_void_receive_string_NOBLOCKING+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <SER_UART_void_receive_string_NOBLOCKING+0x8>
     f0e:	0f 92       	push	r0
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	9d 83       	std	Y+5, r25	; 0x05
     f16:	8c 83       	std	Y+4, r24	; 0x04
	       u8 statue,data,count=0;
     f18:	19 82       	std	Y+1, r1	; 0x01
	do{
		    statue=UART_u8RecieveDataNoBLOCKING(& data);
     f1a:	ce 01       	movw	r24, r28
     f1c:	03 96       	adiw	r24, 0x03	; 3
     f1e:	0e 94 3a 08 	call	0x1074	; 0x1074 <UART_u8RecieveDataNoBLOCKING>
     f22:	8a 83       	std	Y+2, r24	; 0x02
		    if (statue)
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	88 23       	and	r24, r24
     f28:	d9 f0       	breq	.+54     	; 0xf60 <SER_UART_void_receive_string_NOBLOCKING+0x5a>
				{
					s[count]=data;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	fc 01       	movw	r30, r24
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	80 83       	st	Z, r24
					count++;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	8f 5f       	subi	r24, 0xFF	; 255
     f42:	89 83       	std	Y+1, r24	; 0x01
				}
		    else
				{
					break;
				}
	     }while(s[count-1]!='$');
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9c 01       	movw	r18, r24
     f4c:	21 50       	subi	r18, 0x01	; 1
     f4e:	30 40       	sbci	r19, 0x00	; 0
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	fc 01       	movw	r30, r24
     f56:	e2 0f       	add	r30, r18
     f58:	f3 1f       	adc	r31, r19
     f5a:	80 81       	ld	r24, Z
     f5c:	84 32       	cpi	r24, 0x24	; 36
     f5e:	e9 f6       	brne	.-70     	; 0xf1a <SER_UART_void_receive_string_NOBLOCKING+0x14>
	s[count-1]='\0';
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9c 01       	movw	r18, r24
     f68:	21 50       	subi	r18, 0x01	; 1
     f6a:	30 40       	sbci	r19, 0x00	; 0
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	fc 01       	movw	r30, r24
     f72:	e2 0f       	add	r30, r18
     f74:	f3 1f       	adc	r31, r19
     f76:	10 82       	st	Z, r1
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <UART_void_initialize>:
#include "ADC_Interface.h"
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_type.h"
*/
void UART_void_initialize(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	SETBIT(UCSRB,RXEN);
     f90:	aa e2       	ldi	r26, 0x2A	; 42
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ea e2       	ldi	r30, 0x2A	; 42
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	8c 93       	st	X, r24
	SETBIT(UCSRB,TXEN);
     f9e:	aa e2       	ldi	r26, 0x2A	; 42
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ea e2       	ldi	r30, 0x2A	; 42
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	88 60       	ori	r24, 0x08	; 8
     faa:	8c 93       	st	X, r24
	CLRBIT(UCSRC, UMSEL);
     fac:	a0 e4       	ldi	r26, 0x40	; 64
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e0 e4       	ldi	r30, 0x40	; 64
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7b       	andi	r24, 0xBF	; 191
     fb8:	8c 93       	st	X, r24
	CLRBIT(UCSRC, UPM0);
     fba:	a0 e4       	ldi	r26, 0x40	; 64
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e0 e4       	ldi	r30, 0x40	; 64
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7e       	andi	r24, 0xEF	; 239
     fc6:	8c 93       	st	X, r24
	CLRBIT(UCSRC, UPM1);
     fc8:	a0 e4       	ldi	r26, 0x40	; 64
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e0 e4       	ldi	r30, 0x40	; 64
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8f 7d       	andi	r24, 0xDF	; 223
     fd4:	8c 93       	st	X, r24
	CLRBIT(UCSRC, USBS);
     fd6:	a0 e4       	ldi	r26, 0x40	; 64
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e0 e4       	ldi	r30, 0x40	; 64
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	87 7f       	andi	r24, 0xF7	; 247
     fe2:	8c 93       	st	X, r24
	SETBIT(UCSRC, UCSZ0);
     fe4:	a0 e4       	ldi	r26, 0x40	; 64
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e0 e4       	ldi	r30, 0x40	; 64
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	8c 93       	st	X, r24
	SETBIT(UCSRC, UCSZ1);
     ff2:	a0 e4       	ldi	r26, 0x40	; 64
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e0 e4       	ldi	r30, 0x40	; 64
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	84 60       	ori	r24, 0x04	; 4
     ffe:	8c 93       	st	X, r24
	CLRBIT(UCSRB, UCSZ2);
    1000:	aa e2       	ldi	r26, 0x2A	; 42
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ea e2       	ldi	r30, 0x2A	; 42
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	8c 93       	st	X, r24

	//BAUD RATE
	UBRRH=0;
    100e:	e0 e4       	ldi	r30, 0x40	; 64
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	10 82       	st	Z, r1
	UBRRL=207;
    1014:	e9 e2       	ldi	r30, 0x29	; 41
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	8f ec       	ldi	r24, 0xCF	; 207
    101a:	80 83       	st	Z, r24

}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <UART_void_send_data>:


void UART_void_send_data(u8 data)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01
	while (!(GETBIT(UCSRA,UDRE)));
    102e:	eb e2       	ldi	r30, 0x2B	; 43
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	82 95       	swap	r24
    1036:	86 95       	lsr	r24
    1038:	87 70       	andi	r24, 0x07	; 7
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	90 70       	andi	r25, 0x00	; 0
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	a1 f3       	breq	.-24     	; 0x102e <UART_void_send_data+0xc>
	UDR=data;
    1046:	ec e2       	ldi	r30, 0x2C	; 44
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	80 83       	st	Z, r24
}
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <UART_void_recieve_data>:

u8 UART_void_recieve_data(void)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
	while(!(GETBIT(UCSRA,RXC)));
    105e:	eb e2       	ldi	r30, 0x2B	; 43
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	dc f7       	brge	.-10     	; 0x105e <UART_void_recieve_data+0x8>
	return UDR;
    1068:	ec e2       	ldi	r30, 0x2C	; 44
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <UART_u8RecieveDataNoBLOCKING>:
u8 UART_u8RecieveDataNoBLOCKING(u8* ptr_data)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <UART_u8RecieveDataNoBLOCKING+0x6>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
    u8 status = 0;
    1084:	19 82       	std	Y+1, r1	; 0x01
    if (GETBIT(UCSRA, RXC))
    1086:	eb e2       	ldi	r30, 0x2B	; 43
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 23       	and	r24, r24
    108e:	44 f4       	brge	.+16     	; 0x10a0 <UART_u8RecieveDataNoBLOCKING+0x2c>
    {
        *ptr_data =UDR;
    1090:	ec e2       	ldi	r30, 0x2C	; 44
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	ea 81       	ldd	r30, Y+2	; 0x02
    1098:	fb 81       	ldd	r31, Y+3	; 0x03
    109a:	80 83       	st	Z, r24
        status =1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        //
    }
    return status;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <TIMER0_void_Intialize>:

static u32 OverflowNumber =0;
static u8 Preload =0;

void TIMER0_void_Intialize(timerMode_type mode , prescaller_type prescaller , timerOC0_type OC0_type )
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <TIMER0_void_Intialize+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <TIMER0_void_Intialize+0x8>
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
    10c0:	4b 83       	std	Y+3, r20	; 0x03
	// step one :mode selction
	switch(mode)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	3d 83       	std	Y+5, r19	; 0x05
    10ca:	2c 83       	std	Y+4, r18	; 0x04
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	21 f1       	breq	.+72     	; 0x111e <TIMER0_void_Intialize+0x70>
    10d6:	2c 81       	ldd	r18, Y+4	; 0x04
    10d8:	3d 81       	ldd	r19, Y+5	; 0x05
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	2c f4       	brge	.+10     	; 0x10ea <TIMER0_void_Intialize+0x3c>
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	61 f0       	breq	.+24     	; 0x1100 <TIMER0_void_Intialize+0x52>
    10e8:	46 c0       	rjmp	.+140    	; 0x1176 <TIMER0_void_Intialize+0xc8>
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	21 f1       	breq	.+72     	; 0x113c <TIMER0_void_Intialize+0x8e>
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	91 05       	cpc	r25, r1
    10fc:	71 f1       	breq	.+92     	; 0x115a <TIMER0_void_Intialize+0xac>
    10fe:	3b c0       	rjmp	.+118    	; 0x1176 <TIMER0_void_Intialize+0xc8>
	{
	case TIMER0_NORMAL_MODE:
		CLRBIT(TCCR0,WGM00);
    1100:	a3 e5       	ldi	r26, 0x53	; 83
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e3 e5       	ldi	r30, 0x53	; 83
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8f 7b       	andi	r24, 0xBF	; 191
    110c:	8c 93       	st	X, r24
		CLRBIT(TCCR0,WGM01);
    110e:	a3 e5       	ldi	r26, 0x53	; 83
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e3 e5       	ldi	r30, 0x53	; 83
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	87 7f       	andi	r24, 0xF7	; 247
    111a:	8c 93       	st	X, r24
    111c:	2c c0       	rjmp	.+88     	; 0x1176 <TIMER0_void_Intialize+0xc8>
	break;
	case TIMER0_CTC_MODE:
		CLRBIT(TCCR0,WGM00);
    111e:	a3 e5       	ldi	r26, 0x53	; 83
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e3 e5       	ldi	r30, 0x53	; 83
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8f 7b       	andi	r24, 0xBF	; 191
    112a:	8c 93       	st	X, r24
		SETBIT(TCCR0,WGM01);
    112c:	a3 e5       	ldi	r26, 0x53	; 83
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e3 e5       	ldi	r30, 0x53	; 83
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	88 60       	ori	r24, 0x08	; 8
    1138:	8c 93       	st	X, r24
    113a:	1d c0       	rjmp	.+58     	; 0x1176 <TIMER0_void_Intialize+0xc8>
	break;
	case TIMER0_FASTPWM_MODE:
		SETBIT(TCCR0,WGM00);
    113c:	a3 e5       	ldi	r26, 0x53	; 83
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e3 e5       	ldi	r30, 0x53	; 83
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	80 64       	ori	r24, 0x40	; 64
    1148:	8c 93       	st	X, r24
		SETBIT(TCCR0,WGM01);
    114a:	a3 e5       	ldi	r26, 0x53	; 83
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e3 e5       	ldi	r30, 0x53	; 83
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	88 60       	ori	r24, 0x08	; 8
    1156:	8c 93       	st	X, r24
    1158:	0e c0       	rjmp	.+28     	; 0x1176 <TIMER0_void_Intialize+0xc8>
	break;
	case TIMER0_PHASECORRECT_MODE:
		SETBIT(TCCR0,WGM00);
    115a:	a3 e5       	ldi	r26, 0x53	; 83
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e3 e5       	ldi	r30, 0x53	; 83
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	80 64       	ori	r24, 0x40	; 64
    1166:	8c 93       	st	X, r24
		CLRBIT(TCCR0,WGM01);
    1168:	a3 e5       	ldi	r26, 0x53	; 83
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e3 e5       	ldi	r30, 0x53	; 83
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	87 7f       	andi	r24, 0xF7	; 247
    1174:	8c 93       	st	X, r24
	break;
	}

	// step 2 :Prescaller selction
	TCCR0 &= 0xf8;
    1176:	a3 e5       	ldi	r26, 0x53	; 83
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e3 e5       	ldi	r30, 0x53	; 83
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	88 7f       	andi	r24, 0xF8	; 248
    1182:	8c 93       	st	X, r24
	TCCR0 |= prescaller;
    1184:	a3 e5       	ldi	r26, 0x53	; 83
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e3 e5       	ldi	r30, 0x53	; 83
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	90 81       	ld	r25, Z
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	89 2b       	or	r24, r25
    1192:	8c 93       	st	X, r24

	// step 3 :OC0Pin mode selction
	TCCR0 &= 0b11001111;
    1194:	a3 e5       	ldi	r26, 0x53	; 83
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e3 e5       	ldi	r30, 0x53	; 83
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7c       	andi	r24, 0xCF	; 207
    11a0:	8c 93       	st	X, r24
	TCCR0 |=(OC0_type<<4);
    11a2:	a3 e5       	ldi	r26, 0x53	; 83
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e3 e5       	ldi	r30, 0x53	; 83
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	28 2f       	mov	r18, r24
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	82 95       	swap	r24
    11b6:	92 95       	swap	r25
    11b8:	90 7f       	andi	r25, 0xF0	; 240
    11ba:	98 27       	eor	r25, r24
    11bc:	80 7f       	andi	r24, 0xF0	; 240
    11be:	98 27       	eor	r25, r24
    11c0:	82 2b       	or	r24, r18
    11c2:	8c 93       	st	X, r24


}//end TIMER0_void_Intialize
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <TIMER0_void_TimerStop>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_TimerStop(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xf8;//0b1111 1100
    11dc:	a3 e5       	ldi	r26, 0x53	; 83
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e3 e5       	ldi	r30, 0x53	; 83
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	88 7f       	andi	r24, 0xF8	; 248
    11e8:	8c 93       	st	X, r24
}//end TIMER0_void_TimerStop
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <TIMER0_void_TimerStart>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_TimerStart(prescaller_type prescaller)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= 0xf8;
    11fc:	a3 e5       	ldi	r26, 0x53	; 83
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e3 e5       	ldi	r30, 0x53	; 83
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	88 7f       	andi	r24, 0xF8	; 248
    1208:	8c 93       	st	X, r24
	TCCR0 |= prescaller;
    120a:	a3 e5       	ldi	r26, 0x53	; 83
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e3 e5       	ldi	r30, 0x53	; 83
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	90 81       	ld	r25, Z
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	89 2b       	or	r24, r25
    1218:	8c 93       	st	X, r24
}//end TIMER0_void_TimerStart
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <TIMER0_void_EnableOVInt>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_EnableOVInt(void)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG, SREG_I);
    122a:	af e5       	ldi	r26, 0x5F	; 95
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ef e5       	ldi	r30, 0x5F	; 95
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	80 68       	ori	r24, 0x80	; 128
    1236:	8c 93       	st	X, r24
	SETBIT(TIMSK, TOIE0);
    1238:	a9 e5       	ldi	r26, 0x59	; 89
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e9 e5       	ldi	r30, 0x59	; 89
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	8c 93       	st	X, r24

}//end TIMER0_void_EnableOVInt
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <TIMER0_void_DisableOVInt>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_DisableOVInt(void)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK,TOIE0);
    1254:	a9 e5       	ldi	r26, 0x59	; 89
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e9 e5       	ldi	r30, 0x59	; 89
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	8e 7f       	andi	r24, 0xFE	; 254
    1260:	8c 93       	st	X, r24

}//end TIMER0_void_DisableOVInt
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <TIMER0_void_SetOVCALLBack>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_SetOVCALLBack(void(*copy_ptr)(void))
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <TIMER0_void_SetOVCALLBack+0x6>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
	OVCallBackptr = copy_ptr  ;
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	90 93 9c 01 	sts	0x019C, r25
    127e:	80 93 9b 01 	sts	0x019B, r24

}//end TIMER0_void_SetOVCALLBack
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <TIMER0_void_EnableCTCInt>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_EnableCTCInt(void)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG,7);
    1294:	af e5       	ldi	r26, 0x5F	; 95
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ef e5       	ldi	r30, 0x5F	; 95
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	80 68       	ori	r24, 0x80	; 128
    12a0:	8c 93       	st	X, r24
	SETBIT(TIMSK,OCIE0);
    12a2:	a9 e5       	ldi	r26, 0x59	; 89
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e9 e5       	ldi	r30, 0x59	; 89
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	82 60       	ori	r24, 0x02	; 2
    12ae:	8c 93       	st	X, r24

}//end TIMER0_void_EnableCTCInt
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <TIMER0_void_DisableCTCInt>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_DisableCTCInt(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK,OCIE0);
    12be:	a9 e5       	ldi	r26, 0x59	; 89
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e9 e5       	ldi	r30, 0x59	; 89
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8d 7f       	andi	r24, 0xFD	; 253
    12ca:	8c 93       	st	X, r24

}//end TIMER0_void_DisableCTCInt
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <TIMER0_void_SetCTCCALLBack>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_SetCTCCALLBack(void(*copy_ptr)(void))
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <TIMER0_void_SetCTCCALLBack+0x6>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
	CTCCallBackptr = copy_ptr  ;
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	90 93 9e 01 	sts	0x019E, r25
    12e8:	80 93 9d 01 	sts	0x019D, r24

}//end TIMER0_void_SetCTCCALLBack
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <TIMER0_void_SetCompareValue>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_SetCompareValue(u8 Copy_CompValue)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	0f 92       	push	r0
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_CompValue;
    1302:	ec e5       	ldi	r30, 0x5C	; 92
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	80 83       	st	Z, r24

}//end TIMER0_void_SetCompareValue
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <TIMER0_void_SetDesiredTime_MicroSec>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_SetDesiredTime_MicroSec(u32 copy_time,prescaller_type Copy_prescaller)// as delay Fun.
{
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	6d 97       	sbiw	r28, 0x1d	; 29
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	6f 8b       	std	Y+23, r22	; 0x17
    1330:	78 8f       	std	Y+24, r23	; 0x18
    1332:	89 8f       	std	Y+25, r24	; 0x19
    1334:	9a 8f       	std	Y+26, r25	; 0x1a
    1336:	4b 8f       	std	Y+27, r20	; 0x1b
	u16 prescaller;
	switch(Copy_prescaller)
    1338:	8b 8d       	ldd	r24, Y+27	; 0x1b
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	3d 8f       	std	Y+29, r19	; 0x1d
    1340:	2c 8f       	std	Y+28, r18	; 0x1c
    1342:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1344:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1346:	83 30       	cpi	r24, 0x03	; 3
    1348:	91 05       	cpc	r25, r1
    134a:	29 f1       	breq	.+74     	; 0x1396 <TIMER0_void_SetDesiredTime_MicroSec+0x84>
    134c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    134e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1350:	24 30       	cpi	r18, 0x04	; 4
    1352:	31 05       	cpc	r19, r1
    1354:	5c f4       	brge	.+22     	; 0x136c <TIMER0_void_SetDesiredTime_MicroSec+0x5a>
    1356:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1358:	9d 8d       	ldd	r25, Y+29	; 0x1d
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	91 05       	cpc	r25, r1
    135e:	89 f0       	breq	.+34     	; 0x1382 <TIMER0_void_SetDesiredTime_MicroSec+0x70>
    1360:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1362:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	89 f0       	breq	.+34     	; 0x138c <TIMER0_void_SetDesiredTime_MicroSec+0x7a>
    136a:	23 c0       	rjmp	.+70     	; 0x13b2 <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
    136c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    136e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1370:	84 30       	cpi	r24, 0x04	; 4
    1372:	91 05       	cpc	r25, r1
    1374:	a9 f0       	breq	.+42     	; 0x13a0 <TIMER0_void_SetDesiredTime_MicroSec+0x8e>
    1376:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1378:	3d 8d       	ldd	r19, Y+29	; 0x1d
    137a:	25 30       	cpi	r18, 0x05	; 5
    137c:	31 05       	cpc	r19, r1
    137e:	a9 f0       	breq	.+42     	; 0x13aa <TIMER0_void_SetDesiredTime_MicroSec+0x98>
    1380:	18 c0       	rjmp	.+48     	; 0x13b2 <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
	{
	case NO_Prescaller:
		prescaller = 1;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9e 8b       	std	Y+22, r25	; 0x16
    1388:	8d 8b       	std	Y+21, r24	; 0x15
    138a:	13 c0       	rjmp	.+38     	; 0x13b2 <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
	break;
	case Prescaller_8:
			prescaller = 8;
    138c:	88 e0       	ldi	r24, 0x08	; 8
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9e 8b       	std	Y+22, r25	; 0x16
    1392:	8d 8b       	std	Y+21, r24	; 0x15
    1394:	0e c0       	rjmp	.+28     	; 0x13b2 <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
	break;
	case Prescaller_64:
			prescaller = 64;
    1396:	80 e4       	ldi	r24, 0x40	; 64
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9e 8b       	std	Y+22, r25	; 0x16
    139c:	8d 8b       	std	Y+21, r24	; 0x15
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
	break;
	case Prescaller_256:
			prescaller = 256;
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	9e 8b       	std	Y+22, r25	; 0x16
    13a6:	8d 8b       	std	Y+21, r24	; 0x15
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <TIMER0_void_SetDesiredTime_MicroSec+0xa0>
	break;
	case Prescaller_1024:
			prescaller = 1024;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	94 e0       	ldi	r25, 0x04	; 4
    13ae:	9e 8b       	std	Y+22, r25	; 0x16
    13b0:	8d 8b       	std	Y+21, r24	; 0x15
	break;


	}
	u32 TickTime =(prescaller * 1000000) / TIMER0_F_CPU;
    13b2:	8d 89       	ldd	r24, Y+21	; 0x15
    13b4:	9e 89       	ldd	r25, Y+22	; 0x16
    13b6:	cc 01       	movw	r24, r24
    13b8:	a0 e0       	ldi	r26, 0x00	; 0
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	20 e4       	ldi	r18, 0x40	; 64
    13be:	32 e4       	ldi	r19, 0x42	; 66
    13c0:	4f e0       	ldi	r20, 0x0F	; 15
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__mulsi3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	32 e1       	ldi	r19, 0x12	; 18
    13d4:	4a e7       	ldi	r20, 0x7A	; 122
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__udivmodsi4>
    13e0:	da 01       	movw	r26, r20
    13e2:	c9 01       	movw	r24, r18
    13e4:	89 8b       	std	Y+17, r24	; 0x11
    13e6:	9a 8b       	std	Y+18, r25	; 0x12
    13e8:	ab 8b       	std	Y+19, r26	; 0x13
    13ea:	bc 8b       	std	Y+20, r27	; 0x14
	u32 OverFlowTime = TickTime *TIMER0_REG_CABACITY;
    13ec:	89 89       	ldd	r24, Y+17	; 0x11
    13ee:	9a 89       	ldd	r25, Y+18	; 0x12
    13f0:	ab 89       	ldd	r26, Y+19	; 0x13
    13f2:	bc 89       	ldd	r27, Y+20	; 0x14
    13f4:	ba 2f       	mov	r27, r26
    13f6:	a9 2f       	mov	r26, r25
    13f8:	98 2f       	mov	r25, r24
    13fa:	88 27       	eor	r24, r24
    13fc:	8d 87       	std	Y+13, r24	; 0x0d
    13fe:	9e 87       	std	Y+14, r25	; 0x0e
    1400:	af 87       	std	Y+15, r26	; 0x0f
    1402:	b8 8b       	std	Y+16, r27	; 0x10
	u32 DesiredTime = copy_time;
    1404:	8f 89       	ldd	r24, Y+23	; 0x17
    1406:	98 8d       	ldd	r25, Y+24	; 0x18
    1408:	a9 8d       	ldd	r26, Y+25	; 0x19
    140a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    140c:	89 87       	std	Y+9, r24	; 0x09
    140e:	9a 87       	std	Y+10, r25	; 0x0a
    1410:	ab 87       	std	Y+11, r26	; 0x0b
    1412:	bc 87       	std	Y+12, r27	; 0x0c

	OverflowNumber = DesiredTime / OverFlowTime;
    1414:	89 85       	ldd	r24, Y+9	; 0x09
    1416:	9a 85       	ldd	r25, Y+10	; 0x0a
    1418:	ab 85       	ldd	r26, Y+11	; 0x0b
    141a:	bc 85       	ldd	r27, Y+12	; 0x0c
    141c:	2d 85       	ldd	r18, Y+13	; 0x0d
    141e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1420:	4f 85       	ldd	r20, Y+15	; 0x0f
    1422:	58 89       	ldd	r21, Y+16	; 0x10
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__udivmodsi4>
    142c:	da 01       	movw	r26, r20
    142e:	c9 01       	movw	r24, r18
    1430:	80 93 96 01 	sts	0x0196, r24
    1434:	90 93 97 01 	sts	0x0197, r25
    1438:	a0 93 98 01 	sts	0x0198, r26
    143c:	b0 93 99 01 	sts	0x0199, r27
	u32 OverFlowRemTime = DesiredTime % OverFlowTime;
    1440:	89 85       	ldd	r24, Y+9	; 0x09
    1442:	9a 85       	ldd	r25, Y+10	; 0x0a
    1444:	ab 85       	ldd	r26, Y+11	; 0x0b
    1446:	bc 85       	ldd	r27, Y+12	; 0x0c
    1448:	2d 85       	ldd	r18, Y+13	; 0x0d
    144a:	3e 85       	ldd	r19, Y+14	; 0x0e
    144c:	4f 85       	ldd	r20, Y+15	; 0x0f
    144e:	58 89       	ldd	r21, Y+16	; 0x10
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__udivmodsi4>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	8d 83       	std	Y+5, r24	; 0x05
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	af 83       	std	Y+7, r26	; 0x07
    1462:	b8 87       	std	Y+8, r27	; 0x08
	u32 OverFlowRemCounts = ((float)OverFlowRemTime/OverFlowTime)*TIMER0_REG_CABACITY;
    1464:	6d 81       	ldd	r22, Y+5	; 0x05
    1466:	7e 81       	ldd	r23, Y+6	; 0x06
    1468:	8f 81       	ldd	r24, Y+7	; 0x07
    146a:	98 85       	ldd	r25, Y+8	; 0x08
    146c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1470:	7b 01       	movw	r14, r22
    1472:	8c 01       	movw	r16, r24
    1474:	6d 85       	ldd	r22, Y+13	; 0x0d
    1476:	7e 85       	ldd	r23, Y+14	; 0x0e
    1478:	8f 85       	ldd	r24, Y+15	; 0x0f
    147a:	98 89       	ldd	r25, Y+16	; 0x10
    147c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1480:	9b 01       	movw	r18, r22
    1482:	ac 01       	movw	r20, r24
    1484:	c8 01       	movw	r24, r16
    1486:	b7 01       	movw	r22, r14
    1488:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	53 e4       	ldi	r21, 0x43	; 67
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	ab 83       	std	Y+3, r26	; 0x03
    14b6:	bc 83       	std	Y+4, r27	; 0x04

	TCNT0=0;
    14b8:	e2 e5       	ldi	r30, 0x52	; 82
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	10 82       	st	Z, r1
	if(OverFlowRemTime>0)
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	af 81       	ldd	r26, Y+7	; 0x07
    14c4:	b8 85       	ldd	r27, Y+8	; 0x08
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	a1 05       	cpc	r26, r1
    14ca:	b1 05       	cpc	r27, r1
    14cc:	e1 f0       	breq	.+56     	; 0x1506 <TIMER0_void_SetDesiredTime_MicroSec+0x1f4>
	{
		Preload = TIMER0_REG_CABACITY - OverFlowRemCounts;
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	81 95       	neg	r24
    14d2:	80 93 9a 01 	sts	0x019A, r24
		TCNT0 = Preload;
    14d6:	e2 e5       	ldi	r30, 0x52	; 82
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 91 9a 01 	lds	r24, 0x019A
    14de:	80 83       	st	Z, r24
		OverflowNumber++;
    14e0:	80 91 96 01 	lds	r24, 0x0196
    14e4:	90 91 97 01 	lds	r25, 0x0197
    14e8:	a0 91 98 01 	lds	r26, 0x0198
    14ec:	b0 91 99 01 	lds	r27, 0x0199
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	a1 1d       	adc	r26, r1
    14f4:	b1 1d       	adc	r27, r1
    14f6:	80 93 96 01 	sts	0x0196, r24
    14fa:	90 93 97 01 	sts	0x0197, r25
    14fe:	a0 93 98 01 	sts	0x0198, r26
    1502:	b0 93 99 01 	sts	0x0199, r27
	}
}// end TIMER0_void_SetDesiredTime_MicroSec
    1506:	6d 96       	adiw	r28, 0x1d	; 29
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	08 95       	ret

00001520 <TIMER0_void_FastPWM>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_FastPWM(u8 copy_DutyCycle ,timerOC0_type OC0_type,prescaller_type prescaller )
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <TIMER0_void_FastPWM+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <TIMER0_void_FastPWM+0x8>
    1528:	0f 92       	push	r0
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	6a 83       	std	Y+2, r22	; 0x02
    1532:	4b 83       	std	Y+3, r20	; 0x03
	switch(OC0_type)
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3d 83       	std	Y+5, r19	; 0x05
    153c:	2c 83       	std	Y+4, r18	; 0x04
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	91 05       	cpc	r25, r1
    1546:	31 f0       	breq	.+12     	; 0x1554 <TIMER0_void_FastPWM+0x34>
    1548:	2c 81       	ldd	r18, Y+4	; 0x04
    154a:	3d 81       	ldd	r19, Y+5	; 0x05
    154c:	23 30       	cpi	r18, 0x03	; 3
    154e:	31 05       	cpc	r19, r1
    1550:	89 f0       	breq	.+34     	; 0x1574 <TIMER0_void_FastPWM+0x54>
    1552:	22 c0       	rjmp	.+68     	; 0x1598 <TIMER0_void_FastPWM+0x78>
	{
	case TIMER0_NONINVERTING_PWM_OC0:
		OCR0 = ((copy_DutyCycle*256)/100)-1;
    1554:	ec e5       	ldi	r30, 0x5C	; 92
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	98 2f       	mov	r25, r24
    1560:	88 27       	eor	r24, r24
    1562:	24 e6       	ldi	r18, 0x64	; 100
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	b9 01       	movw	r22, r18
    1568:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__divmodhi4>
    156c:	cb 01       	movw	r24, r22
    156e:	81 50       	subi	r24, 0x01	; 1
    1570:	80 83       	st	Z, r24
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <TIMER0_void_FastPWM+0x72>
	break;
	case TIMER0_INVERTING_PWM_OC0:
		OCR0 = 255-((copy_DutyCycle*256)/100);
    1574:	ec e5       	ldi	r30, 0x5C	; 92
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	98 2f       	mov	r25, r24
    1580:	88 27       	eor	r24, r24
    1582:	24 e6       	ldi	r18, 0x64	; 100
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	b9 01       	movw	r22, r18
    1588:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__divmodhi4>
    158c:	cb 01       	movw	r24, r22
    158e:	80 95       	com	r24
    1590:	80 83       	st	Z, r24
	break;
	default:
	return;
	}
	TIMER0_void_TimerStart(prescaller);
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <TIMER0_void_TimerStart>
}//end TIMER0_void_FastPWM
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <TIMER0_void_PhaseCorrectPWM>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_void_PhaseCorrectPWM(u8 copy_DutyCycle ,timerOC0_type OC0_type )
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <TIMER0_void_PhaseCorrectPWM+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <TIMER0_void_PhaseCorrectPWM+0x8>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(OC0_type)
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	3c 83       	std	Y+4, r19	; 0x04
    15c0:	2b 83       	std	Y+3, r18	; 0x03
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	91 05       	cpc	r25, r1
    15ca:	31 f0       	breq	.+12     	; 0x15d8 <TIMER0_void_PhaseCorrectPWM+0x30>
    15cc:	2b 81       	ldd	r18, Y+3	; 0x03
    15ce:	3c 81       	ldd	r19, Y+4	; 0x04
    15d0:	23 30       	cpi	r18, 0x03	; 3
    15d2:	31 05       	cpc	r19, r1
    15d4:	e1 f0       	breq	.+56     	; 0x160e <TIMER0_void_PhaseCorrectPWM+0x66>
    15d6:	36 c0       	rjmp	.+108    	; 0x1644 <TIMER0_void_PhaseCorrectPWM+0x9c>
	{
	case TIMER0_NONINVERTING_PWM_OC0:
		OCR0 = ((copy_DutyCycle*255)/100);
    15d8:	ec e5       	ldi	r30, 0x5C	; 92
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	48 2f       	mov	r20, r24
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	ca 01       	movw	r24, r20
    15e4:	9c 01       	movw	r18, r24
    15e6:	22 0f       	add	r18, r18
    15e8:	33 1f       	adc	r19, r19
    15ea:	c9 01       	movw	r24, r18
    15ec:	96 95       	lsr	r25
    15ee:	98 2f       	mov	r25, r24
    15f0:	88 27       	eor	r24, r24
    15f2:	97 95       	ror	r25
    15f4:	87 95       	ror	r24
    15f6:	82 1b       	sub	r24, r18
    15f8:	93 0b       	sbc	r25, r19
    15fa:	84 0f       	add	r24, r20
    15fc:	95 1f       	adc	r25, r21
    15fe:	24 e6       	ldi	r18, 0x64	; 100
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	b9 01       	movw	r22, r18
    1604:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__divmodhi4>
    1608:	cb 01       	movw	r24, r22
    160a:	80 83       	st	Z, r24
    160c:	1b c0       	rjmp	.+54     	; 0x1644 <TIMER0_void_PhaseCorrectPWM+0x9c>
	break;
	case TIMER0_INVERTING_PWM_OC0:
		OCR0 = 255-((copy_DutyCycle*255)/100);
    160e:	ec e5       	ldi	r30, 0x5C	; 92
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	48 2f       	mov	r20, r24
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	ca 01       	movw	r24, r20
    161a:	9c 01       	movw	r18, r24
    161c:	22 0f       	add	r18, r18
    161e:	33 1f       	adc	r19, r19
    1620:	c9 01       	movw	r24, r18
    1622:	96 95       	lsr	r25
    1624:	98 2f       	mov	r25, r24
    1626:	88 27       	eor	r24, r24
    1628:	97 95       	ror	r25
    162a:	87 95       	ror	r24
    162c:	82 1b       	sub	r24, r18
    162e:	93 0b       	sbc	r25, r19
    1630:	84 0f       	add	r24, r20
    1632:	95 1f       	adc	r25, r21
    1634:	24 e6       	ldi	r18, 0x64	; 100
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	b9 01       	movw	r22, r18
    163a:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__divmodhi4>
    163e:	cb 01       	movw	r24, r22
    1640:	80 95       	com	r24
    1642:	80 83       	st	Z, r24
	break;
	default:
		return;
	}
}// end TIMER0_void_PhaseCorrectPWM
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <TIMER0_void_TIMER0_TickTime>:

u32 TIMER0_void_TIMER0_TickTime(prescaller_type prescaler)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	27 97       	sbiw	r28, 0x07	; 7
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	8d 83       	std	Y+5, r24	; 0x05
	switch(prescaler)
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3f 83       	std	Y+7, r19	; 0x07
    1670:	2e 83       	std	Y+6, r18	; 0x06
    1672:	8e 81       	ldd	r24, Y+6	; 0x06
    1674:	9f 81       	ldd	r25, Y+7	; 0x07
    1676:	83 30       	cpi	r24, 0x03	; 3
    1678:	91 05       	cpc	r25, r1
    167a:	09 f1       	breq	.+66     	; 0x16be <TIMER0_void_TIMER0_TickTime+0x6c>
    167c:	2e 81       	ldd	r18, Y+6	; 0x06
    167e:	3f 81       	ldd	r19, Y+7	; 0x07
    1680:	24 30       	cpi	r18, 0x04	; 4
    1682:	31 05       	cpc	r19, r1
    1684:	5c f4       	brge	.+22     	; 0x169c <TIMER0_void_TIMER0_TickTime+0x4a>
    1686:	8e 81       	ldd	r24, Y+6	; 0x06
    1688:	9f 81       	ldd	r25, Y+7	; 0x07
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	91 05       	cpc	r25, r1
    168e:	89 f0       	breq	.+34     	; 0x16b2 <TIMER0_void_TIMER0_TickTime+0x60>
    1690:	2e 81       	ldd	r18, Y+6	; 0x06
    1692:	3f 81       	ldd	r19, Y+7	; 0x07
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	79 f0       	breq	.+30     	; 0x16b8 <TIMER0_void_TIMER0_TickTime+0x66>
    169a:	17 c0       	rjmp	.+46     	; 0x16ca <TIMER0_void_TIMER0_TickTime+0x78>
    169c:	8e 81       	ldd	r24, Y+6	; 0x06
    169e:	9f 81       	ldd	r25, Y+7	; 0x07
    16a0:	84 30       	cpi	r24, 0x04	; 4
    16a2:	91 05       	cpc	r25, r1
    16a4:	79 f0       	breq	.+30     	; 0x16c4 <TIMER0_void_TIMER0_TickTime+0x72>
    16a6:	2e 81       	ldd	r18, Y+6	; 0x06
    16a8:	3f 81       	ldd	r19, Y+7	; 0x07
    16aa:	25 30       	cpi	r18, 0x05	; 5
    16ac:	31 05       	cpc	r19, r1
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <TIMER0_void_TIMER0_TickTime+0x76>
    16b0:	0c c0       	rjmp	.+24     	; 0x16ca <TIMER0_void_TIMER0_TickTime+0x78>
	{
	case NO_Prescaller:
		prescaler = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	8d 83       	std	Y+5, r24	; 0x05
    16b6:	09 c0       	rjmp	.+18     	; 0x16ca <TIMER0_void_TIMER0_TickTime+0x78>
		break;
	case Prescaller_8:
			prescaler = 8;
    16b8:	88 e0       	ldi	r24, 0x08	; 8
    16ba:	8d 83       	std	Y+5, r24	; 0x05
    16bc:	06 c0       	rjmp	.+12     	; 0x16ca <TIMER0_void_TIMER0_TickTime+0x78>
		break;
	case Prescaller_64:
			prescaler = 64;
    16be:	80 e4       	ldi	r24, 0x40	; 64
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <TIMER0_void_TIMER0_TickTime+0x78>
		break;
	case Prescaller_256:
			prescaler = 256;
    16c4:	1d 82       	std	Y+5, r1	; 0x05
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <TIMER0_void_TIMER0_TickTime+0x78>
		break;
	case Prescaller_1024:
			prescaler = 1024;
    16c8:	1d 82       	std	Y+5, r1	; 0x05
		break;

	}

	u32 TickTime = prescaler/TIMER0_F_CPU;
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a0 e0       	ldi	r26, 0x00	; 0
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	32 e1       	ldi	r19, 0x12	; 18
    16d8:	4a e7       	ldi	r20, 0x7A	; 122
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__udivmodsi4>
    16e4:	da 01       	movw	r26, r20
    16e6:	c9 01       	movw	r24, r18
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	ab 83       	std	Y+3, r26	; 0x03
    16ee:	bc 83       	std	Y+4, r27	; 0x04
	return TickTime;
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	ab 81       	ldd	r26, Y+3	; 0x03
    16f6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	27 96       	adiw	r28, 0x07	; 7
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <SPI_InitMaster>:
#include "SPI.h"
#include "../DIO/Memmap.h"
#include "../../LIB/STD_TYPES.h"
#include "../DIO/DIO_interface.h"
void SPI_InitMaster()
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
	DIO_void_setPin_direction(PORTB_ID,PIN4,OUTPUT);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	64 e0       	ldi	r22, 0x04	; 4
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN5,OUTPUT);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	65 e0       	ldi	r22, 0x05	; 5
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN6,INPUT);
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	66 e0       	ldi	r22, 0x06	; 6
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN7,OUTPUT);
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	67 e0       	ldi	r22, 0x07	; 7
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	SPCR |= (1<<SPE)|(1<<MSTR);
    173e:	ad e2       	ldi	r26, 0x2D	; 45
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ed e2       	ldi	r30, 0x2D	; 45
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	80 65       	ori	r24, 0x50	; 80
    174a:	8c 93       	st	X, r24
}
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <SPI_InitSlave>:

void SPI_InitSlave()
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	DIO_void_setPin_direction(PORTB_ID,PIN4,INPUT);
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	64 e0       	ldi	r22, 0x04	; 4
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN5,INPUT);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	65 e0       	ldi	r22, 0x05	; 5
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN6,OUTPUT);
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	66 e0       	ldi	r22, 0x06	; 6
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN7,INPUT);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	67 e0       	ldi	r22, 0x07	; 7
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	SPCR |= (1<<SPE);
    1782:	ad e2       	ldi	r26, 0x2D	; 45
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	ed e2       	ldi	r30, 0x2D	; 45
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	80 64       	ori	r24, 0x40	; 64
    178e:	8c 93       	st	X, r24
}
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <SPI_SendByte>:

void SPI_SendByte(u8 data)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	0f 92       	push	r0
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    17a2:	ef e2       	ldi	r30, 0x2F	; 47
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	80 83       	st	Z, r24
	while(Bit_Is_Clear(SPSR,SPIF));
    17aa:	ee e2       	ldi	r30, 0x2E	; 46
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	88 23       	and	r24, r24
    17b2:	dc f7       	brge	.-10     	; 0x17aa <SPI_SendByte+0x14>
}
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <SPI_ReceiveByte>:

u8 SPI_ReceiveByte()
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
	while(Bit_Is_Clear(SPSR,SPIF));
    17c4:	ee e2       	ldi	r30, 0x2E	; 46
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	88 23       	and	r24, r24
    17cc:	dc f7       	brge	.-10     	; 0x17c4 <SPI_ReceiveByte+0x8>
	return SPDR;
    17ce:	ef e2       	ldi	r30, 0x2F	; 47
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
}
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <SPI_SendString>:

void SPI_SendString(u8 *str)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <SPI_SendString+0x6>
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	9a 83       	std	Y+2, r25	; 0x02
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	0a c0       	rjmp	.+20     	; 0x17fe <SPI_SendString+0x24>
	while(*str)
	{
		SPI_SendByte(*str);
    17ea:	e9 81       	ldd	r30, Y+1	; 0x01
    17ec:	fa 81       	ldd	r31, Y+2	; 0x02
    17ee:	80 81       	ld	r24, Z
    17f0:	0e 94 cb 0b 	call	0x1796	; 0x1796 <SPI_SendByte>
		str++;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
	return SPDR;
}

void SPI_SendString(u8 *str)
{
	while(*str)
    17fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1800:	fa 81       	ldd	r31, Y+2	; 0x02
    1802:	80 81       	ld	r24, Z
    1804:	88 23       	and	r24, r24
    1806:	89 f7       	brne	.-30     	; 0x17ea <SPI_SendString+0x10>
	{
		SPI_SendByte(*str);
		str++;
	}
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <SPI_ReceiveString>:

void SPI_ReceiveString(u8 *str)
{
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <SPI_ReceiveString+0xa>
    181c:	0f 92       	push	r0
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	9b 83       	std	Y+3, r25	; 0x03
    1824:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1826:	19 82       	std	Y+1, r1	; 0x01
	str[i] = SPI_ReceiveByte();
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	9b 81       	ldd	r25, Y+3	; 0x03
    1832:	8c 01       	movw	r16, r24
    1834:	02 0f       	add	r16, r18
    1836:	13 1f       	adc	r17, r19
    1838:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ReceiveByte>
    183c:	f8 01       	movw	r30, r16
    183e:	80 83       	st	Z, r24
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <SPI_ReceiveString+0x4e>
	while(str[i] != '#')
	{
		i++;
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	8f 5f       	subi	r24, 0xFF	; 255
    1846:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_ReceiveByte();
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	8c 01       	movw	r16, r24
    1854:	02 0f       	add	r16, r18
    1856:	13 1f       	adc	r17, r19
    1858:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ReceiveByte>
    185c:	f8 01       	movw	r30, r16
    185e:	80 83       	st	Z, r24

void SPI_ReceiveString(u8 *str)
{
	u8 i = 0;
	str[i] = SPI_ReceiveByte();
	while(str[i] != '#')
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	fc 01       	movw	r30, r24
    186c:	e2 0f       	add	r30, r18
    186e:	f3 1f       	adc	r31, r19
    1870:	80 81       	ld	r24, Z
    1872:	83 32       	cpi	r24, 0x23	; 35
    1874:	31 f7       	brne	.-52     	; 0x1842 <SPI_ReceiveString+0x30>
	{
		i++;
		str[i] = SPI_ReceiveByte();
	}
	str[i] = '\0';
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	9b 81       	ldd	r25, Y+3	; 0x03
    1880:	fc 01       	movw	r30, r24
    1882:	e2 0f       	add	r30, r18
    1884:	f3 1f       	adc	r31, r19
    1886:	10 82       	st	Z, r1
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	08 95       	ret

00001898 <EXTI_void_int>:
#include "../DIO/Memmap.h"
#include  "ex_int.h"


void EXTI_void_int( u8 INT)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <EXTI_void_int+0x6>
    189e:	0f 92       	push	r0
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	89 83       	std	Y+1, r24	; 0x01
	//INT0 is input ( done )
	//  Enable peripheral interrupt enable
		switch(INT)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	3b 83       	std	Y+3, r19	; 0x03
    18ae:	2a 83       	std	Y+2, r18	; 0x02
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	9b 81       	ldd	r25, Y+3	; 0x03
    18b4:	86 30       	cpi	r24, 0x06	; 6
    18b6:	91 05       	cpc	r25, r1
    18b8:	59 f0       	breq	.+22     	; 0x18d0 <EXTI_void_int+0x38>
    18ba:	2a 81       	ldd	r18, Y+2	; 0x02
    18bc:	3b 81       	ldd	r19, Y+3	; 0x03
    18be:	27 30       	cpi	r18, 0x07	; 7
    18c0:	31 05       	cpc	r19, r1
    18c2:	71 f0       	breq	.+28     	; 0x18e0 <EXTI_void_int+0x48>
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	9b 81       	ldd	r25, Y+3	; 0x03
    18c8:	85 30       	cpi	r24, 0x05	; 5
    18ca:	91 05       	cpc	r25, r1
    18cc:	89 f0       	breq	.+34     	; 0x18f0 <EXTI_void_int+0x58>
    18ce:	17 c0       	rjmp	.+46     	; 0x18fe <EXTI_void_int+0x66>
		{
		case INT0:
			SETBIT(GICR,6);
    18d0:	ab e5       	ldi	r26, 0x5B	; 91
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	eb e5       	ldi	r30, 0x5B	; 91
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	80 64       	ori	r24, 0x40	; 64
    18dc:	8c 93       	st	X, r24
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <EXTI_void_int+0x66>
			break;
		case INT1:
			SETBIT(GICR,7);
    18e0:	ab e5       	ldi	r26, 0x5B	; 91
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	eb e5       	ldi	r30, 0x5B	; 91
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	80 68       	ori	r24, 0x80	; 128
    18ec:	8c 93       	st	X, r24
    18ee:	07 c0       	rjmp	.+14     	; 0x18fe <EXTI_void_int+0x66>
			break;
		case INT2:
			SETBIT(GICR,5);
    18f0:	ab e5       	ldi	r26, 0x5B	; 91
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	eb e5       	ldi	r30, 0x5B	; 91
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 62       	ori	r24, 0x20	; 32
    18fc:	8c 93       	st	X, r24
			break;
		}
     //Enable GIE
	 SETBIT(SREG,7);
    18fe:	af e5       	ldi	r26, 0x5F	; 95
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	ef e5       	ldi	r30, 0x5F	; 95
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	80 68       	ori	r24, 0x80	; 128
    190a:	8c 93       	st	X, r24
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <EXTI_void_changeMod>:
void EXTI_void_changeMod(ext_mode_type mode,u8 INT)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <EXTI_void_changeMod+0x6>
    191e:	00 d0       	rcall	.+0      	; 0x1920 <EXTI_void_changeMod+0x8>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <EXTI_void_changeMod+0xa>
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	6a 83       	std	Y+2, r22	; 0x02
     if (INT==INT0)
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	86 30       	cpi	r24, 0x06	; 6
    192e:	09 f0       	breq	.+2      	; 0x1932 <EXTI_void_changeMod+0x1a>
    1930:	5c c0       	rjmp	.+184    	; 0x19ea <EXTI_void_changeMod+0xd2>
        {
       	 switch(mode )
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	3e 83       	std	Y+6, r19	; 0x06
    193a:	2d 83       	std	Y+5, r18	; 0x05
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <EXTI_void_changeMod+0x30>
    1946:	42 c0       	rjmp	.+132    	; 0x19cc <EXTI_void_changeMod+0xb4>
    1948:	2d 81       	ldd	r18, Y+5	; 0x05
    194a:	3e 81       	ldd	r19, Y+6	; 0x06
    194c:	22 30       	cpi	r18, 0x02	; 2
    194e:	31 05       	cpc	r19, r1
    1950:	2c f4       	brge	.+10     	; 0x195c <EXTI_void_changeMod+0x44>
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	9e 81       	ldd	r25, Y+6	; 0x06
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	61 f0       	breq	.+24     	; 0x1972 <EXTI_void_changeMod+0x5a>
    195a:	a6 c0       	rjmp	.+332    	; 0x1aa8 <EXTI_void_changeMod+0x190>
    195c:	2d 81       	ldd	r18, Y+5	; 0x05
    195e:	3e 81       	ldd	r19, Y+6	; 0x06
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	21 f1       	breq	.+72     	; 0x19ae <EXTI_void_changeMod+0x96>
    1966:	8d 81       	ldd	r24, Y+5	; 0x05
    1968:	9e 81       	ldd	r25, Y+6	; 0x06
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	91 05       	cpc	r25, r1
    196e:	81 f0       	breq	.+32     	; 0x1990 <EXTI_void_changeMod+0x78>
    1970:	9b c0       	rjmp	.+310    	; 0x1aa8 <EXTI_void_changeMod+0x190>
       	 {
         case EXT_LOW_MODE :
			  CLRBIT(MCUCR,0);
    1972:	a5 e5       	ldi	r26, 0x55	; 85
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e5 e5       	ldi	r30, 0x55	; 85
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8e 7f       	andi	r24, 0xFE	; 254
    197e:	8c 93       	st	X, r24
			  CLRBIT(MCUCR,1);
    1980:	a5 e5       	ldi	r26, 0x55	; 85
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e5 e5       	ldi	r30, 0x55	; 85
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8d 7f       	andi	r24, 0xFD	; 253
    198c:	8c 93       	st	X, r24
    198e:	8c c0       	rjmp	.+280    	; 0x1aa8 <EXTI_void_changeMod+0x190>
			  break;
         case EXT_RAISING_MODE :
			  SETBIT(MCUCR,0);
    1990:	a5 e5       	ldi	r26, 0x55	; 85
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e5 e5       	ldi	r30, 0x55	; 85
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	81 60       	ori	r24, 0x01	; 1
    199c:	8c 93       	st	X, r24
			  SETBIT(MCUCR,1);
    199e:	a5 e5       	ldi	r26, 0x55	; 85
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e5 e5       	ldi	r30, 0x55	; 85
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	82 60       	ori	r24, 0x02	; 2
    19aa:	8c 93       	st	X, r24
    19ac:	7d c0       	rjmp	.+250    	; 0x1aa8 <EXTI_void_changeMod+0x190>
			  break;
         case EXT_FAILLING_MODE :
			  CLRBIT(MCUCR,0);
    19ae:	a5 e5       	ldi	r26, 0x55	; 85
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e5 e5       	ldi	r30, 0x55	; 85
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8e 7f       	andi	r24, 0xFE	; 254
    19ba:	8c 93       	st	X, r24
			  SETBIT(MCUCR,1);
    19bc:	a5 e5       	ldi	r26, 0x55	; 85
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e5 e5       	ldi	r30, 0x55	; 85
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	82 60       	ori	r24, 0x02	; 2
    19c8:	8c 93       	st	X, r24
    19ca:	6e c0       	rjmp	.+220    	; 0x1aa8 <EXTI_void_changeMod+0x190>
			  break;
         case EXT_CHANGE_MODE :
			  SETBIT(MCUCR,0);
    19cc:	a5 e5       	ldi	r26, 0x55	; 85
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e5 e5       	ldi	r30, 0x55	; 85
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	81 60       	ori	r24, 0x01	; 1
    19d8:	8c 93       	st	X, r24
			  CLRBIT(MCUCR,1);
    19da:	a5 e5       	ldi	r26, 0x55	; 85
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e5 e5       	ldi	r30, 0x55	; 85
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8d 7f       	andi	r24, 0xFD	; 253
    19e6:	8c 93       	st	X, r24
    19e8:	5f c0       	rjmp	.+190    	; 0x1aa8 <EXTI_void_changeMod+0x190>
			  break;
            }
        }
     else if (INT==INT1)
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	87 30       	cpi	r24, 0x07	; 7
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <EXTI_void_changeMod+0xda>
    19f0:	5b c0       	rjmp	.+182    	; 0x1aa8 <EXTI_void_changeMod+0x190>
            {
           	 switch(mode )
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	3c 83       	std	Y+4, r19	; 0x04
    19fa:	2b 83       	std	Y+3, r18	; 0x03
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	91 05       	cpc	r25, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <EXTI_void_changeMod+0xf0>
    1a06:	42 c0       	rjmp	.+132    	; 0x1a8c <EXTI_void_changeMod+0x174>
    1a08:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	2c f4       	brge	.+10     	; 0x1a1c <EXTI_void_changeMod+0x104>
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <EXTI_void_changeMod+0x11a>
    1a1a:	46 c0       	rjmp	.+140    	; 0x1aa8 <EXTI_void_changeMod+0x190>
    1a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	21 f1       	breq	.+72     	; 0x1a6e <EXTI_void_changeMod+0x156>
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	83 30       	cpi	r24, 0x03	; 3
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	81 f0       	breq	.+32     	; 0x1a50 <EXTI_void_changeMod+0x138>
    1a30:	3b c0       	rjmp	.+118    	; 0x1aa8 <EXTI_void_changeMod+0x190>
           	 {
             case EXT_LOW_MODE :
				  CLRBIT(MCUCR,2);
    1a32:	a5 e5       	ldi	r26, 0x55	; 85
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e5 e5       	ldi	r30, 0x55	; 85
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8b 7f       	andi	r24, 0xFB	; 251
    1a3e:	8c 93       	st	X, r24
				  CLRBIT(MCUCR,3);
    1a40:	a5 e5       	ldi	r26, 0x55	; 85
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e5 e5       	ldi	r30, 0x55	; 85
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	87 7f       	andi	r24, 0xF7	; 247
    1a4c:	8c 93       	st	X, r24
    1a4e:	2c c0       	rjmp	.+88     	; 0x1aa8 <EXTI_void_changeMod+0x190>
				  break;
             case EXT_RAISING_MODE :
				  SETBIT(MCUCR,2);
    1a50:	a5 e5       	ldi	r26, 0x55	; 85
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e5 e5       	ldi	r30, 0x55	; 85
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	84 60       	ori	r24, 0x04	; 4
    1a5c:	8c 93       	st	X, r24
				  SETBIT(MCUCR,3);
    1a5e:	a5 e5       	ldi	r26, 0x55	; 85
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e5 e5       	ldi	r30, 0x55	; 85
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	88 60       	ori	r24, 0x08	; 8
    1a6a:	8c 93       	st	X, r24
    1a6c:	1d c0       	rjmp	.+58     	; 0x1aa8 <EXTI_void_changeMod+0x190>
				  break;
             case EXT_FAILLING_MODE :
				  CLRBIT(MCUCR,2);
    1a6e:	a5 e5       	ldi	r26, 0x55	; 85
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e5 e5       	ldi	r30, 0x55	; 85
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	8b 7f       	andi	r24, 0xFB	; 251
    1a7a:	8c 93       	st	X, r24
				  SETBIT(MCUCR,3);
    1a7c:	a5 e5       	ldi	r26, 0x55	; 85
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e5 e5       	ldi	r30, 0x55	; 85
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	88 60       	ori	r24, 0x08	; 8
    1a88:	8c 93       	st	X, r24
    1a8a:	0e c0       	rjmp	.+28     	; 0x1aa8 <EXTI_void_changeMod+0x190>
				  break;
             case EXT_CHANGE_MODE :
				  SETBIT(MCUCR,2);
    1a8c:	a5 e5       	ldi	r26, 0x55	; 85
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e5 e5       	ldi	r30, 0x55	; 85
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	84 60       	ori	r24, 0x04	; 4
    1a98:	8c 93       	st	X, r24
				  CLRBIT(MCUCR,3);
    1a9a:	a5 e5       	ldi	r26, 0x55	; 85
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e5 e5       	ldi	r30, 0x55	; 85
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	87 7f       	andi	r24, 0xF7	; 247
    1aa6:	8c 93       	st	X, r24
						 case EXT_FAILLING_MODE :
								  CLRBIT(mcucsr,6);
								  break;
					}*/
            }
}
    1aa8:	26 96       	adiw	r28, 0x06	; 6
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <DIO_void_setPin_value>:
#include "DIO_interface.h"

#include "../../LIB/STD_TYPES.h"

void DIO_void_setPin_value(port_type port, pin_type pin,value_type value)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	27 97       	sbiw	r28, 0x07	; 7
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	6a 83       	std	Y+2, r22	; 0x02
    1ad2:	4b 83       	std	Y+3, r20	; 0x03
	if(value == LOW)
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	88 23       	and	r24, r24
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <DIO_void_setPin_value+0x22>
    1ada:	74 c0       	rjmp	.+232    	; 0x1bc4 <DIO_void_setPin_value+0x10a>
	{
		switch(port)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3f 83       	std	Y+7, r19	; 0x07
    1ae4:	2e 83       	std	Y+6, r18	; 0x06
    1ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	91 05       	cpc	r25, r1
    1aee:	59 f1       	breq	.+86     	; 0x1b46 <DIO_void_setPin_value+0x8c>
    1af0:	2e 81       	ldd	r18, Y+6	; 0x06
    1af2:	3f 81       	ldd	r19, Y+7	; 0x07
    1af4:	22 30       	cpi	r18, 0x02	; 2
    1af6:	31 05       	cpc	r19, r1
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <DIO_void_setPin_value+0x4a>
    1afa:	8e 81       	ldd	r24, Y+6	; 0x06
    1afc:	9f 81       	ldd	r25, Y+7	; 0x07
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f0       	breq	.+26     	; 0x1b1c <DIO_void_setPin_value+0x62>
    1b02:	d2 c0       	rjmp	.+420    	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
    1b04:	2e 81       	ldd	r18, Y+6	; 0x06
    1b06:	3f 81       	ldd	r19, Y+7	; 0x07
    1b08:	22 30       	cpi	r18, 0x02	; 2
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	89 f1       	breq	.+98     	; 0x1b70 <DIO_void_setPin_value+0xb6>
    1b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b10:	9f 81       	ldd	r25, Y+7	; 0x07
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	91 05       	cpc	r25, r1
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <DIO_void_setPin_value+0x60>
    1b18:	40 c0       	rjmp	.+128    	; 0x1b9a <DIO_void_setPin_value+0xe0>
    1b1a:	c6 c0       	rjmp	.+396    	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
		{
		case PORTA_ID:
			CLRBIT(PORTA, pin);
    1b1c:	ab e3       	ldi	r26, 0x3B	; 59
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	eb e3       	ldi	r30, 0x3B	; 59
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_void_setPin_value+0x80>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_void_setPin_value+0x7c>
    1b3e:	80 95       	com	r24
    1b40:	84 23       	and	r24, r20
    1b42:	8c 93       	st	X, r24
    1b44:	b1 c0       	rjmp	.+354    	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
			break;
		case PORTB_ID:
			CLRBIT(PORTB, pin);
    1b46:	a8 e3       	ldi	r26, 0x38	; 56
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e8 e3       	ldi	r30, 0x38	; 56
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	48 2f       	mov	r20, r24
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 2e       	mov	r0, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <DIO_void_setPin_value+0xaa>
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <DIO_void_setPin_value+0xa6>
    1b68:	80 95       	com	r24
    1b6a:	84 23       	and	r24, r20
    1b6c:	8c 93       	st	X, r24
    1b6e:	9c c0       	rjmp	.+312    	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
			break;
		case PORTC_ID:
			CLRBIT(PORTC, pin);
    1b70:	a5 e3       	ldi	r26, 0x35	; 53
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e5 e3       	ldi	r30, 0x35	; 53
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 2e       	mov	r0, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <DIO_void_setPin_value+0xd4>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	0a 94       	dec	r0
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <DIO_void_setPin_value+0xd0>
    1b92:	80 95       	com	r24
    1b94:	84 23       	and	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	87 c0       	rjmp	.+270    	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
			break;
		case PORTD_ID:
			CLRBIT(PORTD, pin);
    1b9a:	a2 e3       	ldi	r26, 0x32	; 50
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <DIO_void_setPin_value+0xfe>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <DIO_void_setPin_value+0xfa>
    1bbc:	80 95       	com	r24
    1bbe:	84 23       	and	r24, r20
    1bc0:	8c 93       	st	X, r24
    1bc2:	72 c0       	rjmp	.+228    	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
			break;
		}//end switch
	}//end if
	else if(value == HIGH)
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <DIO_void_setPin_value+0x112>
    1bca:	6e c0       	rjmp	.+220    	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
	{
		switch(port)
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3d 83       	std	Y+5, r19	; 0x05
    1bd4:	2c 83       	std	Y+4, r18	; 0x04
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	91 05       	cpc	r25, r1
    1bde:	49 f1       	breq	.+82     	; 0x1c32 <DIO_void_setPin_value+0x178>
    1be0:	2c 81       	ldd	r18, Y+4	; 0x04
    1be2:	3d 81       	ldd	r19, Y+5	; 0x05
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	31 05       	cpc	r19, r1
    1be8:	2c f4       	brge	.+10     	; 0x1bf4 <DIO_void_setPin_value+0x13a>
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	61 f0       	breq	.+24     	; 0x1c0a <DIO_void_setPin_value+0x150>
    1bf2:	5a c0       	rjmp	.+180    	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
    1bf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf8:	22 30       	cpi	r18, 0x02	; 2
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	71 f1       	breq	.+92     	; 0x1c5a <DIO_void_setPin_value+0x1a0>
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	9d 81       	ldd	r25, Y+5	; 0x05
    1c02:	83 30       	cpi	r24, 0x03	; 3
    1c04:	91 05       	cpc	r25, r1
    1c06:	e9 f1       	breq	.+122    	; 0x1c82 <DIO_void_setPin_value+0x1c8>
    1c08:	4f c0       	rjmp	.+158    	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
		{
		case PORTA_ID:
			SETBIT(PORTA, pin);
    1c0a:	ab e3       	ldi	r26, 0x3B	; 59
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	eb e3       	ldi	r30, 0x3B	; 59
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	48 2f       	mov	r20, r24
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	02 2e       	mov	r0, r18
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <DIO_void_setPin_value+0x16e>
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	0a 94       	dec	r0
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <DIO_void_setPin_value+0x16a>
    1c2c:	84 2b       	or	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	3b c0       	rjmp	.+118    	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
			break;
		case PORTB_ID:
			SETBIT(PORTB, pin);
    1c32:	a8 e3       	ldi	r26, 0x38	; 56
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e8 e3       	ldi	r30, 0x38	; 56
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	48 2f       	mov	r20, r24
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	02 2e       	mov	r0, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <DIO_void_setPin_value+0x196>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <DIO_void_setPin_value+0x192>
    1c54:	84 2b       	or	r24, r20
    1c56:	8c 93       	st	X, r24
    1c58:	27 c0       	rjmp	.+78     	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
			break;
		case PORTC_ID:
			SETBIT(PORTC, pin);
    1c5a:	a5 e3       	ldi	r26, 0x35	; 53
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e5 e3       	ldi	r30, 0x35	; 53
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	48 2f       	mov	r20, r24
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	02 2e       	mov	r0, r18
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <DIO_void_setPin_value+0x1be>
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	0a 94       	dec	r0
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <DIO_void_setPin_value+0x1ba>
    1c7c:	84 2b       	or	r24, r20
    1c7e:	8c 93       	st	X, r24
    1c80:	13 c0       	rjmp	.+38     	; 0x1ca8 <DIO_void_setPin_value+0x1ee>
			break;
		case PORTD_ID:
			SETBIT(PORTD, pin);
    1c82:	a2 e3       	ldi	r26, 0x32	; 50
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e2 e3       	ldi	r30, 0x32	; 50
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <DIO_void_setPin_value+0x1e6>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <DIO_void_setPin_value+0x1e2>
    1ca4:	84 2b       	or	r24, r20
    1ca6:	8c 93       	st	X, r24
	}//end else if
	else
	{

	}//end else
}//end DIO_void_setPin_value
    1ca8:	27 96       	adiw	r28, 0x07	; 7
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <DIO_void_setPin_direction>:
void DIO_void_setPin_direction(port_type port, pin_type pin,direction_type direction)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	27 97       	sbiw	r28, 0x07	; 7
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	6a 83       	std	Y+2, r22	; 0x02
    1cd2:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == INPUT)
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	88 23       	and	r24, r24
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <DIO_void_setPin_direction+0x22>
    1cda:	74 c0       	rjmp	.+232    	; 0x1dc4 <DIO_void_setPin_direction+0x10a>
	{
		switch(port)
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	3f 83       	std	Y+7, r19	; 0x07
    1ce4:	2e 83       	std	Y+6, r18	; 0x06
    1ce6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	91 05       	cpc	r25, r1
    1cee:	59 f1       	breq	.+86     	; 0x1d46 <DIO_void_setPin_direction+0x8c>
    1cf0:	2e 81       	ldd	r18, Y+6	; 0x06
    1cf2:	3f 81       	ldd	r19, Y+7	; 0x07
    1cf4:	22 30       	cpi	r18, 0x02	; 2
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	2c f4       	brge	.+10     	; 0x1d04 <DIO_void_setPin_direction+0x4a>
    1cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	69 f0       	breq	.+26     	; 0x1d1c <DIO_void_setPin_direction+0x62>
    1d02:	d2 c0       	rjmp	.+420    	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
    1d04:	2e 81       	ldd	r18, Y+6	; 0x06
    1d06:	3f 81       	ldd	r19, Y+7	; 0x07
    1d08:	22 30       	cpi	r18, 0x02	; 2
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	89 f1       	breq	.+98     	; 0x1d70 <DIO_void_setPin_direction+0xb6>
    1d0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d10:	9f 81       	ldd	r25, Y+7	; 0x07
    1d12:	83 30       	cpi	r24, 0x03	; 3
    1d14:	91 05       	cpc	r25, r1
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <DIO_void_setPin_direction+0x60>
    1d18:	40 c0       	rjmp	.+128    	; 0x1d9a <DIO_void_setPin_direction+0xe0>
    1d1a:	c6 c0       	rjmp	.+396    	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
		{
		case PORTA_ID:
			CLRBIT(DDRA, pin);
    1d1c:	aa e3       	ldi	r26, 0x3A	; 58
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	ea e3       	ldi	r30, 0x3A	; 58
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	48 2f       	mov	r20, r24
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	02 2e       	mov	r0, r18
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <DIO_void_setPin_direction+0x80>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	0a 94       	dec	r0
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <DIO_void_setPin_direction+0x7c>
    1d3e:	80 95       	com	r24
    1d40:	84 23       	and	r24, r20
    1d42:	8c 93       	st	X, r24
    1d44:	b1 c0       	rjmp	.+354    	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTB_ID:
			CLRBIT(DDRB, pin);
    1d46:	a7 e3       	ldi	r26, 0x37	; 55
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e7 e3       	ldi	r30, 0x37	; 55
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <DIO_void_setPin_direction+0xaa>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <DIO_void_setPin_direction+0xa6>
    1d68:	80 95       	com	r24
    1d6a:	84 23       	and	r24, r20
    1d6c:	8c 93       	st	X, r24
    1d6e:	9c c0       	rjmp	.+312    	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTC_ID:
			CLRBIT(DDRC, pin);
    1d70:	a4 e3       	ldi	r26, 0x34	; 52
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e4 e3       	ldi	r30, 0x34	; 52
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	02 2e       	mov	r0, r18
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <DIO_void_setPin_direction+0xd4>
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	0a 94       	dec	r0
    1d90:	e2 f7       	brpl	.-8      	; 0x1d8a <DIO_void_setPin_direction+0xd0>
    1d92:	80 95       	com	r24
    1d94:	84 23       	and	r24, r20
    1d96:	8c 93       	st	X, r24
    1d98:	87 c0       	rjmp	.+270    	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTD_ID:
			CLRBIT(DDRD, pin);
    1d9a:	a1 e3       	ldi	r26, 0x31	; 49
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e1 e3       	ldi	r30, 0x31	; 49
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_void_setPin_direction+0xfe>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_void_setPin_direction+0xfa>
    1dbc:	80 95       	com	r24
    1dbe:	84 23       	and	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	72 c0       	rjmp	.+228    	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
			break;
		}//end switch
	}//end if
	else if(direction == OUTPUT)
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <DIO_void_setPin_direction+0x112>
    1dca:	6e c0       	rjmp	.+220    	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
	{
		switch(port)
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3d 83       	std	Y+5, r19	; 0x05
    1dd4:	2c 83       	std	Y+4, r18	; 0x04
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	49 f1       	breq	.+82     	; 0x1e32 <DIO_void_setPin_direction+0x178>
    1de0:	2c 81       	ldd	r18, Y+4	; 0x04
    1de2:	3d 81       	ldd	r19, Y+5	; 0x05
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <DIO_void_setPin_direction+0x13a>
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	9d 81       	ldd	r25, Y+5	; 0x05
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <DIO_void_setPin_direction+0x150>
    1df2:	5a c0       	rjmp	.+180    	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
    1df4:	2c 81       	ldd	r18, Y+4	; 0x04
    1df6:	3d 81       	ldd	r19, Y+5	; 0x05
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	71 f1       	breq	.+92     	; 0x1e5a <DIO_void_setPin_direction+0x1a0>
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	91 05       	cpc	r25, r1
    1e06:	e9 f1       	breq	.+122    	; 0x1e82 <DIO_void_setPin_direction+0x1c8>
    1e08:	4f c0       	rjmp	.+158    	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
		{
		case PORTA_ID:
			SETBIT(DDRA, pin);
    1e0a:	aa e3       	ldi	r26, 0x3A	; 58
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	ea e3       	ldi	r30, 0x3A	; 58
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 2e       	mov	r0, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <DIO_void_setPin_direction+0x16e>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	0a 94       	dec	r0
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <DIO_void_setPin_direction+0x16a>
    1e2c:	84 2b       	or	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	3b c0       	rjmp	.+118    	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTB_ID:
			SETBIT(DDRB, pin);
    1e32:	a7 e3       	ldi	r26, 0x37	; 55
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e7 e3       	ldi	r30, 0x37	; 55
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <DIO_void_setPin_direction+0x196>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <DIO_void_setPin_direction+0x192>
    1e54:	84 2b       	or	r24, r20
    1e56:	8c 93       	st	X, r24
    1e58:	27 c0       	rjmp	.+78     	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTC_ID:
			SETBIT(DDRC, pin);
    1e5a:	a4 e3       	ldi	r26, 0x34	; 52
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e4 e3       	ldi	r30, 0x34	; 52
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <DIO_void_setPin_direction+0x1be>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <DIO_void_setPin_direction+0x1ba>
    1e7c:	84 2b       	or	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	13 c0       	rjmp	.+38     	; 0x1ea8 <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTD_ID:
			SETBIT(DDRD, pin);
    1e82:	a1 e3       	ldi	r26, 0x31	; 49
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e1 e3       	ldi	r30, 0x31	; 49
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <DIO_void_setPin_direction+0x1e6>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <DIO_void_setPin_direction+0x1e2>
    1ea4:	84 2b       	or	r24, r20
    1ea6:	8c 93       	st	X, r24
	}//end else if
	else
	{

	}//end else
}//end DIO_void_setPin_direction
    1ea8:	27 96       	adiw	r28, 0x07	; 7
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <DIO_value_type_getPin_value>:
value_type DIO_value_type_getPin_value(port_type port, pin_type pin)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <DIO_value_type_getPin_value+0x6>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <DIO_value_type_getPin_value+0x8>
    1ec2:	0f 92       	push	r0
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	8a 83       	std	Y+2, r24	; 0x02
    1eca:	6b 83       	std	Y+3, r22	; 0x03
	value_type ret_val;

	switch(port)
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	3d 83       	std	Y+5, r19	; 0x05
    1ed4:	2c 83       	std	Y+4, r18	; 0x04
    1ed6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ed8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eda:	41 30       	cpi	r20, 0x01	; 1
    1edc:	51 05       	cpc	r21, r1
    1ede:	41 f1       	breq	.+80     	; 0x1f30 <DIO_value_type_getPin_value+0x76>
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	82 30       	cpi	r24, 0x02	; 2
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	34 f4       	brge	.+12     	; 0x1ef6 <DIO_value_type_getPin_value+0x3c>
    1eea:	2c 81       	ldd	r18, Y+4	; 0x04
    1eec:	3d 81       	ldd	r19, Y+5	; 0x05
    1eee:	21 15       	cp	r18, r1
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	61 f0       	breq	.+24     	; 0x1f0c <DIO_value_type_getPin_value+0x52>
    1ef4:	52 c0       	rjmp	.+164    	; 0x1f9a <DIO_value_type_getPin_value+0xe0>
    1ef6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ef8:	5d 81       	ldd	r21, Y+5	; 0x05
    1efa:	42 30       	cpi	r20, 0x02	; 2
    1efc:	51 05       	cpc	r21, r1
    1efe:	51 f1       	breq	.+84     	; 0x1f54 <DIO_value_type_getPin_value+0x9a>
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	83 30       	cpi	r24, 0x03	; 3
    1f06:	91 05       	cpc	r25, r1
    1f08:	b9 f1       	breq	.+110    	; 0x1f78 <DIO_value_type_getPin_value+0xbe>
    1f0a:	47 c0       	rjmp	.+142    	; 0x1f9a <DIO_value_type_getPin_value+0xe0>
	{
	case PORTA_ID:
		ret_val = GETBIT(PINA, pin);
    1f0c:	e9 e3       	ldi	r30, 0x39	; 57
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a9 01       	movw	r20, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_value_type_getPin_value+0x6a>
    1f20:	55 95       	asr	r21
    1f22:	47 95       	ror	r20
    1f24:	8a 95       	dec	r24
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <DIO_value_type_getPin_value+0x66>
    1f28:	ca 01       	movw	r24, r20
    1f2a:	81 70       	andi	r24, 0x01	; 1
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	35 c0       	rjmp	.+106    	; 0x1f9a <DIO_value_type_getPin_value+0xe0>
		break;
	case PORTB_ID:
		ret_val = GETBIT(PINB, pin);
    1f30:	e6 e3       	ldi	r30, 0x36	; 54
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a9 01       	movw	r20, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <DIO_value_type_getPin_value+0x8e>
    1f44:	55 95       	asr	r21
    1f46:	47 95       	ror	r20
    1f48:	8a 95       	dec	r24
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <DIO_value_type_getPin_value+0x8a>
    1f4c:	ca 01       	movw	r24, r20
    1f4e:	81 70       	andi	r24, 0x01	; 1
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	23 c0       	rjmp	.+70     	; 0x1f9a <DIO_value_type_getPin_value+0xe0>
		break;
	case PORTC_ID:
		ret_val = GETBIT(PINC, pin);
    1f54:	e3 e3       	ldi	r30, 0x33	; 51
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a9 01       	movw	r20, r18
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <DIO_value_type_getPin_value+0xb2>
    1f68:	55 95       	asr	r21
    1f6a:	47 95       	ror	r20
    1f6c:	8a 95       	dec	r24
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <DIO_value_type_getPin_value+0xae>
    1f70:	ca 01       	movw	r24, r20
    1f72:	81 70       	andi	r24, 0x01	; 1
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	11 c0       	rjmp	.+34     	; 0x1f9a <DIO_value_type_getPin_value+0xe0>
		break;
	case PORTD_ID:
		ret_val = GETBIT(PIND, pin);
    1f78:	e0 e3       	ldi	r30, 0x30	; 48
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	88 2f       	mov	r24, r24
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a9 01       	movw	r20, r18
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <DIO_value_type_getPin_value+0xd6>
    1f8c:	55 95       	asr	r21
    1f8e:	47 95       	ror	r20
    1f90:	8a 95       	dec	r24
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <DIO_value_type_getPin_value+0xd2>
    1f94:	ca 01       	movw	r24, r20
    1f96:	81 70       	andi	r24, 0x01	; 1
    1f98:	89 83       	std	Y+1, r24	; 0x01
		break;
	}//end switch

	return ret_val;
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
}//end DIO_value_type_getPin_value
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <DIO_void_setPort_direction>:
void DIO_void_setPort_direction(port_type port, u8 direction)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <DIO_void_setPort_direction+0x6>
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <DIO_void_setPort_direction+0x8>
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	3c 83       	std	Y+4, r19	; 0x04
    1fc4:	2b 83       	std	Y+3, r18	; 0x03
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	91 05       	cpc	r25, r1
    1fce:	d1 f0       	breq	.+52     	; 0x2004 <DIO_void_setPort_direction+0x58>
    1fd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd4:	22 30       	cpi	r18, 0x02	; 2
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	2c f4       	brge	.+10     	; 0x1fe4 <DIO_void_setPort_direction+0x38>
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	61 f0       	breq	.+24     	; 0x1ffa <DIO_void_setPort_direction+0x4e>
    1fe2:	1e c0       	rjmp	.+60     	; 0x2020 <DIO_void_setPort_direction+0x74>
    1fe4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	31 05       	cpc	r19, r1
    1fec:	81 f0       	breq	.+32     	; 0x200e <DIO_void_setPort_direction+0x62>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	83 30       	cpi	r24, 0x03	; 3
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	81 f0       	breq	.+32     	; 0x2018 <DIO_void_setPort_direction+0x6c>
    1ff8:	13 c0       	rjmp	.+38     	; 0x2020 <DIO_void_setPort_direction+0x74>
	{
	case PORTA_ID:
		DDRA = direction;
    1ffa:	ea e3       	ldi	r30, 0x3A	; 58
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	80 83       	st	Z, r24
    2002:	0e c0       	rjmp	.+28     	; 0x2020 <DIO_void_setPort_direction+0x74>
		break;
	case PORTB_ID:
		DDRB = direction;
    2004:	e7 e3       	ldi	r30, 0x37	; 55
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	80 83       	st	Z, r24
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <DIO_void_setPort_direction+0x74>
		break;
	case PORTC_ID:
		DDRC = direction;
    200e:	e4 e3       	ldi	r30, 0x34	; 52
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	80 83       	st	Z, r24
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <DIO_void_setPort_direction+0x74>
		break;
	case PORTD_ID:
		DDRD = direction;
    2018:	e1 e3       	ldi	r30, 0x31	; 49
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	80 83       	st	Z, r24
		break;
	}//end switch

}//end DIO_void_setPort_direction
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <DIO_void_setPort_value>:
void DIO_void_setPort_value(port_type port, u8 value)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <DIO_void_setPort_value+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <DIO_void_setPort_value+0x8>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	3c 83       	std	Y+4, r19	; 0x04
    2046:	2b 83       	std	Y+3, r18	; 0x03
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	91 05       	cpc	r25, r1
    2050:	d1 f0       	breq	.+52     	; 0x2086 <DIO_void_setPort_value+0x58>
    2052:	2b 81       	ldd	r18, Y+3	; 0x03
    2054:	3c 81       	ldd	r19, Y+4	; 0x04
    2056:	22 30       	cpi	r18, 0x02	; 2
    2058:	31 05       	cpc	r19, r1
    205a:	2c f4       	brge	.+10     	; 0x2066 <DIO_void_setPort_value+0x38>
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	61 f0       	breq	.+24     	; 0x207c <DIO_void_setPort_value+0x4e>
    2064:	1e c0       	rjmp	.+60     	; 0x20a2 <DIO_void_setPort_value+0x74>
    2066:	2b 81       	ldd	r18, Y+3	; 0x03
    2068:	3c 81       	ldd	r19, Y+4	; 0x04
    206a:	22 30       	cpi	r18, 0x02	; 2
    206c:	31 05       	cpc	r19, r1
    206e:	81 f0       	breq	.+32     	; 0x2090 <DIO_void_setPort_value+0x62>
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	83 30       	cpi	r24, 0x03	; 3
    2076:	91 05       	cpc	r25, r1
    2078:	81 f0       	breq	.+32     	; 0x209a <DIO_void_setPort_value+0x6c>
    207a:	13 c0       	rjmp	.+38     	; 0x20a2 <DIO_void_setPort_value+0x74>
	{
	case PORTA_ID:
		PORTA = value;
    207c:	eb e3       	ldi	r30, 0x3B	; 59
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	80 83       	st	Z, r24
    2084:	0e c0       	rjmp	.+28     	; 0x20a2 <DIO_void_setPort_value+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    2086:	e8 e3       	ldi	r30, 0x38	; 56
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	80 83       	st	Z, r24
    208e:	09 c0       	rjmp	.+18     	; 0x20a2 <DIO_void_setPort_value+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    2090:	e5 e3       	ldi	r30, 0x35	; 53
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	80 83       	st	Z, r24
    2098:	04 c0       	rjmp	.+8      	; 0x20a2 <DIO_void_setPort_value+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    209a:	e2 e3       	ldi	r30, 0x32	; 50
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	80 83       	st	Z, r24
		break;
	}//end switch
}//end DIO_void_setPort_value
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <DC_voidInitialize>:


u8 DC_GenVar_Detect_direction ;

void DC_voidInitialize(void)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
	//configure PB1,PB2(Motor pins) as output pins
	DIO_void_setPin_direction(DC_PORT, DC_POSITIVE_PIN,OUTPUT);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	63 e0       	ldi	r22, 0x03	; 3
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	DIO_void_setPin_direction(DC_PORT, DC_NEGATIVE_PIN,OUTPUT);
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	62 e0       	ldi	r22, 0x02	; 2
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
}
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <DC_voidRotate>:

/******************************************************************************
 * function to rotate the motor according to the required direction sent to it*
 ******************************************************************************/
void DC_voidRotate(dc_direction direction)
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	0f 92       	push	r0
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	89 83       	std	Y+1, r24	; 0x01
	if(direction == CLK_WISE)
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	88 23       	and	r24, r24
    20e2:	41 f4       	brne	.+16     	; 0x20f4 <DC_voidRotate+0x22>
	{
		//we using pwm so first pin is fixed to pin oc0 we can't control it here
		//Rotate clock wise
	//	DIO_void_setPin_value(DC_PORT, DC_POSITIVE_PIN, HIGH);
		DIO_void_setPin_value(DC_PORT, DC_NEGATIVE_PIN, LOW);
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	62 e0       	ldi	r22, 0x02	; 2
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
		DC_GenVar_Detect_direction = CLK_WISE ;
    20ee:	10 92 9f 01 	sts	0x019F, r1
    20f2:	0b c0       	rjmp	.+22     	; 0x210a <DC_voidRotate+0x38>
	}//end if
	else if(direction == ANTI_CLK_WISE)
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	81 30       	cpi	r24, 0x01	; 1
    20f8:	41 f4       	brne	.+16     	; 0x210a <DC_voidRotate+0x38>
	{
		//Rotate anti-clock wise
	//	DIO_void_setPin_value(DC_PORT, DC_POSITIVE_PIN, LOW);
		DIO_void_setPin_value(DC_PORT, DC_NEGATIVE_PIN, HIGH);
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	62 e0       	ldi	r22, 0x02	; 2
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
		DC_GenVar_Detect_direction = ANTI_CLK_WISE ;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	80 93 9f 01 	sts	0x019F, r24
	}//end else if
	else
	{
		//do nothing
	}//end else
}//end DC_voidRotate
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <DC_voidSetSpeed>:

/*********************************************************************
 * function to set the motor speed according to duty cycle sent to it*
 *********************************************************************/
void DC_voidSetSpeed(u8 Copy_DutyCycle)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	0f 92       	push	r0
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	89 83       	std	Y+1, r24	; 0x01
	//initialize the timer to work on PWM mode

	TIMER0_void_Intialize(TIMER0_PHASECORRECT_MODE,Prescaller_1024,TIMER0_NONINVERTING_PWM_OC0);
    211e:	83 e0       	ldi	r24, 0x03	; 3
    2120:	65 e0       	ldi	r22, 0x05	; 5
    2122:	42 e0       	ldi	r20, 0x02	; 2
    2124:	0e 94 57 08 	call	0x10ae	; 0x10ae <TIMER0_void_Intialize>
	// initialise phase correct& prescaller 1024 , non inverting mode
	if (DC_GenVar_Detect_direction == CLK_WISE)
    2128:	80 91 9f 01 	lds	r24, 0x019F
    212c:	88 23       	and	r24, r24
    212e:	29 f4       	brne	.+10     	; 0x213a <DC_voidSetSpeed+0x28>
	{
		TIMER0_void_PhaseCorrectPWM(Copy_DutyCycle,TIMER0_NONINVERTING_PWM_OC0);
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	62 e0       	ldi	r22, 0x02	; 2
    2134:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <TIMER0_void_PhaseCorrectPWM>
    2138:	0a c0       	rjmp	.+20     	; 0x214e <DC_voidSetSpeed+0x3c>
	// set the running time so we need the other connect to set to low so that it can work
	}
	else if (DC_GenVar_Detect_direction == ANTI_CLK_WISE)
    213a:	80 91 9f 01 	lds	r24, 0x019F
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	31 f4       	brne	.+12     	; 0x214e <DC_voidSetSpeed+0x3c>
	{
		TIMER0_void_PhaseCorrectPWM(100 - Copy_DutyCycle,TIMER0_NONINVERTING_PWM_OC0);
    2142:	84 e6       	ldi	r24, 0x64	; 100
    2144:	99 81       	ldd	r25, Y+1	; 0x01
    2146:	89 1b       	sub	r24, r25
    2148:	62 e0       	ldi	r22, 0x02	; 2
    214a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <TIMER0_void_PhaseCorrectPWM>
	// set the running time so we need the other connect to set to HIGH so that it can work
	}

}//end DC_voidSpeed
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <LED_void_LED_Direction>:
#include "LED_interface.h"



void LED_void_LED_Direction(port_type LED_Port, pin_type LED_Pin)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <LED_void_LED_Direction+0x6>
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	6a 83       	std	Y+2, r22	; 0x02
	DIO_void_setPin_direction(LED_Port, LED_Pin, OUTPUT);
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	6a 81       	ldd	r22, Y+2	; 0x02
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <LED_void_LEDOn>:


void LED_void_LEDOn(port_type LED_Port, pin_type LED_Pin, led_connection con)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <LED_void_LEDOn+0x6>
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	6a 83       	std	Y+2, r22	; 0x02
    2188:	4b 83       	std	Y+3, r20	; 0x03
    if (con == FORWARD)
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	88 23       	and	r24, r24
    218e:	31 f4       	brne	.+12     	; 0x219c <LED_void_LEDOn+0x24>
    {
        DIO_void_setPin_value(LED_Port, LED_Pin, HIGH);
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	6a 81       	ldd	r22, Y+2	; 0x02
    2194:	41 e0       	ldi	r20, 0x01	; 1
    2196:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
    219a:	05 c0       	rjmp	.+10     	; 0x21a6 <LED_void_LEDOn+0x2e>
    }
    else
    {
        DIO_void_setPin_value(LED_Port, LED_Pin, LOW);   
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	6a 81       	ldd	r22, Y+2	; 0x02
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
    }
    
}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <LED_void_LEDOff>:

void LED_void_LEDOff(port_type LED_Port, pin_type LED_Pin, led_connection con)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <LED_void_LEDOff+0x6>
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	6a 83       	std	Y+2, r22	; 0x02
    21c2:	4b 83       	std	Y+3, r20	; 0x03
    if (con == FORWARD)
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	88 23       	and	r24, r24
    21c8:	31 f4       	brne	.+12     	; 0x21d6 <LED_void_LEDOff+0x24>
    {
        DIO_void_setPin_value(LED_Port, LED_Pin, LOW);
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	6a 81       	ldd	r22, Y+2	; 0x02
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
    21d4:	05 c0       	rjmp	.+10     	; 0x21e0 <LED_void_LEDOff+0x2e>
    }
    else
    {
        DIO_void_setPin_value(LED_Port, LED_Pin, HIGH);   
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	6a 81       	ldd	r22, Y+2	; 0x02
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
    }
}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <LED_void_LEDToggle>:

void LED_void_LEDToggle(port_type LED_Port, pin_type LED_Pin)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <LED_void_LEDToggle+0x6>
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	89 83       	std	Y+1, r24	; 0x01
    21f8:	6a 83       	std	Y+2, r22	; 0x02
    
   // DIO_void_TogPin(LED_Port, LED_Pin);
}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <LED_void_LEDINT>:
void LED_void_LEDINT(u8 Duty_Cycle)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	0f 92       	push	r0
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_void_FastPWM( Duty_Cycle , TIMER0_INVERTING_PWM_OC0, Prescaller_8);
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	63 e0       	ldi	r22, 0x03	; 3
    2214:	42 e0       	ldi	r20, 0x02	; 2
    2216:	0e 94 90 0a 	call	0x1520	; 0x1520 <TIMER0_void_FastPWM>
}
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <LCD_void_init>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "../../LIB/BIT_Math.h"
#include <avr/delay.h>

void LCD_void_init(lcd_mode mode)
{
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	cd 58       	subi	r28, 0x8D	; 141
    2230:	d0 40       	sbci	r29, 0x00	; 0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	fe 01       	movw	r30, r28
    223e:	e3 57       	subi	r30, 0x73	; 115
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 83       	st	Z, r24
	DIO_void_setPin_direction(PORTA_ID, LCD_RS_PIN , OUTPUT);
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	61 e0       	ldi	r22, 0x01	; 1
    2248:	41 e0       	ldi	r20, 0x01	; 1
    224a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTA_ID, LCD_E_PIN , OUTPUT);
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	62 e0       	ldi	r22, 0x02	; 2
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
if(mode == LCD_enum_8BITS_MODE)
    2258:	fe 01       	movw	r30, r28
    225a:	e3 57       	subi	r30, 0x73	; 115
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	09 f0       	breq	.+2      	; 0x2266 <LCD_void_init+0x44>
    2264:	db c2       	rjmp	.+1462   	; 0x281c <LCD_void_init+0x5fa>
	{
		// port pins direction = output
		DIO_void_setPort_direction(LCD_8BITS_DATA_PORT,0xff);
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	6f ef       	ldi	r22, 0xFF	; 255
    226a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_void_setPort_direction>
    226e:	fe 01       	movw	r30, r28
    2270:	e7 57       	subi	r30, 0x77	; 119
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 ef       	ldi	r26, 0xF0	; 240
    227a:	b1 e4       	ldi	r27, 0x41	; 65
    227c:	80 83       	st	Z, r24
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	a2 83       	std	Z+2, r26	; 0x02
    2282:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	8e 01       	movw	r16, r28
    2286:	0b 57       	subi	r16, 0x7B	; 123
    2288:	1f 4f       	sbci	r17, 0xFF	; 255
    228a:	fe 01       	movw	r30, r28
    228c:	e7 57       	subi	r30, 0x77	; 119
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a ef       	ldi	r20, 0xFA	; 250
    229e:	54 e4       	ldi	r21, 0x44	; 68
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	80 83       	st	Z, r24
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	a2 83       	std	Z+2, r26	; 0x02
    22b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b2:	fe 01       	movw	r30, r28
    22b4:	eb 57       	subi	r30, 0x7B	; 123
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	60 81       	ld	r22, Z
    22ba:	71 81       	ldd	r23, Z+1	; 0x01
    22bc:	82 81       	ldd	r24, Z+2	; 0x02
    22be:	93 81       	ldd	r25, Z+3	; 0x03
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	44 f4       	brge	.+16     	; 0x22e0 <LCD_void_init+0xbe>
		__ticks = 1;
    22d0:	fe 01       	movw	r30, r28
    22d2:	ed 57       	subi	r30, 0x7D	; 125
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	80 83       	st	Z, r24
    22de:	64 c0       	rjmp	.+200    	; 0x23a8 <LCD_void_init+0x186>
	else if (__tmp > 65535)
    22e0:	fe 01       	movw	r30, r28
    22e2:	eb 57       	subi	r30, 0x7B	; 123
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	3f ef       	ldi	r19, 0xFF	; 255
    22f2:	4f e7       	ldi	r20, 0x7F	; 127
    22f4:	57 e4       	ldi	r21, 0x47	; 71
    22f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	0c f0       	brlt	.+2      	; 0x2300 <LCD_void_init+0xde>
    22fe:	43 c0       	rjmp	.+134    	; 0x2386 <LCD_void_init+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2300:	fe 01       	movw	r30, r28
    2302:	e7 57       	subi	r30, 0x77	; 119
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8e 01       	movw	r16, r28
    2320:	0d 57       	subi	r16, 0x7D	; 125
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	f8 01       	movw	r30, r16
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    2336:	1f c0       	rjmp	.+62     	; 0x2376 <LCD_void_init+0x154>
    2338:	fe 01       	movw	r30, r28
    233a:	ef 57       	subi	r30, 0x7F	; 127
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	88 ec       	ldi	r24, 0xC8	; 200
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	91 83       	std	Z+1, r25	; 0x01
    2344:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2346:	fe 01       	movw	r30, r28
    2348:	ef 57       	subi	r30, 0x7F	; 127
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_void_init+0x12e>
    2354:	fe 01       	movw	r30, r28
    2356:	ef 57       	subi	r30, 0x7F	; 127
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	de 01       	movw	r26, r28
    2360:	ad 57       	subi	r26, 0x7D	; 125
    2362:	bf 4f       	sbci	r27, 0xFF	; 255
    2364:	fe 01       	movw	r30, r28
    2366:	ed 57       	subi	r30, 0x7D	; 125
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	11 96       	adiw	r26, 0x01	; 1
    2372:	9c 93       	st	X, r25
    2374:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2376:	fe 01       	movw	r30, r28
    2378:	ed 57       	subi	r30, 0x7D	; 125
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	91 81       	ldd	r25, Z+1	; 0x01
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	d1 f6       	brne	.-76     	; 0x2338 <LCD_void_init+0x116>
    2384:	27 c0       	rjmp	.+78     	; 0x23d4 <LCD_void_init+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2386:	8e 01       	movw	r16, r28
    2388:	0d 57       	subi	r16, 0x7D	; 125
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	fe 01       	movw	r30, r28
    238e:	eb 57       	subi	r30, 0x7B	; 123
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	60 81       	ld	r22, Z
    2394:	71 81       	ldd	r23, Z+1	; 0x01
    2396:	82 81       	ldd	r24, Z+2	; 0x02
    2398:	93 81       	ldd	r25, Z+3	; 0x03
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	f8 01       	movw	r30, r16
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
    23a8:	de 01       	movw	r26, r28
    23aa:	a1 58       	subi	r26, 0x81	; 129
    23ac:	bf 4f       	sbci	r27, 0xFF	; 255
    23ae:	fe 01       	movw	r30, r28
    23b0:	ed 57       	subi	r30, 0x7D	; 125
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	91 81       	ldd	r25, Z+1	; 0x01
    23b8:	8d 93       	st	X+, r24
    23ba:	9c 93       	st	X, r25
    23bc:	fe 01       	movw	r30, r28
    23be:	e1 58       	subi	r30, 0x81	; 129
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <LCD_void_init+0x1a4>
    23ca:	fe 01       	movw	r30, r28
    23cc:	e1 58       	subi	r30, 0x81	; 129
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
		//lcd init commands

		_delay_ms(30);
		LCD_void_send_command(0x38);
    23d4:	88 e3       	ldi	r24, 0x38	; 56
    23d6:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
    23da:	fe 01       	movw	r30, r28
    23dc:	e5 58       	subi	r30, 0x85	; 133
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a0 e8       	ldi	r26, 0x80	; 128
    23e6:	bf e3       	ldi	r27, 0x3F	; 63
    23e8:	80 83       	st	Z, r24
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	a2 83       	std	Z+2, r26	; 0x02
    23ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f0:	8e 01       	movw	r16, r28
    23f2:	09 58       	subi	r16, 0x89	; 137
    23f4:	1f 4f       	sbci	r17, 0xFF	; 255
    23f6:	fe 01       	movw	r30, r28
    23f8:	e5 58       	subi	r30, 0x85	; 133
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	4a ef       	ldi	r20, 0xFA	; 250
    240a:	54 e4       	ldi	r21, 0x44	; 68
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	f8 01       	movw	r30, r16
    2416:	80 83       	st	Z, r24
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	a2 83       	std	Z+2, r26	; 0x02
    241c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    241e:	fe 01       	movw	r30, r28
    2420:	e9 58       	subi	r30, 0x89	; 137
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e8       	ldi	r20, 0x80	; 128
    2432:	5f e3       	ldi	r21, 0x3F	; 63
    2434:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2438:	88 23       	and	r24, r24
    243a:	44 f4       	brge	.+16     	; 0x244c <LCD_void_init+0x22a>
		__ticks = 1;
    243c:	fe 01       	movw	r30, r28
    243e:	eb 58       	subi	r30, 0x8B	; 139
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	80 83       	st	Z, r24
    244a:	64 c0       	rjmp	.+200    	; 0x2514 <LCD_void_init+0x2f2>
	else if (__tmp > 65535)
    244c:	fe 01       	movw	r30, r28
    244e:	e9 58       	subi	r30, 0x89	; 137
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	60 81       	ld	r22, Z
    2454:	71 81       	ldd	r23, Z+1	; 0x01
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	93 81       	ldd	r25, Z+3	; 0x03
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	0c f0       	brlt	.+2      	; 0x246c <LCD_void_init+0x24a>
    246a:	43 c0       	rjmp	.+134    	; 0x24f2 <LCD_void_init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246c:	fe 01       	movw	r30, r28
    246e:	e5 58       	subi	r30, 0x85	; 133
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	8e 01       	movw	r16, r28
    248c:	0b 58       	subi	r16, 0x8B	; 139
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	f8 01       	movw	r30, r16
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
    24a2:	1f c0       	rjmp	.+62     	; 0x24e2 <LCD_void_init+0x2c0>
    24a4:	fe 01       	movw	r30, r28
    24a6:	ed 58       	subi	r30, 0x8D	; 141
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	88 ec       	ldi	r24, 0xC8	; 200
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	80 83       	st	Z, r24
    24b2:	fe 01       	movw	r30, r28
    24b4:	ed 58       	subi	r30, 0x8D	; 141
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <LCD_void_init+0x29a>
    24c0:	fe 01       	movw	r30, r28
    24c2:	ed 58       	subi	r30, 0x8D	; 141
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ca:	de 01       	movw	r26, r28
    24cc:	ab 58       	subi	r26, 0x8B	; 139
    24ce:	bf 4f       	sbci	r27, 0xFF	; 255
    24d0:	fe 01       	movw	r30, r28
    24d2:	eb 58       	subi	r30, 0x8B	; 139
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	11 96       	adiw	r26, 0x01	; 1
    24de:	9c 93       	st	X, r25
    24e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e2:	fe 01       	movw	r30, r28
    24e4:	eb 58       	subi	r30, 0x8B	; 139
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	80 81       	ld	r24, Z
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	d1 f6       	brne	.-76     	; 0x24a4 <LCD_void_init+0x282>
    24f0:	27 c0       	rjmp	.+78     	; 0x2540 <LCD_void_init+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	8e 01       	movw	r16, r28
    24f4:	0b 58       	subi	r16, 0x8B	; 139
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	fe 01       	movw	r30, r28
    24fa:	e9 58       	subi	r30, 0x89	; 137
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	f8 01       	movw	r30, r16
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	80 83       	st	Z, r24
    2514:	de 01       	movw	r26, r28
    2516:	af 58       	subi	r26, 0x8F	; 143
    2518:	bf 4f       	sbci	r27, 0xFF	; 255
    251a:	fe 01       	movw	r30, r28
    251c:	eb 58       	subi	r30, 0x8B	; 139
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	91 81       	ldd	r25, Z+1	; 0x01
    2524:	8d 93       	st	X+, r24
    2526:	9c 93       	st	X, r25
    2528:	fe 01       	movw	r30, r28
    252a:	ef 58       	subi	r30, 0x8F	; 143
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <LCD_void_init+0x310>
    2536:	fe 01       	movw	r30, r28
    2538:	ef 58       	subi	r30, 0x8F	; 143
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	80 83       	st	Z, r24
		_delay_ms(1);
		LCD_void_send_command(0x0E);
    2540:	8e e0       	ldi	r24, 0x0E	; 14
    2542:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
    2546:	fe 01       	movw	r30, r28
    2548:	e3 59       	subi	r30, 0x93	; 147
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e8       	ldi	r26, 0x80	; 128
    2552:	bf e3       	ldi	r27, 0x3F	; 63
    2554:	80 83       	st	Z, r24
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	a2 83       	std	Z+2, r26	; 0x02
    255a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	8e 01       	movw	r16, r28
    255e:	07 59       	subi	r16, 0x97	; 151
    2560:	1f 4f       	sbci	r17, 0xFF	; 255
    2562:	fe 01       	movw	r30, r28
    2564:	e3 59       	subi	r30, 0x93	; 147
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a ef       	ldi	r20, 0xFA	; 250
    2576:	54 e4       	ldi	r21, 0x44	; 68
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	f8 01       	movw	r30, r16
    2582:	80 83       	st	Z, r24
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	a2 83       	std	Z+2, r26	; 0x02
    2588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    258a:	fe 01       	movw	r30, r28
    258c:	e7 59       	subi	r30, 0x97	; 151
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	44 f4       	brge	.+16     	; 0x25b8 <LCD_void_init+0x396>
		__ticks = 1;
    25a8:	fe 01       	movw	r30, r28
    25aa:	e9 59       	subi	r30, 0x99	; 153
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
    25b6:	64 c0       	rjmp	.+200    	; 0x2680 <LCD_void_init+0x45e>
	else if (__tmp > 65535)
    25b8:	fe 01       	movw	r30, r28
    25ba:	e7 59       	subi	r30, 0x97	; 151
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	0c f0       	brlt	.+2      	; 0x25d8 <LCD_void_init+0x3b6>
    25d6:	43 c0       	rjmp	.+134    	; 0x265e <LCD_void_init+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d8:	fe 01       	movw	r30, r28
    25da:	e3 59       	subi	r30, 0x93	; 147
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e2       	ldi	r20, 0x20	; 32
    25ec:	51 e4       	ldi	r21, 0x41	; 65
    25ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	8e 01       	movw	r16, r28
    25f8:	09 59       	subi	r16, 0x99	; 153
    25fa:	1f 4f       	sbci	r17, 0xFF	; 255
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	f8 01       	movw	r30, r16
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
    260e:	1f c0       	rjmp	.+62     	; 0x264e <LCD_void_init+0x42c>
    2610:	fe 01       	movw	r30, r28
    2612:	eb 59       	subi	r30, 0x9B	; 155
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	88 ec       	ldi	r24, 0xC8	; 200
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
    261e:	fe 01       	movw	r30, r28
    2620:	eb 59       	subi	r30, 0x9B	; 155
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_void_init+0x406>
    262c:	fe 01       	movw	r30, r28
    262e:	eb 59       	subi	r30, 0x9B	; 155
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2636:	de 01       	movw	r26, r28
    2638:	a9 59       	subi	r26, 0x99	; 153
    263a:	bf 4f       	sbci	r27, 0xFF	; 255
    263c:	fe 01       	movw	r30, r28
    263e:	e9 59       	subi	r30, 0x99	; 153
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	91 81       	ldd	r25, Z+1	; 0x01
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	11 96       	adiw	r26, 0x01	; 1
    264a:	9c 93       	st	X, r25
    264c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264e:	fe 01       	movw	r30, r28
    2650:	e9 59       	subi	r30, 0x99	; 153
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	d1 f6       	brne	.-76     	; 0x2610 <LCD_void_init+0x3ee>
    265c:	27 c0       	rjmp	.+78     	; 0x26ac <LCD_void_init+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	8e 01       	movw	r16, r28
    2660:	09 59       	subi	r16, 0x99	; 153
    2662:	1f 4f       	sbci	r17, 0xFF	; 255
    2664:	fe 01       	movw	r30, r28
    2666:	e7 59       	subi	r30, 0x97	; 151
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	60 81       	ld	r22, Z
    266c:	71 81       	ldd	r23, Z+1	; 0x01
    266e:	82 81       	ldd	r24, Z+2	; 0x02
    2670:	93 81       	ldd	r25, Z+3	; 0x03
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	f8 01       	movw	r30, r16
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
    2680:	de 01       	movw	r26, r28
    2682:	ad 59       	subi	r26, 0x9D	; 157
    2684:	bf 4f       	sbci	r27, 0xFF	; 255
    2686:	fe 01       	movw	r30, r28
    2688:	e9 59       	subi	r30, 0x99	; 153
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	91 81       	ldd	r25, Z+1	; 0x01
    2690:	8d 93       	st	X+, r24
    2692:	9c 93       	st	X, r25
    2694:	fe 01       	movw	r30, r28
    2696:	ed 59       	subi	r30, 0x9D	; 157
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <LCD_void_init+0x47c>
    26a2:	fe 01       	movw	r30, r28
    26a4:	ed 59       	subi	r30, 0x9D	; 157
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
		_delay_ms(1);
		LCD_void_send_command(0x01);
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
    26b2:	fe 01       	movw	r30, r28
    26b4:	e1 5a       	subi	r30, 0xA1	; 161
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e4       	ldi	r26, 0x40	; 64
    26be:	b0 e4       	ldi	r27, 0x40	; 64
    26c0:	80 83       	st	Z, r24
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	a2 83       	std	Z+2, r26	; 0x02
    26c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c8:	8e 01       	movw	r16, r28
    26ca:	05 5a       	subi	r16, 0xA5	; 165
    26cc:	1f 4f       	sbci	r17, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	e1 5a       	subi	r30, 0xA1	; 161
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a ef       	ldi	r20, 0xFA	; 250
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	f8 01       	movw	r30, r16
    26ee:	80 83       	st	Z, r24
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	a2 83       	std	Z+2, r26	; 0x02
    26f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26f6:	fe 01       	movw	r30, r28
    26f8:	e5 5a       	subi	r30, 0xA5	; 165
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e8       	ldi	r20, 0x80	; 128
    270a:	5f e3       	ldi	r21, 0x3F	; 63
    270c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2710:	88 23       	and	r24, r24
    2712:	44 f4       	brge	.+16     	; 0x2724 <LCD_void_init+0x502>
		__ticks = 1;
    2714:	fe 01       	movw	r30, r28
    2716:	e7 5a       	subi	r30, 0xA7	; 167
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
    2722:	64 c0       	rjmp	.+200    	; 0x27ec <LCD_void_init+0x5ca>
	else if (__tmp > 65535)
    2724:	fe 01       	movw	r30, r28
    2726:	e5 5a       	subi	r30, 0xA5	; 165
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	3f ef       	ldi	r19, 0xFF	; 255
    2736:	4f e7       	ldi	r20, 0x7F	; 127
    2738:	57 e4       	ldi	r21, 0x47	; 71
    273a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    273e:	18 16       	cp	r1, r24
    2740:	0c f0       	brlt	.+2      	; 0x2744 <LCD_void_init+0x522>
    2742:	43 c0       	rjmp	.+134    	; 0x27ca <LCD_void_init+0x5a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	fe 01       	movw	r30, r28
    2746:	e1 5a       	subi	r30, 0xA1	; 161
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e2       	ldi	r20, 0x20	; 32
    2758:	51 e4       	ldi	r21, 0x41	; 65
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	8e 01       	movw	r16, r28
    2764:	07 5a       	subi	r16, 0xA7	; 167
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
    2768:	bc 01       	movw	r22, r24
    276a:	cd 01       	movw	r24, r26
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	f8 01       	movw	r30, r16
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	80 83       	st	Z, r24
    277a:	1f c0       	rjmp	.+62     	; 0x27ba <LCD_void_init+0x598>
    277c:	fe 01       	movw	r30, r28
    277e:	e9 5a       	subi	r30, 0xA9	; 169
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	fe 01       	movw	r30, r28
    278c:	e9 5a       	subi	r30, 0xA9	; 169
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_void_init+0x572>
    2798:	fe 01       	movw	r30, r28
    279a:	e9 5a       	subi	r30, 0xA9	; 169
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a2:	de 01       	movw	r26, r28
    27a4:	a7 5a       	subi	r26, 0xA7	; 167
    27a6:	bf 4f       	sbci	r27, 0xFF	; 255
    27a8:	fe 01       	movw	r30, r28
    27aa:	e7 5a       	subi	r30, 0xA7	; 167
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	11 96       	adiw	r26, 0x01	; 1
    27b6:	9c 93       	st	X, r25
    27b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	fe 01       	movw	r30, r28
    27bc:	e7 5a       	subi	r30, 0xA7	; 167
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	d1 f6       	brne	.-76     	; 0x277c <LCD_void_init+0x55a>
    27c8:	53 c3       	rjmp	.+1702   	; 0x2e70 <LCD_void_init+0xc4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ca:	8e 01       	movw	r16, r28
    27cc:	07 5a       	subi	r16, 0xA7	; 167
    27ce:	1f 4f       	sbci	r17, 0xFF	; 255
    27d0:	fe 01       	movw	r30, r28
    27d2:	e5 5a       	subi	r30, 0xA5	; 165
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	f8 01       	movw	r30, r16
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
    27ec:	de 01       	movw	r26, r28
    27ee:	ab 5a       	subi	r26, 0xAB	; 171
    27f0:	bf 4f       	sbci	r27, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	e7 5a       	subi	r30, 0xA7	; 167
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	11 96       	adiw	r26, 0x01	; 1
    27fe:	9c 93       	st	X, r25
    2800:	8e 93       	st	-X, r24
    2802:	fe 01       	movw	r30, r28
    2804:	eb 5a       	subi	r30, 0xAB	; 171
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <LCD_void_init+0x5ea>
    2810:	fe 01       	movw	r30, r28
    2812:	eb 5a       	subi	r30, 0xAB	; 171
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	80 83       	st	Z, r24
    281a:	2a c3       	rjmp	.+1620   	; 0x2e70 <LCD_void_init+0xc4e>
		_delay_ms(3);
	}
else if(mode == LCD_enum_4BITS_MODE)
    281c:	fe 01       	movw	r30, r28
    281e:	e3 57       	subi	r30, 0x73	; 115
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 81       	ld	r24, Z
    2824:	88 23       	and	r24, r24
    2826:	09 f0       	breq	.+2      	; 0x282a <LCD_void_init+0x608>
    2828:	23 c3       	rjmp	.+1606   	; 0x2e70 <LCD_void_init+0xc4e>
	{
		DIO_void_setPin_direction(LCD_4BITS_PORT , LCD_4BITS_PIN1 , OUTPUT);
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	63 e0       	ldi	r22, 0x03	; 3
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
		DIO_void_setPin_direction(LCD_4BITS_PORT , LCD_4BITS_PIN2 , OUTPUT);
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	64 e0       	ldi	r22, 0x04	; 4
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
		DIO_void_setPin_direction(LCD_4BITS_PORT , LCD_4BITS_PIN3 , OUTPUT);
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	65 e0       	ldi	r22, 0x05	; 5
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
		DIO_void_setPin_direction(LCD_4BITS_PORT , LCD_4BITS_PIN4 , OUTPUT);
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	66 e0       	ldi	r22, 0x06	; 6
    284c:	41 e0       	ldi	r20, 0x01	; 1
    284e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
    2852:	fe 01       	movw	r30, r28
    2854:	ef 5a       	subi	r30, 0xAF	; 175
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	ac e0       	ldi	r26, 0x0C	; 12
    285e:	b2 e4       	ldi	r27, 0x42	; 66
    2860:	80 83       	st	Z, r24
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	a2 83       	std	Z+2, r26	; 0x02
    2866:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	8e 01       	movw	r16, r28
    286a:	03 5b       	subi	r16, 0xB3	; 179
    286c:	1f 4f       	sbci	r17, 0xFF	; 255
    286e:	fe 01       	movw	r30, r28
    2870:	ef 5a       	subi	r30, 0xAF	; 175
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	60 81       	ld	r22, Z
    2876:	71 81       	ldd	r23, Z+1	; 0x01
    2878:	82 81       	ldd	r24, Z+2	; 0x02
    287a:	93 81       	ldd	r25, Z+3	; 0x03
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a ef       	ldi	r20, 0xFA	; 250
    2882:	54 e4       	ldi	r21, 0x44	; 68
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	f8 01       	movw	r30, r16
    288e:	80 83       	st	Z, r24
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	a2 83       	std	Z+2, r26	; 0x02
    2894:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2896:	fe 01       	movw	r30, r28
    2898:	e3 5b       	subi	r30, 0xB3	; 179
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	60 81       	ld	r22, Z
    289e:	71 81       	ldd	r23, Z+1	; 0x01
    28a0:	82 81       	ldd	r24, Z+2	; 0x02
    28a2:	93 81       	ldd	r25, Z+3	; 0x03
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	44 f4       	brge	.+16     	; 0x28c4 <LCD_void_init+0x6a2>
		__ticks = 1;
    28b4:	fe 01       	movw	r30, r28
    28b6:	e5 5b       	subi	r30, 0xB5	; 181
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	91 83       	std	Z+1, r25	; 0x01
    28c0:	80 83       	st	Z, r24
    28c2:	64 c0       	rjmp	.+200    	; 0x298c <LCD_void_init+0x76a>
	else if (__tmp > 65535)
    28c4:	fe 01       	movw	r30, r28
    28c6:	e3 5b       	subi	r30, 0xB3	; 179
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	0c f0       	brlt	.+2      	; 0x28e4 <LCD_void_init+0x6c2>
    28e2:	43 c0       	rjmp	.+134    	; 0x296a <LCD_void_init+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e4:	fe 01       	movw	r30, r28
    28e6:	ef 5a       	subi	r30, 0xAF	; 175
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	8e 01       	movw	r16, r28
    2904:	05 5b       	subi	r16, 0xB5	; 181
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	bc 01       	movw	r22, r24
    290a:	cd 01       	movw	r24, r26
    290c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	f8 01       	movw	r30, r16
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	80 83       	st	Z, r24
    291a:	1f c0       	rjmp	.+62     	; 0x295a <LCD_void_init+0x738>
    291c:	fe 01       	movw	r30, r28
    291e:	e7 5b       	subi	r30, 0xB7	; 183
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	88 ec       	ldi	r24, 0xC8	; 200
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
    292a:	fe 01       	movw	r30, r28
    292c:	e7 5b       	subi	r30, 0xB7	; 183
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	80 81       	ld	r24, Z
    2932:	91 81       	ldd	r25, Z+1	; 0x01
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <LCD_void_init+0x712>
    2938:	fe 01       	movw	r30, r28
    293a:	e7 5b       	subi	r30, 0xB7	; 183
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2942:	de 01       	movw	r26, r28
    2944:	a5 5b       	subi	r26, 0xB5	; 181
    2946:	bf 4f       	sbci	r27, 0xFF	; 255
    2948:	fe 01       	movw	r30, r28
    294a:	e5 5b       	subi	r30, 0xB5	; 181
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	11 96       	adiw	r26, 0x01	; 1
    2956:	9c 93       	st	X, r25
    2958:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295a:	fe 01       	movw	r30, r28
    295c:	e5 5b       	subi	r30, 0xB5	; 181
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	91 81       	ldd	r25, Z+1	; 0x01
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	d1 f6       	brne	.-76     	; 0x291c <LCD_void_init+0x6fa>
    2968:	27 c0       	rjmp	.+78     	; 0x29b8 <LCD_void_init+0x796>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296a:	8e 01       	movw	r16, r28
    296c:	05 5b       	subi	r16, 0xB5	; 181
    296e:	1f 4f       	sbci	r17, 0xFF	; 255
    2970:	fe 01       	movw	r30, r28
    2972:	e3 5b       	subi	r30, 0xB3	; 179
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	f8 01       	movw	r30, r16
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	80 83       	st	Z, r24
    298c:	de 01       	movw	r26, r28
    298e:	a9 5b       	subi	r26, 0xB9	; 185
    2990:	bf 4f       	sbci	r27, 0xFF	; 255
    2992:	fe 01       	movw	r30, r28
    2994:	e5 5b       	subi	r30, 0xB5	; 181
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	8d 93       	st	X+, r24
    299e:	9c 93       	st	X, r25
    29a0:	fe 01       	movw	r30, r28
    29a2:	e9 5b       	subi	r30, 0xB9	; 185
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	91 81       	ldd	r25, Z+1	; 0x01
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <LCD_void_init+0x788>
    29ae:	fe 01       	movw	r30, r28
    29b0:	e9 5b       	subi	r30, 0xB9	; 185
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	80 83       	st	Z, r24

		_delay_ms(35);
		LCD_void_send_command(0x02);
    29b8:	82 e0       	ldi	r24, 0x02	; 2
    29ba:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
    29be:	fe 01       	movw	r30, r28
    29c0:	ed 5b       	subi	r30, 0xBD	; 189
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	a0 e8       	ldi	r26, 0x80	; 128
    29ca:	bf e3       	ldi	r27, 0x3F	; 63
    29cc:	80 83       	st	Z, r24
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	a2 83       	std	Z+2, r26	; 0x02
    29d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d4:	8e 01       	movw	r16, r28
    29d6:	01 5c       	subi	r16, 0xC1	; 193
    29d8:	1f 4f       	sbci	r17, 0xFF	; 255
    29da:	fe 01       	movw	r30, r28
    29dc:	ed 5b       	subi	r30, 0xBD	; 189
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	60 81       	ld	r22, Z
    29e2:	71 81       	ldd	r23, Z+1	; 0x01
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	4a ef       	ldi	r20, 0xFA	; 250
    29ee:	54 e4       	ldi	r21, 0x44	; 68
    29f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	f8 01       	movw	r30, r16
    29fa:	80 83       	st	Z, r24
    29fc:	91 83       	std	Z+1, r25	; 0x01
    29fe:	a2 83       	std	Z+2, r26	; 0x02
    2a00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a02:	fe 01       	movw	r30, r28
    2a04:	ff 96       	adiw	r30, 0x3f	; 63
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e8       	ldi	r20, 0x80	; 128
    2a14:	5f e3       	ldi	r21, 0x3F	; 63
    2a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a1a:	88 23       	and	r24, r24
    2a1c:	2c f4       	brge	.+10     	; 0x2a28 <LCD_void_init+0x806>
		__ticks = 1;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9e af       	std	Y+62, r25	; 0x3e
    2a24:	8d af       	std	Y+61, r24	; 0x3d
    2a26:	46 c0       	rjmp	.+140    	; 0x2ab4 <LCD_void_init+0x892>
	else if (__tmp > 65535)
    2a28:	fe 01       	movw	r30, r28
    2a2a:	ff 96       	adiw	r30, 0x3f	; 63
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	3f ef       	ldi	r19, 0xFF	; 255
    2a38:	4f e7       	ldi	r20, 0x7F	; 127
    2a3a:	57 e4       	ldi	r21, 0x47	; 71
    2a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a40:	18 16       	cp	r1, r24
    2a42:	64 f5       	brge	.+88     	; 0x2a9c <LCD_void_init+0x87a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a44:	fe 01       	movw	r30, r28
    2a46:	ed 5b       	subi	r30, 0xBD	; 189
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	60 81       	ld	r22, Z
    2a4c:	71 81       	ldd	r23, Z+1	; 0x01
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9e af       	std	Y+62, r25	; 0x3e
    2a70:	8d af       	std	Y+61, r24	; 0x3d
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <LCD_void_init+0x870>
    2a74:	88 ec       	ldi	r24, 0xC8	; 200
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9c af       	std	Y+60, r25	; 0x3c
    2a7a:	8b af       	std	Y+59, r24	; 0x3b
    2a7c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a7e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_void_init+0x85e>
    2a84:	9c af       	std	Y+60, r25	; 0x3c
    2a86:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9e af       	std	Y+62, r25	; 0x3e
    2a90:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a94:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <LCD_void_init+0x852>
    2a9a:	16 c0       	rjmp	.+44     	; 0x2ac8 <LCD_void_init+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ff 96       	adiw	r30, 0x3f	; 63
    2aa0:	60 81       	ld	r22, Z
    2aa2:	71 81       	ldd	r23, Z+1	; 0x01
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	9e af       	std	Y+62, r25	; 0x3e
    2ab2:	8d af       	std	Y+61, r24	; 0x3d
    2ab4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ab6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ab8:	9a af       	std	Y+58, r25	; 0x3a
    2aba:	89 af       	std	Y+57, r24	; 0x39
    2abc:	89 ad       	ldd	r24, Y+57	; 0x39
    2abe:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <LCD_void_init+0x89e>
    2ac4:	9a af       	std	Y+58, r25	; 0x3a
    2ac6:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		LCD_void_send_command(0x28);
    2ac8:	88 e2       	ldi	r24, 0x28	; 40
    2aca:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a0 e8       	ldi	r26, 0x80	; 128
    2ad4:	bf e3       	ldi	r27, 0x3F	; 63
    2ad6:	8d ab       	std	Y+53, r24	; 0x35
    2ad8:	9e ab       	std	Y+54, r25	; 0x36
    2ada:	af ab       	std	Y+55, r26	; 0x37
    2adc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ade:	6d a9       	ldd	r22, Y+53	; 0x35
    2ae0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ae2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ae4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	4a ef       	ldi	r20, 0xFA	; 250
    2aec:	54 e4       	ldi	r21, 0x44	; 68
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	89 ab       	std	Y+49, r24	; 0x31
    2af8:	9a ab       	std	Y+50, r25	; 0x32
    2afa:	ab ab       	std	Y+51, r26	; 0x33
    2afc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2afe:	69 a9       	ldd	r22, Y+49	; 0x31
    2b00:	7a a9       	ldd	r23, Y+50	; 0x32
    2b02:	8b a9       	ldd	r24, Y+51	; 0x33
    2b04:	9c a9       	ldd	r25, Y+52	; 0x34
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	2c f4       	brge	.+10     	; 0x2b20 <LCD_void_init+0x8fe>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	98 ab       	std	Y+48, r25	; 0x30
    2b1c:	8f a7       	std	Y+47, r24	; 0x2f
    2b1e:	3f c0       	rjmp	.+126    	; 0x2b9e <LCD_void_init+0x97c>
	else if (__tmp > 65535)
    2b20:	69 a9       	ldd	r22, Y+49	; 0x31
    2b22:	7a a9       	ldd	r23, Y+50	; 0x32
    2b24:	8b a9       	ldd	r24, Y+51	; 0x33
    2b26:	9c a9       	ldd	r25, Y+52	; 0x34
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	3f ef       	ldi	r19, 0xFF	; 255
    2b2c:	4f e7       	ldi	r20, 0x7F	; 127
    2b2e:	57 e4       	ldi	r21, 0x47	; 71
    2b30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b34:	18 16       	cp	r1, r24
    2b36:	4c f5       	brge	.+82     	; 0x2b8a <LCD_void_init+0x968>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b38:	6d a9       	ldd	r22, Y+53	; 0x35
    2b3a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b3c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b3e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e2       	ldi	r20, 0x20	; 32
    2b46:	51 e4       	ldi	r21, 0x41	; 65
    2b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	98 ab       	std	Y+48, r25	; 0x30
    2b5e:	8f a7       	std	Y+47, r24	; 0x2f
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <LCD_void_init+0x95e>
    2b62:	88 ec       	ldi	r24, 0xC8	; 200
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	9e a7       	std	Y+46, r25	; 0x2e
    2b68:	8d a7       	std	Y+45, r24	; 0x2d
    2b6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <LCD_void_init+0x94c>
    2b72:	9e a7       	std	Y+46, r25	; 0x2e
    2b74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b78:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	98 ab       	std	Y+48, r25	; 0x30
    2b7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b80:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b82:	98 a9       	ldd	r25, Y+48	; 0x30
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	69 f7       	brne	.-38     	; 0x2b62 <LCD_void_init+0x940>
    2b88:	14 c0       	rjmp	.+40     	; 0x2bb2 <LCD_void_init+0x990>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b90:	9c a9       	ldd	r25, Y+52	; 0x34
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	98 ab       	std	Y+48, r25	; 0x30
    2b9c:	8f a7       	std	Y+47, r24	; 0x2f
    2b9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ba0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ba2:	9c a7       	std	Y+44, r25	; 0x2c
    2ba4:	8b a7       	std	Y+43, r24	; 0x2b
    2ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ba8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <LCD_void_init+0x988>
    2bae:	9c a7       	std	Y+44, r25	; 0x2c
    2bb0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		LCD_void_send_command(0x0E);
    2bb2:	8e e0       	ldi	r24, 0x0E	; 14
    2bb4:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	a0 e8       	ldi	r26, 0x80	; 128
    2bbe:	bf e3       	ldi	r27, 0x3F	; 63
    2bc0:	8f a3       	std	Y+39, r24	; 0x27
    2bc2:	98 a7       	std	Y+40, r25	; 0x28
    2bc4:	a9 a7       	std	Y+41, r26	; 0x29
    2bc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bca:	78 a5       	ldd	r23, Y+40	; 0x28
    2bcc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bce:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a ef       	ldi	r20, 0xFA	; 250
    2bd6:	54 e4       	ldi	r21, 0x44	; 68
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	8b a3       	std	Y+35, r24	; 0x23
    2be2:	9c a3       	std	Y+36, r25	; 0x24
    2be4:	ad a3       	std	Y+37, r26	; 0x25
    2be6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2be8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bea:	7c a1       	ldd	r23, Y+36	; 0x24
    2bec:	8d a1       	ldd	r24, Y+37	; 0x25
    2bee:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e8       	ldi	r20, 0x80	; 128
    2bf6:	5f e3       	ldi	r21, 0x3F	; 63
    2bf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfc:	88 23       	and	r24, r24
    2bfe:	2c f4       	brge	.+10     	; 0x2c0a <LCD_void_init+0x9e8>
		__ticks = 1;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9a a3       	std	Y+34, r25	; 0x22
    2c06:	89 a3       	std	Y+33, r24	; 0x21
    2c08:	3f c0       	rjmp	.+126    	; 0x2c88 <LCD_void_init+0xa66>
	else if (__tmp > 65535)
    2c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c10:	9e a1       	ldd	r25, Y+38	; 0x26
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	3f ef       	ldi	r19, 0xFF	; 255
    2c16:	4f e7       	ldi	r20, 0x7F	; 127
    2c18:	57 e4       	ldi	r21, 0x47	; 71
    2c1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c1e:	18 16       	cp	r1, r24
    2c20:	4c f5       	brge	.+82     	; 0x2c74 <LCD_void_init+0xa52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c22:	6f a1       	ldd	r22, Y+39	; 0x27
    2c24:	78 a5       	ldd	r23, Y+40	; 0x28
    2c26:	89 a5       	ldd	r24, Y+41	; 0x29
    2c28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e2       	ldi	r20, 0x20	; 32
    2c30:	51 e4       	ldi	r21, 0x41	; 65
    2c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	bc 01       	movw	r22, r24
    2c3c:	cd 01       	movw	r24, r26
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9a a3       	std	Y+34, r25	; 0x22
    2c48:	89 a3       	std	Y+33, r24	; 0x21
    2c4a:	0f c0       	rjmp	.+30     	; 0x2c6a <LCD_void_init+0xa48>
    2c4c:	88 ec       	ldi	r24, 0xC8	; 200
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	98 a3       	std	Y+32, r25	; 0x20
    2c52:	8f 8f       	std	Y+31, r24	; 0x1f
    2c54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c56:	98 a1       	ldd	r25, Y+32	; 0x20
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <LCD_void_init+0xa36>
    2c5c:	98 a3       	std	Y+32, r25	; 0x20
    2c5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c60:	89 a1       	ldd	r24, Y+33	; 0x21
    2c62:	9a a1       	ldd	r25, Y+34	; 0x22
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	9a a3       	std	Y+34, r25	; 0x22
    2c68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c6e:	00 97       	sbiw	r24, 0x00	; 0
    2c70:	69 f7       	brne	.-38     	; 0x2c4c <LCD_void_init+0xa2a>
    2c72:	14 c0       	rjmp	.+40     	; 0x2c9c <LCD_void_init+0xa7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c74:	6b a1       	ldd	r22, Y+35	; 0x23
    2c76:	7c a1       	ldd	r23, Y+36	; 0x24
    2c78:	8d a1       	ldd	r24, Y+37	; 0x25
    2c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9a a3       	std	Y+34, r25	; 0x22
    2c86:	89 a3       	std	Y+33, r24	; 0x21
    2c88:	89 a1       	ldd	r24, Y+33	; 0x21
    2c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c8e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <LCD_void_init+0xa72>
    2c98:	9e 8f       	std	Y+30, r25	; 0x1e
    2c9a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		LCD_void_send_command(0x01);
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	a0 e8       	ldi	r26, 0x80	; 128
    2ca8:	bf e3       	ldi	r27, 0x3F	; 63
    2caa:	89 8f       	std	Y+25, r24	; 0x19
    2cac:	9a 8f       	std	Y+26, r25	; 0x1a
    2cae:	ab 8f       	std	Y+27, r26	; 0x1b
    2cb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb2:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	4a ef       	ldi	r20, 0xFA	; 250
    2cc0:	54 e4       	ldi	r21, 0x44	; 68
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	8d 8b       	std	Y+21, r24	; 0x15
    2ccc:	9e 8b       	std	Y+22, r25	; 0x16
    2cce:	af 8b       	std	Y+23, r26	; 0x17
    2cd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 e8       	ldi	r20, 0x80	; 128
    2ce0:	5f e3       	ldi	r21, 0x3F	; 63
    2ce2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ce6:	88 23       	and	r24, r24
    2ce8:	2c f4       	brge	.+10     	; 0x2cf4 <LCD_void_init+0xad2>
		__ticks = 1;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	9c 8b       	std	Y+20, r25	; 0x14
    2cf0:	8b 8b       	std	Y+19, r24	; 0x13
    2cf2:	3f c0       	rjmp	.+126    	; 0x2d72 <LCD_void_init+0xb50>
	else if (__tmp > 65535)
    2cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	3f ef       	ldi	r19, 0xFF	; 255
    2d00:	4f e7       	ldi	r20, 0x7F	; 127
    2d02:	57 e4       	ldi	r21, 0x47	; 71
    2d04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d08:	18 16       	cp	r1, r24
    2d0a:	4c f5       	brge	.+82     	; 0x2d5e <LCD_void_init+0xb3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e2       	ldi	r20, 0x20	; 32
    2d1a:	51 e4       	ldi	r21, 0x41	; 65
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	bc 01       	movw	r22, r24
    2d26:	cd 01       	movw	r24, r26
    2d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	9c 8b       	std	Y+20, r25	; 0x14
    2d32:	8b 8b       	std	Y+19, r24	; 0x13
    2d34:	0f c0       	rjmp	.+30     	; 0x2d54 <LCD_void_init+0xb32>
    2d36:	88 ec       	ldi	r24, 0xC8	; 200
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	9a 8b       	std	Y+18, r25	; 0x12
    2d3c:	89 8b       	std	Y+17, r24	; 0x11
    2d3e:	89 89       	ldd	r24, Y+17	; 0x11
    2d40:	9a 89       	ldd	r25, Y+18	; 0x12
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <LCD_void_init+0xb20>
    2d46:	9a 8b       	std	Y+18, r25	; 0x12
    2d48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	9c 8b       	std	Y+20, r25	; 0x14
    2d52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d54:	8b 89       	ldd	r24, Y+19	; 0x13
    2d56:	9c 89       	ldd	r25, Y+20	; 0x14
    2d58:	00 97       	sbiw	r24, 0x00	; 0
    2d5a:	69 f7       	brne	.-38     	; 0x2d36 <LCD_void_init+0xb14>
    2d5c:	14 c0       	rjmp	.+40     	; 0x2d86 <LCD_void_init+0xb64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d60:	7e 89       	ldd	r23, Y+22	; 0x16
    2d62:	8f 89       	ldd	r24, Y+23	; 0x17
    2d64:	98 8d       	ldd	r25, Y+24	; 0x18
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	9c 8b       	std	Y+20, r25	; 0x14
    2d70:	8b 8b       	std	Y+19, r24	; 0x13
    2d72:	8b 89       	ldd	r24, Y+19	; 0x13
    2d74:	9c 89       	ldd	r25, Y+20	; 0x14
    2d76:	98 8b       	std	Y+16, r25	; 0x10
    2d78:	8f 87       	std	Y+15, r24	; 0x0f
    2d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d7c:	98 89       	ldd	r25, Y+16	; 0x10
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <LCD_void_init+0xb5c>
    2d82:	98 8b       	std	Y+16, r25	; 0x10
    2d84:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCD_void_send_command(0x06);
    2d86:	86 e0       	ldi	r24, 0x06	; 6
    2d88:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	a0 e4       	ldi	r26, 0x40	; 64
    2d92:	b0 e4       	ldi	r27, 0x40	; 64
    2d94:	8b 87       	std	Y+11, r24	; 0x0b
    2d96:	9c 87       	std	Y+12, r25	; 0x0c
    2d98:	ad 87       	std	Y+13, r26	; 0x0d
    2d9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	4a ef       	ldi	r20, 0xFA	; 250
    2daa:	54 e4       	ldi	r21, 0x44	; 68
    2dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	8f 83       	std	Y+7, r24	; 0x07
    2db6:	98 87       	std	Y+8, r25	; 0x08
    2db8:	a9 87       	std	Y+9, r26	; 0x09
    2dba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbe:	78 85       	ldd	r23, Y+8	; 0x08
    2dc0:	89 85       	ldd	r24, Y+9	; 0x09
    2dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e8       	ldi	r20, 0x80	; 128
    2dca:	5f e3       	ldi	r21, 0x3F	; 63
    2dcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd0:	88 23       	and	r24, r24
    2dd2:	2c f4       	brge	.+10     	; 0x2dde <LCD_void_init+0xbbc>
		__ticks = 1;
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	3f c0       	rjmp	.+126    	; 0x2e5c <LCD_void_init+0xc3a>
	else if (__tmp > 65535)
    2dde:	6f 81       	ldd	r22, Y+7	; 0x07
    2de0:	78 85       	ldd	r23, Y+8	; 0x08
    2de2:	89 85       	ldd	r24, Y+9	; 0x09
    2de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	3f ef       	ldi	r19, 0xFF	; 255
    2dea:	4f e7       	ldi	r20, 0x7F	; 127
    2dec:	57 e4       	ldi	r21, 0x47	; 71
    2dee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df2:	18 16       	cp	r1, r24
    2df4:	4c f5       	brge	.+82     	; 0x2e48 <LCD_void_init+0xc26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	40 e2       	ldi	r20, 0x20	; 32
    2e04:	51 e4       	ldi	r21, 0x41	; 65
    2e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	bc 01       	movw	r22, r24
    2e10:	cd 01       	movw	r24, r26
    2e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	9e 83       	std	Y+6, r25	; 0x06
    2e1c:	8d 83       	std	Y+5, r24	; 0x05
    2e1e:	0f c0       	rjmp	.+30     	; 0x2e3e <LCD_void_init+0xc1c>
    2e20:	88 ec       	ldi	r24, 0xC8	; 200
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	9c 83       	std	Y+4, r25	; 0x04
    2e26:	8b 83       	std	Y+3, r24	; 0x03
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	f1 f7       	brne	.-4      	; 0x2e2c <LCD_void_init+0xc0a>
    2e30:	9c 83       	std	Y+4, r25	; 0x04
    2e32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e34:	8d 81       	ldd	r24, Y+5	; 0x05
    2e36:	9e 81       	ldd	r25, Y+6	; 0x06
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e40:	9e 81       	ldd	r25, Y+6	; 0x06
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	69 f7       	brne	.-38     	; 0x2e20 <LCD_void_init+0xbfe>
    2e46:	14 c0       	rjmp	.+40     	; 0x2e70 <LCD_void_init+0xc4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e48:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4a:	78 85       	ldd	r23, Y+8	; 0x08
    2e4c:	89 85       	ldd	r24, Y+9	; 0x09
    2e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	9e 83       	std	Y+6, r25	; 0x06
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
    2e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e60:	9a 83       	std	Y+2, r25	; 0x02
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	9a 81       	ldd	r25, Y+2	; 0x02
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <LCD_void_init+0xc46>
    2e6c:	9a 83       	std	Y+2, r25	; 0x02
    2e6e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3);
	}

}
    2e70:	c3 57       	subi	r28, 0x73	; 115
    2e72:	df 4f       	sbci	r29, 0xFF	; 255
    2e74:	0f b6       	in	r0, 0x3f	; 63
    2e76:	f8 94       	cli
    2e78:	de bf       	out	0x3e, r29	; 62
    2e7a:	0f be       	out	0x3f, r0	; 63
    2e7c:	cd bf       	out	0x3d, r28	; 61
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	1f 91       	pop	r17
    2e84:	0f 91       	pop	r16
    2e86:	08 95       	ret

00002e88 <LCD_void_send_command>:
void LCD_void_send_command(u8 command)
{
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	ea 97       	sbiw	r28, 0x3a	; 58
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	8a af       	std	Y+58, r24	; 0x3a
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ea4:	b0 e4       	ldi	r27, 0x40	; 64
    2ea6:	8d ab       	std	Y+53, r24	; 0x35
    2ea8:	9e ab       	std	Y+54, r25	; 0x36
    2eaa:	af ab       	std	Y+55, r26	; 0x37
    2eac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eae:	6d a9       	ldd	r22, Y+53	; 0x35
    2eb0:	7e a9       	ldd	r23, Y+54	; 0x36
    2eb2:	8f a9       	ldd	r24, Y+55	; 0x37
    2eb4:	98 ad       	ldd	r25, Y+56	; 0x38
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	4a ef       	ldi	r20, 0xFA	; 250
    2ebc:	54 e4       	ldi	r21, 0x44	; 68
    2ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	89 ab       	std	Y+49, r24	; 0x31
    2ec8:	9a ab       	std	Y+50, r25	; 0x32
    2eca:	ab ab       	std	Y+51, r26	; 0x33
    2ecc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ece:	69 a9       	ldd	r22, Y+49	; 0x31
    2ed0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ed2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ed4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e8       	ldi	r20, 0x80	; 128
    2edc:	5f e3       	ldi	r21, 0x3F	; 63
    2ede:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ee2:	88 23       	and	r24, r24
    2ee4:	2c f4       	brge	.+10     	; 0x2ef0 <LCD_void_send_command+0x68>
		__ticks = 1;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	98 ab       	std	Y+48, r25	; 0x30
    2eec:	8f a7       	std	Y+47, r24	; 0x2f
    2eee:	3f c0       	rjmp	.+126    	; 0x2f6e <LCD_void_send_command+0xe6>
	else if (__tmp > 65535)
    2ef0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ef2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ef4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ef6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	3f ef       	ldi	r19, 0xFF	; 255
    2efc:	4f e7       	ldi	r20, 0x7F	; 127
    2efe:	57 e4       	ldi	r21, 0x47	; 71
    2f00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f04:	18 16       	cp	r1, r24
    2f06:	4c f5       	brge	.+82     	; 0x2f5a <LCD_void_send_command+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f08:	6d a9       	ldd	r22, Y+53	; 0x35
    2f0a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f0c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f0e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e2       	ldi	r20, 0x20	; 32
    2f16:	51 e4       	ldi	r21, 0x41	; 65
    2f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	bc 01       	movw	r22, r24
    2f22:	cd 01       	movw	r24, r26
    2f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	98 ab       	std	Y+48, r25	; 0x30
    2f2e:	8f a7       	std	Y+47, r24	; 0x2f
    2f30:	0f c0       	rjmp	.+30     	; 0x2f50 <LCD_void_send_command+0xc8>
    2f32:	88 ec       	ldi	r24, 0xC8	; 200
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	9e a7       	std	Y+46, r25	; 0x2e
    2f38:	8d a7       	std	Y+45, r24	; 0x2d
    2f3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <LCD_void_send_command+0xb6>
    2f42:	9e a7       	std	Y+46, r25	; 0x2e
    2f44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f48:	98 a9       	ldd	r25, Y+48	; 0x30
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	98 ab       	std	Y+48, r25	; 0x30
    2f4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f52:	98 a9       	ldd	r25, Y+48	; 0x30
    2f54:	00 97       	sbiw	r24, 0x00	; 0
    2f56:	69 f7       	brne	.-38     	; 0x2f32 <LCD_void_send_command+0xaa>
    2f58:	14 c0       	rjmp	.+40     	; 0x2f82 <LCD_void_send_command+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f5c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f5e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f60:	9c a9       	ldd	r25, Y+52	; 0x34
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	98 ab       	std	Y+48, r25	; 0x30
    2f6c:	8f a7       	std	Y+47, r24	; 0x2f
    2f6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f70:	98 a9       	ldd	r25, Y+48	; 0x30
    2f72:	9c a7       	std	Y+44, r25	; 0x2c
    2f74:	8b a7       	std	Y+43, r24	; 0x2b
    2f76:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f78:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <LCD_void_send_command+0xf2>
    2f7e:	9c a7       	std	Y+44, r25	; 0x2c
    2f80:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_void_setPin_value(PORTA_ID , LCD_RS_PIN ,LOW);
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	61 e0       	ldi	r22, 0x01	; 1
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>

//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN1 , GETBIT(command,4));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN2 , GETBIT(command,5));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN3 , GETBIT(command,6));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN4 , GETBIT(command,7));
	 u8 porta_val = ((PORTA & 0x87) | ((command &0xf0) >> 1));
    2f8c:	eb e3       	ldi	r30, 0x3B	; 59
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	28 2f       	mov	r18, r24
    2f94:	27 78       	andi	r18, 0x87	; 135
    2f96:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f98:	88 2f       	mov	r24, r24
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	80 7f       	andi	r24, 0xF0	; 240
    2f9e:	90 70       	andi	r25, 0x00	; 0
    2fa0:	95 95       	asr	r25
    2fa2:	87 95       	ror	r24
    2fa4:	82 2b       	or	r24, r18
    2fa6:	89 af       	std	Y+57, r24	; 0x39
	 DIO_void_setPort_value(LCD_4BITS_PORT , porta_val);
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	69 ad       	ldd	r22, Y+57	; 0x39
    2fac:	0e 94 17 10 	call	0x202e	; 0x202e <DIO_void_setPort_value>
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , HIGH);
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	62 e0       	ldi	r22, 0x02	; 2
    2fb4:	41 e0       	ldi	r20, 0x01	; 1
    2fb6:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	a0 e8       	ldi	r26, 0x80	; 128
    2fc0:	bf e3       	ldi	r27, 0x3F	; 63
    2fc2:	8f a3       	std	Y+39, r24	; 0x27
    2fc4:	98 a7       	std	Y+40, r25	; 0x28
    2fc6:	a9 a7       	std	Y+41, r26	; 0x29
    2fc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fca:	6f a1       	ldd	r22, Y+39	; 0x27
    2fcc:	78 a5       	ldd	r23, Y+40	; 0x28
    2fce:	89 a5       	ldd	r24, Y+41	; 0x29
    2fd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	4a ef       	ldi	r20, 0xFA	; 250
    2fd8:	54 e4       	ldi	r21, 0x44	; 68
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	8b a3       	std	Y+35, r24	; 0x23
    2fe4:	9c a3       	std	Y+36, r25	; 0x24
    2fe6:	ad a3       	std	Y+37, r26	; 0x25
    2fe8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fea:	6b a1       	ldd	r22, Y+35	; 0x23
    2fec:	7c a1       	ldd	r23, Y+36	; 0x24
    2fee:	8d a1       	ldd	r24, Y+37	; 0x25
    2ff0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e8       	ldi	r20, 0x80	; 128
    2ff8:	5f e3       	ldi	r21, 0x3F	; 63
    2ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ffe:	88 23       	and	r24, r24
    3000:	2c f4       	brge	.+10     	; 0x300c <LCD_void_send_command+0x184>
		__ticks = 1;
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	9a a3       	std	Y+34, r25	; 0x22
    3008:	89 a3       	std	Y+33, r24	; 0x21
    300a:	3f c0       	rjmp	.+126    	; 0x308a <LCD_void_send_command+0x202>
	else if (__tmp > 65535)
    300c:	6b a1       	ldd	r22, Y+35	; 0x23
    300e:	7c a1       	ldd	r23, Y+36	; 0x24
    3010:	8d a1       	ldd	r24, Y+37	; 0x25
    3012:	9e a1       	ldd	r25, Y+38	; 0x26
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	3f ef       	ldi	r19, 0xFF	; 255
    3018:	4f e7       	ldi	r20, 0x7F	; 127
    301a:	57 e4       	ldi	r21, 0x47	; 71
    301c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3020:	18 16       	cp	r1, r24
    3022:	4c f5       	brge	.+82     	; 0x3076 <LCD_void_send_command+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3024:	6f a1       	ldd	r22, Y+39	; 0x27
    3026:	78 a5       	ldd	r23, Y+40	; 0x28
    3028:	89 a5       	ldd	r24, Y+41	; 0x29
    302a:	9a a5       	ldd	r25, Y+42	; 0x2a
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	40 e2       	ldi	r20, 0x20	; 32
    3032:	51 e4       	ldi	r21, 0x41	; 65
    3034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	bc 01       	movw	r22, r24
    303e:	cd 01       	movw	r24, r26
    3040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	9a a3       	std	Y+34, r25	; 0x22
    304a:	89 a3       	std	Y+33, r24	; 0x21
    304c:	0f c0       	rjmp	.+30     	; 0x306c <LCD_void_send_command+0x1e4>
    304e:	88 ec       	ldi	r24, 0xC8	; 200
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	98 a3       	std	Y+32, r25	; 0x20
    3054:	8f 8f       	std	Y+31, r24	; 0x1f
    3056:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3058:	98 a1       	ldd	r25, Y+32	; 0x20
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <LCD_void_send_command+0x1d2>
    305e:	98 a3       	std	Y+32, r25	; 0x20
    3060:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3062:	89 a1       	ldd	r24, Y+33	; 0x21
    3064:	9a a1       	ldd	r25, Y+34	; 0x22
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	9a a3       	std	Y+34, r25	; 0x22
    306a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306c:	89 a1       	ldd	r24, Y+33	; 0x21
    306e:	9a a1       	ldd	r25, Y+34	; 0x22
    3070:	00 97       	sbiw	r24, 0x00	; 0
    3072:	69 f7       	brne	.-38     	; 0x304e <LCD_void_send_command+0x1c6>
    3074:	14 c0       	rjmp	.+40     	; 0x309e <LCD_void_send_command+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3076:	6b a1       	ldd	r22, Y+35	; 0x23
    3078:	7c a1       	ldd	r23, Y+36	; 0x24
    307a:	8d a1       	ldd	r24, Y+37	; 0x25
    307c:	9e a1       	ldd	r25, Y+38	; 0x26
    307e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	9a a3       	std	Y+34, r25	; 0x22
    3088:	89 a3       	std	Y+33, r24	; 0x21
    308a:	89 a1       	ldd	r24, Y+33	; 0x21
    308c:	9a a1       	ldd	r25, Y+34	; 0x22
    308e:	9e 8f       	std	Y+30, r25	; 0x1e
    3090:	8d 8f       	std	Y+29, r24	; 0x1d
    3092:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3094:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	f1 f7       	brne	.-4      	; 0x3096 <LCD_void_send_command+0x20e>
    309a:	9e 8f       	std	Y+30, r25	; 0x1e
    309c:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1);
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , LOW);
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	62 e0       	ldi	r22, 0x02	; 2
    30a2:	40 e0       	ldi	r20, 0x00	; 0
    30a4:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a0 e8       	ldi	r26, 0x80	; 128
    30ae:	bf e3       	ldi	r27, 0x3F	; 63
    30b0:	89 8f       	std	Y+25, r24	; 0x19
    30b2:	9a 8f       	std	Y+26, r25	; 0x1a
    30b4:	ab 8f       	std	Y+27, r26	; 0x1b
    30b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b8:	69 8d       	ldd	r22, Y+25	; 0x19
    30ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	4a ef       	ldi	r20, 0xFA	; 250
    30c6:	54 e4       	ldi	r21, 0x44	; 68
    30c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	8d 8b       	std	Y+21, r24	; 0x15
    30d2:	9e 8b       	std	Y+22, r25	; 0x16
    30d4:	af 8b       	std	Y+23, r26	; 0x17
    30d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30d8:	6d 89       	ldd	r22, Y+21	; 0x15
    30da:	7e 89       	ldd	r23, Y+22	; 0x16
    30dc:	8f 89       	ldd	r24, Y+23	; 0x17
    30de:	98 8d       	ldd	r25, Y+24	; 0x18
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e8       	ldi	r20, 0x80	; 128
    30e6:	5f e3       	ldi	r21, 0x3F	; 63
    30e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ec:	88 23       	and	r24, r24
    30ee:	2c f4       	brge	.+10     	; 0x30fa <LCD_void_send_command+0x272>
		__ticks = 1;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	9c 8b       	std	Y+20, r25	; 0x14
    30f6:	8b 8b       	std	Y+19, r24	; 0x13
    30f8:	3f c0       	rjmp	.+126    	; 0x3178 <LCD_void_send_command+0x2f0>
	else if (__tmp > 65535)
    30fa:	6d 89       	ldd	r22, Y+21	; 0x15
    30fc:	7e 89       	ldd	r23, Y+22	; 0x16
    30fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3100:	98 8d       	ldd	r25, Y+24	; 0x18
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	3f ef       	ldi	r19, 0xFF	; 255
    3106:	4f e7       	ldi	r20, 0x7F	; 127
    3108:	57 e4       	ldi	r21, 0x47	; 71
    310a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    310e:	18 16       	cp	r1, r24
    3110:	4c f5       	brge	.+82     	; 0x3164 <LCD_void_send_command+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3112:	69 8d       	ldd	r22, Y+25	; 0x19
    3114:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3116:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3118:	9c 8d       	ldd	r25, Y+28	; 0x1c
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e2       	ldi	r20, 0x20	; 32
    3120:	51 e4       	ldi	r21, 0x41	; 65
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	9c 8b       	std	Y+20, r25	; 0x14
    3138:	8b 8b       	std	Y+19, r24	; 0x13
    313a:	0f c0       	rjmp	.+30     	; 0x315a <LCD_void_send_command+0x2d2>
    313c:	88 ec       	ldi	r24, 0xC8	; 200
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	9a 8b       	std	Y+18, r25	; 0x12
    3142:	89 8b       	std	Y+17, r24	; 0x11
    3144:	89 89       	ldd	r24, Y+17	; 0x11
    3146:	9a 89       	ldd	r25, Y+18	; 0x12
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	f1 f7       	brne	.-4      	; 0x3148 <LCD_void_send_command+0x2c0>
    314c:	9a 8b       	std	Y+18, r25	; 0x12
    314e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3150:	8b 89       	ldd	r24, Y+19	; 0x13
    3152:	9c 89       	ldd	r25, Y+20	; 0x14
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	9c 8b       	std	Y+20, r25	; 0x14
    3158:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315a:	8b 89       	ldd	r24, Y+19	; 0x13
    315c:	9c 89       	ldd	r25, Y+20	; 0x14
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	69 f7       	brne	.-38     	; 0x313c <LCD_void_send_command+0x2b4>
    3162:	14 c0       	rjmp	.+40     	; 0x318c <LCD_void_send_command+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3164:	6d 89       	ldd	r22, Y+21	; 0x15
    3166:	7e 89       	ldd	r23, Y+22	; 0x16
    3168:	8f 89       	ldd	r24, Y+23	; 0x17
    316a:	98 8d       	ldd	r25, Y+24	; 0x18
    316c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	9c 8b       	std	Y+20, r25	; 0x14
    3176:	8b 8b       	std	Y+19, r24	; 0x13
    3178:	8b 89       	ldd	r24, Y+19	; 0x13
    317a:	9c 89       	ldd	r25, Y+20	; 0x14
    317c:	98 8b       	std	Y+16, r25	; 0x10
    317e:	8f 87       	std	Y+15, r24	; 0x0f
    3180:	8f 85       	ldd	r24, Y+15	; 0x0f
    3182:	98 89       	ldd	r25, Y+16	; 0x10
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <LCD_void_send_command+0x2fc>
    3188:	98 8b       	std	Y+16, r25	; 0x10
    318a:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1);
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN1 , GETBIT(command,0));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN2 , GETBIT(command,1));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN3 , GETBIT(command,2));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN4 , GETBIT(command,3));
	 porta_val = ((PORTA & 0x87)|(command << 3));
    318c:	eb e3       	ldi	r30, 0x3B	; 59
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	28 2f       	mov	r18, r24
    3194:	27 78       	andi	r18, 0x87	; 135
    3196:	8a ad       	ldd	r24, Y+58	; 0x3a
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	88 0f       	add	r24, r24
    31a6:	99 1f       	adc	r25, r25
    31a8:	82 2b       	or	r24, r18
    31aa:	89 af       	std	Y+57, r24	; 0x39
	 DIO_void_setPort_value(LCD_4BITS_PORT , porta_val );
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	69 ad       	ldd	r22, Y+57	; 0x39
    31b0:	0e 94 17 10 	call	0x202e	; 0x202e <DIO_void_setPort_value>
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , HIGH);
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	62 e0       	ldi	r22, 0x02	; 2
    31b8:	41 e0       	ldi	r20, 0x01	; 1
    31ba:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	a0 e8       	ldi	r26, 0x80	; 128
    31c4:	bf e3       	ldi	r27, 0x3F	; 63
    31c6:	8b 87       	std	Y+11, r24	; 0x0b
    31c8:	9c 87       	std	Y+12, r25	; 0x0c
    31ca:	ad 87       	std	Y+13, r26	; 0x0d
    31cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	4a ef       	ldi	r20, 0xFA	; 250
    31dc:	54 e4       	ldi	r21, 0x44	; 68
    31de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	8f 83       	std	Y+7, r24	; 0x07
    31e8:	98 87       	std	Y+8, r25	; 0x08
    31ea:	a9 87       	std	Y+9, r26	; 0x09
    31ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ee:	6f 81       	ldd	r22, Y+7	; 0x07
    31f0:	78 85       	ldd	r23, Y+8	; 0x08
    31f2:	89 85       	ldd	r24, Y+9	; 0x09
    31f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e8       	ldi	r20, 0x80	; 128
    31fc:	5f e3       	ldi	r21, 0x3F	; 63
    31fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3202:	88 23       	and	r24, r24
    3204:	2c f4       	brge	.+10     	; 0x3210 <LCD_void_send_command+0x388>
		__ticks = 1;
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	9e 83       	std	Y+6, r25	; 0x06
    320c:	8d 83       	std	Y+5, r24	; 0x05
    320e:	3f c0       	rjmp	.+126    	; 0x328e <LCD_void_send_command+0x406>
	else if (__tmp > 65535)
    3210:	6f 81       	ldd	r22, Y+7	; 0x07
    3212:	78 85       	ldd	r23, Y+8	; 0x08
    3214:	89 85       	ldd	r24, Y+9	; 0x09
    3216:	9a 85       	ldd	r25, Y+10	; 0x0a
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	3f ef       	ldi	r19, 0xFF	; 255
    321c:	4f e7       	ldi	r20, 0x7F	; 127
    321e:	57 e4       	ldi	r21, 0x47	; 71
    3220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3224:	18 16       	cp	r1, r24
    3226:	4c f5       	brge	.+82     	; 0x327a <LCD_void_send_command+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3228:	6b 85       	ldd	r22, Y+11	; 0x0b
    322a:	7c 85       	ldd	r23, Y+12	; 0x0c
    322c:	8d 85       	ldd	r24, Y+13	; 0x0d
    322e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	40 e2       	ldi	r20, 0x20	; 32
    3236:	51 e4       	ldi	r21, 0x41	; 65
    3238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	9e 83       	std	Y+6, r25	; 0x06
    324e:	8d 83       	std	Y+5, r24	; 0x05
    3250:	0f c0       	rjmp	.+30     	; 0x3270 <LCD_void_send_command+0x3e8>
    3252:	88 ec       	ldi	r24, 0xC8	; 200
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	9c 83       	std	Y+4, r25	; 0x04
    3258:	8b 83       	std	Y+3, r24	; 0x03
    325a:	8b 81       	ldd	r24, Y+3	; 0x03
    325c:	9c 81       	ldd	r25, Y+4	; 0x04
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	f1 f7       	brne	.-4      	; 0x325e <LCD_void_send_command+0x3d6>
    3262:	9c 83       	std	Y+4, r25	; 0x04
    3264:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3266:	8d 81       	ldd	r24, Y+5	; 0x05
    3268:	9e 81       	ldd	r25, Y+6	; 0x06
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	9e 83       	std	Y+6, r25	; 0x06
    326e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3270:	8d 81       	ldd	r24, Y+5	; 0x05
    3272:	9e 81       	ldd	r25, Y+6	; 0x06
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	69 f7       	brne	.-38     	; 0x3252 <LCD_void_send_command+0x3ca>
    3278:	14 c0       	rjmp	.+40     	; 0x32a2 <LCD_void_send_command+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327a:	6f 81       	ldd	r22, Y+7	; 0x07
    327c:	78 85       	ldd	r23, Y+8	; 0x08
    327e:	89 85       	ldd	r24, Y+9	; 0x09
    3280:	9a 85       	ldd	r25, Y+10	; 0x0a
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	9e 81       	ldd	r25, Y+6	; 0x06
    3292:	9a 83       	std	Y+2, r25	; 0x02
    3294:	89 83       	std	Y+1, r24	; 0x01
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	f1 f7       	brne	.-4      	; 0x329a <LCD_void_send_command+0x412>
    329e:	9a 83       	std	Y+2, r25	; 0x02
    32a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , LOW);
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	62 e0       	ldi	r22, 0x02	; 2
    32a6:	40 e0       	ldi	r20, 0x00	; 0
    32a8:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>


#endif
}
    32ac:	ea 96       	adiw	r28, 0x3a	; 58
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	de bf       	out	0x3e, r29	; 62
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	cd bf       	out	0x3d, r28	; 61
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	08 95       	ret

000032be <LCD_void_write_char>:
void LCD_void_write_char(u8 ch)
{
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	ac 97       	sbiw	r28, 0x2c	; 44
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	de bf       	out	0x3e, r29	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	8c a7       	std	Y+44, r24	; 0x2c
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	a0 ea       	ldi	r26, 0xA0	; 160
    32da:	b0 e4       	ldi	r27, 0x40	; 64
    32dc:	8f a3       	std	Y+39, r24	; 0x27
    32de:	98 a7       	std	Y+40, r25	; 0x28
    32e0:	a9 a7       	std	Y+41, r26	; 0x29
    32e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e4:	6f a1       	ldd	r22, Y+39	; 0x27
    32e6:	78 a5       	ldd	r23, Y+40	; 0x28
    32e8:	89 a5       	ldd	r24, Y+41	; 0x29
    32ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	4a ef       	ldi	r20, 0xFA	; 250
    32f2:	54 e4       	ldi	r21, 0x44	; 68
    32f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	8b a3       	std	Y+35, r24	; 0x23
    32fe:	9c a3       	std	Y+36, r25	; 0x24
    3300:	ad a3       	std	Y+37, r26	; 0x25
    3302:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3304:	6b a1       	ldd	r22, Y+35	; 0x23
    3306:	7c a1       	ldd	r23, Y+36	; 0x24
    3308:	8d a1       	ldd	r24, Y+37	; 0x25
    330a:	9e a1       	ldd	r25, Y+38	; 0x26
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e8       	ldi	r20, 0x80	; 128
    3312:	5f e3       	ldi	r21, 0x3F	; 63
    3314:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3318:	88 23       	and	r24, r24
    331a:	2c f4       	brge	.+10     	; 0x3326 <LCD_void_write_char+0x68>
		__ticks = 1;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	9a a3       	std	Y+34, r25	; 0x22
    3322:	89 a3       	std	Y+33, r24	; 0x21
    3324:	3f c0       	rjmp	.+126    	; 0x33a4 <LCD_void_write_char+0xe6>
	else if (__tmp > 65535)
    3326:	6b a1       	ldd	r22, Y+35	; 0x23
    3328:	7c a1       	ldd	r23, Y+36	; 0x24
    332a:	8d a1       	ldd	r24, Y+37	; 0x25
    332c:	9e a1       	ldd	r25, Y+38	; 0x26
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	3f ef       	ldi	r19, 0xFF	; 255
    3332:	4f e7       	ldi	r20, 0x7F	; 127
    3334:	57 e4       	ldi	r21, 0x47	; 71
    3336:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    333a:	18 16       	cp	r1, r24
    333c:	4c f5       	brge	.+82     	; 0x3390 <LCD_void_write_char+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333e:	6f a1       	ldd	r22, Y+39	; 0x27
    3340:	78 a5       	ldd	r23, Y+40	; 0x28
    3342:	89 a5       	ldd	r24, Y+41	; 0x29
    3344:	9a a5       	ldd	r25, Y+42	; 0x2a
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e2       	ldi	r20, 0x20	; 32
    334c:	51 e4       	ldi	r21, 0x41	; 65
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	bc 01       	movw	r22, r24
    3358:	cd 01       	movw	r24, r26
    335a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	9a a3       	std	Y+34, r25	; 0x22
    3364:	89 a3       	std	Y+33, r24	; 0x21
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <LCD_void_write_char+0xc8>
    3368:	88 ec       	ldi	r24, 0xC8	; 200
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	98 a3       	std	Y+32, r25	; 0x20
    336e:	8f 8f       	std	Y+31, r24	; 0x1f
    3370:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3372:	98 a1       	ldd	r25, Y+32	; 0x20
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <LCD_void_write_char+0xb6>
    3378:	98 a3       	std	Y+32, r25	; 0x20
    337a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337c:	89 a1       	ldd	r24, Y+33	; 0x21
    337e:	9a a1       	ldd	r25, Y+34	; 0x22
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	9a a3       	std	Y+34, r25	; 0x22
    3384:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3386:	89 a1       	ldd	r24, Y+33	; 0x21
    3388:	9a a1       	ldd	r25, Y+34	; 0x22
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	69 f7       	brne	.-38     	; 0x3368 <LCD_void_write_char+0xaa>
    338e:	14 c0       	rjmp	.+40     	; 0x33b8 <LCD_void_write_char+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3390:	6b a1       	ldd	r22, Y+35	; 0x23
    3392:	7c a1       	ldd	r23, Y+36	; 0x24
    3394:	8d a1       	ldd	r24, Y+37	; 0x25
    3396:	9e a1       	ldd	r25, Y+38	; 0x26
    3398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	9a a3       	std	Y+34, r25	; 0x22
    33a2:	89 a3       	std	Y+33, r24	; 0x21
    33a4:	89 a1       	ldd	r24, Y+33	; 0x21
    33a6:	9a a1       	ldd	r25, Y+34	; 0x22
    33a8:	9e 8f       	std	Y+30, r25	; 0x1e
    33aa:	8d 8f       	std	Y+29, r24	; 0x1d
    33ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <LCD_void_write_char+0xf2>
    33b4:	9e 8f       	std	Y+30, r25	; 0x1e
    33b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DIO_void_setPin_value(PORTA_ID , LCD_RS_PIN ,HIGH);
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	61 e0       	ldi	r22, 0x01	; 1
    33bc:	41 e0       	ldi	r20, 0x01	; 1
    33be:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
#elif LCD_CURRENT_MODE == LCD_4BITS_MODE
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN1 , GETBIT(ch,4));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN2 , GETBIT(ch,5));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN3 , GETBIT(ch,6));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN4 , GETBIT(ch,7));
	 u8 porta_val = ((PORTA & 0x87) | ((ch &0xf0) >> 1));
    33c2:	eb e3       	ldi	r30, 0x3B	; 59
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	28 2f       	mov	r18, r24
    33ca:	27 78       	andi	r18, 0x87	; 135
    33cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    33ce:	88 2f       	mov	r24, r24
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	80 7f       	andi	r24, 0xF0	; 240
    33d4:	90 70       	andi	r25, 0x00	; 0
    33d6:	95 95       	asr	r25
    33d8:	87 95       	ror	r24
    33da:	82 2b       	or	r24, r18
    33dc:	8b a7       	std	Y+43, r24	; 0x2b
	 DIO_void_setPort_value(LCD_4BITS_PORT , porta_val);
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	6b a5       	ldd	r22, Y+43	; 0x2b
    33e2:	0e 94 17 10 	call	0x202e	; 0x202e <DIO_void_setPort_value>
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , HIGH);
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	62 e0       	ldi	r22, 0x02	; 2
    33ea:	41 e0       	ldi	r20, 0x01	; 1
    33ec:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	a0 e8       	ldi	r26, 0x80	; 128
    33f6:	bf e3       	ldi	r27, 0x3F	; 63
    33f8:	89 8f       	std	Y+25, r24	; 0x19
    33fa:	9a 8f       	std	Y+26, r25	; 0x1a
    33fc:	ab 8f       	std	Y+27, r26	; 0x1b
    33fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3400:	69 8d       	ldd	r22, Y+25	; 0x19
    3402:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3404:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3406:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	4a ef       	ldi	r20, 0xFA	; 250
    340e:	54 e4       	ldi	r21, 0x44	; 68
    3410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	8d 8b       	std	Y+21, r24	; 0x15
    341a:	9e 8b       	std	Y+22, r25	; 0x16
    341c:	af 8b       	std	Y+23, r26	; 0x17
    341e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3420:	6d 89       	ldd	r22, Y+21	; 0x15
    3422:	7e 89       	ldd	r23, Y+22	; 0x16
    3424:	8f 89       	ldd	r24, Y+23	; 0x17
    3426:	98 8d       	ldd	r25, Y+24	; 0x18
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	40 e8       	ldi	r20, 0x80	; 128
    342e:	5f e3       	ldi	r21, 0x3F	; 63
    3430:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3434:	88 23       	and	r24, r24
    3436:	2c f4       	brge	.+10     	; 0x3442 <LCD_void_write_char+0x184>
		__ticks = 1;
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9c 8b       	std	Y+20, r25	; 0x14
    343e:	8b 8b       	std	Y+19, r24	; 0x13
    3440:	3f c0       	rjmp	.+126    	; 0x34c0 <LCD_void_write_char+0x202>
	else if (__tmp > 65535)
    3442:	6d 89       	ldd	r22, Y+21	; 0x15
    3444:	7e 89       	ldd	r23, Y+22	; 0x16
    3446:	8f 89       	ldd	r24, Y+23	; 0x17
    3448:	98 8d       	ldd	r25, Y+24	; 0x18
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	3f ef       	ldi	r19, 0xFF	; 255
    344e:	4f e7       	ldi	r20, 0x7F	; 127
    3450:	57 e4       	ldi	r21, 0x47	; 71
    3452:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3456:	18 16       	cp	r1, r24
    3458:	4c f5       	brge	.+82     	; 0x34ac <LCD_void_write_char+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345a:	69 8d       	ldd	r22, Y+25	; 0x19
    345c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    345e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3460:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e2       	ldi	r20, 0x20	; 32
    3468:	51 e4       	ldi	r21, 0x41	; 65
    346a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	bc 01       	movw	r22, r24
    3474:	cd 01       	movw	r24, r26
    3476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	9c 8b       	std	Y+20, r25	; 0x14
    3480:	8b 8b       	std	Y+19, r24	; 0x13
    3482:	0f c0       	rjmp	.+30     	; 0x34a2 <LCD_void_write_char+0x1e4>
    3484:	88 ec       	ldi	r24, 0xC8	; 200
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	9a 8b       	std	Y+18, r25	; 0x12
    348a:	89 8b       	std	Y+17, r24	; 0x11
    348c:	89 89       	ldd	r24, Y+17	; 0x11
    348e:	9a 89       	ldd	r25, Y+18	; 0x12
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	f1 f7       	brne	.-4      	; 0x3490 <LCD_void_write_char+0x1d2>
    3494:	9a 8b       	std	Y+18, r25	; 0x12
    3496:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3498:	8b 89       	ldd	r24, Y+19	; 0x13
    349a:	9c 89       	ldd	r25, Y+20	; 0x14
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	9c 8b       	std	Y+20, r25	; 0x14
    34a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a2:	8b 89       	ldd	r24, Y+19	; 0x13
    34a4:	9c 89       	ldd	r25, Y+20	; 0x14
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	69 f7       	brne	.-38     	; 0x3484 <LCD_void_write_char+0x1c6>
    34aa:	14 c0       	rjmp	.+40     	; 0x34d4 <LCD_void_write_char+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ac:	6d 89       	ldd	r22, Y+21	; 0x15
    34ae:	7e 89       	ldd	r23, Y+22	; 0x16
    34b0:	8f 89       	ldd	r24, Y+23	; 0x17
    34b2:	98 8d       	ldd	r25, Y+24	; 0x18
    34b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	9c 8b       	std	Y+20, r25	; 0x14
    34be:	8b 8b       	std	Y+19, r24	; 0x13
    34c0:	8b 89       	ldd	r24, Y+19	; 0x13
    34c2:	9c 89       	ldd	r25, Y+20	; 0x14
    34c4:	98 8b       	std	Y+16, r25	; 0x10
    34c6:	8f 87       	std	Y+15, r24	; 0x0f
    34c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ca:	98 89       	ldd	r25, Y+16	; 0x10
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <LCD_void_write_char+0x20e>
    34d0:	98 8b       	std	Y+16, r25	; 0x10
    34d2:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1);
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , LOW);
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	62 e0       	ldi	r22, 0x02	; 2
    34d8:	40 e0       	ldi	r20, 0x00	; 0
    34da:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>

//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN1 , GETBIT(ch,0));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN2 , GETBIT(ch,1));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN3 , GETBIT(ch,2));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN4 , GETBIT(ch,3));
	 porta_val = ((PORTA & 0x87)|(ch << 3));
    34de:	eb e3       	ldi	r30, 0x3B	; 59
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	80 81       	ld	r24, Z
    34e4:	28 2f       	mov	r18, r24
    34e6:	27 78       	andi	r18, 0x87	; 135
    34e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    34ea:	88 2f       	mov	r24, r24
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	88 0f       	add	r24, r24
    34f0:	99 1f       	adc	r25, r25
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	82 2b       	or	r24, r18
    34fc:	8b a7       	std	Y+43, r24	; 0x2b
	 DIO_void_setPort_value(LCD_4BITS_PORT , porta_val);
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	6b a5       	ldd	r22, Y+43	; 0x2b
    3502:	0e 94 17 10 	call	0x202e	; 0x202e <DIO_void_setPort_value>
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , HIGH);
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	62 e0       	ldi	r22, 0x02	; 2
    350a:	41 e0       	ldi	r20, 0x01	; 1
    350c:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	a0 e8       	ldi	r26, 0x80	; 128
    3516:	bf e3       	ldi	r27, 0x3F	; 63
    3518:	8b 87       	std	Y+11, r24	; 0x0b
    351a:	9c 87       	std	Y+12, r25	; 0x0c
    351c:	ad 87       	std	Y+13, r26	; 0x0d
    351e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3520:	6b 85       	ldd	r22, Y+11	; 0x0b
    3522:	7c 85       	ldd	r23, Y+12	; 0x0c
    3524:	8d 85       	ldd	r24, Y+13	; 0x0d
    3526:	9e 85       	ldd	r25, Y+14	; 0x0e
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	4a ef       	ldi	r20, 0xFA	; 250
    352e:	54 e4       	ldi	r21, 0x44	; 68
    3530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	8f 83       	std	Y+7, r24	; 0x07
    353a:	98 87       	std	Y+8, r25	; 0x08
    353c:	a9 87       	std	Y+9, r26	; 0x09
    353e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3540:	6f 81       	ldd	r22, Y+7	; 0x07
    3542:	78 85       	ldd	r23, Y+8	; 0x08
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	9a 85       	ldd	r25, Y+10	; 0x0a
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e8       	ldi	r20, 0x80	; 128
    354e:	5f e3       	ldi	r21, 0x3F	; 63
    3550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3554:	88 23       	and	r24, r24
    3556:	2c f4       	brge	.+10     	; 0x3562 <LCD_void_write_char+0x2a4>
		__ticks = 1;
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	9e 83       	std	Y+6, r25	; 0x06
    355e:	8d 83       	std	Y+5, r24	; 0x05
    3560:	3f c0       	rjmp	.+126    	; 0x35e0 <LCD_void_write_char+0x322>
	else if (__tmp > 65535)
    3562:	6f 81       	ldd	r22, Y+7	; 0x07
    3564:	78 85       	ldd	r23, Y+8	; 0x08
    3566:	89 85       	ldd	r24, Y+9	; 0x09
    3568:	9a 85       	ldd	r25, Y+10	; 0x0a
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	3f ef       	ldi	r19, 0xFF	; 255
    356e:	4f e7       	ldi	r20, 0x7F	; 127
    3570:	57 e4       	ldi	r21, 0x47	; 71
    3572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3576:	18 16       	cp	r1, r24
    3578:	4c f5       	brge	.+82     	; 0x35cc <LCD_void_write_char+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357a:	6b 85       	ldd	r22, Y+11	; 0x0b
    357c:	7c 85       	ldd	r23, Y+12	; 0x0c
    357e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3580:	9e 85       	ldd	r25, Y+14	; 0x0e
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e2       	ldi	r20, 0x20	; 32
    3588:	51 e4       	ldi	r21, 0x41	; 65
    358a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	bc 01       	movw	r22, r24
    3594:	cd 01       	movw	r24, r26
    3596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	9e 83       	std	Y+6, r25	; 0x06
    35a0:	8d 83       	std	Y+5, r24	; 0x05
    35a2:	0f c0       	rjmp	.+30     	; 0x35c2 <LCD_void_write_char+0x304>
    35a4:	88 ec       	ldi	r24, 0xC8	; 200
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	9c 83       	std	Y+4, r25	; 0x04
    35aa:	8b 83       	std	Y+3, r24	; 0x03
    35ac:	8b 81       	ldd	r24, Y+3	; 0x03
    35ae:	9c 81       	ldd	r25, Y+4	; 0x04
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	f1 f7       	brne	.-4      	; 0x35b0 <LCD_void_write_char+0x2f2>
    35b4:	9c 83       	std	Y+4, r25	; 0x04
    35b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ba:	9e 81       	ldd	r25, Y+6	; 0x06
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	9e 83       	std	Y+6, r25	; 0x06
    35c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c2:	8d 81       	ldd	r24, Y+5	; 0x05
    35c4:	9e 81       	ldd	r25, Y+6	; 0x06
    35c6:	00 97       	sbiw	r24, 0x00	; 0
    35c8:	69 f7       	brne	.-38     	; 0x35a4 <LCD_void_write_char+0x2e6>
    35ca:	14 c0       	rjmp	.+40     	; 0x35f4 <LCD_void_write_char+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35cc:	6f 81       	ldd	r22, Y+7	; 0x07
    35ce:	78 85       	ldd	r23, Y+8	; 0x08
    35d0:	89 85       	ldd	r24, Y+9	; 0x09
    35d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	9e 83       	std	Y+6, r25	; 0x06
    35de:	8d 83       	std	Y+5, r24	; 0x05
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	9a 83       	std	Y+2, r25	; 0x02
    35e6:	89 83       	std	Y+1, r24	; 0x01
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	9a 81       	ldd	r25, Y+2	; 0x02
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <LCD_void_write_char+0x32e>
    35f0:	9a 83       	std	Y+2, r25	; 0x02
    35f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , LOW);
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	62 e0       	ldi	r22, 0x02	; 2
    35f8:	40 e0       	ldi	r20, 0x00	; 0
    35fa:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <DIO_void_setPin_value>


#endif
}
    35fe:	ac 96       	adiw	r28, 0x2c	; 44
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	08 95       	ret

00003610 <LCD_void_write_string>:
void LCD_void_write_string(u8* str)
{
    3610:	df 93       	push	r29
    3612:	cf 93       	push	r28
    3614:	00 d0       	rcall	.+0      	; 0x3616 <LCD_void_write_string+0x6>
    3616:	0f 92       	push	r0
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	9b 83       	std	Y+3, r25	; 0x03
    361e:	8a 83       	std	Y+2, r24	; 0x02
	   u8 counter=0;
    3620:	19 82       	std	Y+1, r1	; 0x01
    3622:	0e c0       	rjmp	.+28     	; 0x3640 <LCD_void_write_string+0x30>
       while(str[counter]!='\0')
       {
    	   LCD_void_write_char(str[counter]);
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	28 2f       	mov	r18, r24
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	9b 81       	ldd	r25, Y+3	; 0x03
    362e:	fc 01       	movw	r30, r24
    3630:	e2 0f       	add	r30, r18
    3632:	f3 1f       	adc	r31, r19
    3634:	80 81       	ld	r24, Z
    3636:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_void_write_char>
    	   counter++;
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	8f 5f       	subi	r24, 0xFF	; 255
    363e:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void LCD_void_write_string(u8* str)
{
	   u8 counter=0;
       while(str[counter]!='\0')
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	28 2f       	mov	r18, r24
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	9b 81       	ldd	r25, Y+3	; 0x03
    364a:	fc 01       	movw	r30, r24
    364c:	e2 0f       	add	r30, r18
    364e:	f3 1f       	adc	r31, r19
    3650:	80 81       	ld	r24, Z
    3652:	88 23       	and	r24, r24
    3654:	39 f7       	brne	.-50     	; 0x3624 <LCD_void_write_string+0x14>
       {
    	   LCD_void_write_char(str[counter]);
    	   counter++;
       }
}
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <LCD_void_print_unsigned_integer>:
void LCD_void_print_unsigned_integer(u32 number)
{
    3662:	0f 93       	push	r16
    3664:	1f 93       	push	r17
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	65 97       	sbiw	r28, 0x15	; 21
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	6a 8b       	std	Y+18, r22	; 0x12
    367c:	7b 8b       	std	Y+19, r23	; 0x13
    367e:	8c 8b       	std	Y+20, r24	; 0x14
    3680:	9d 8b       	std	Y+21, r25	; 0x15
	   u8 Str[16];
		       u8 count=0;
    3682:	19 82       	std	Y+1, r1	; 0x01
		       if(number==0)
    3684:	8a 89       	ldd	r24, Y+18	; 0x12
    3686:	9b 89       	ldd	r25, Y+19	; 0x13
    3688:	ac 89       	ldd	r26, Y+20	; 0x14
    368a:	bd 89       	ldd	r27, Y+21	; 0x15
    368c:	00 97       	sbiw	r24, 0x00	; 0
    368e:	a1 05       	cpc	r26, r1
    3690:	b1 05       	cpc	r27, r1
    3692:	89 f5       	brne	.+98     	; 0x36f6 <LCD_void_print_unsigned_integer+0x94>
		       {
		    	   LCD_void_write_char('0');
    3694:	80 e3       	ldi	r24, 0x30	; 48
    3696:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_void_write_char>
    369a:	2d c0       	rjmp	.+90     	; 0x36f6 <LCD_void_print_unsigned_integer+0x94>
		       }
		       while(number && (count<16))
		       {
		    	   Str[count++]=number%10;
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	08 2f       	mov	r16, r24
    36a0:	10 e0       	ldi	r17, 0x00	; 0
    36a2:	8a 89       	ldd	r24, Y+18	; 0x12
    36a4:	9b 89       	ldd	r25, Y+19	; 0x13
    36a6:	ac 89       	ldd	r26, Y+20	; 0x14
    36a8:	bd 89       	ldd	r27, Y+21	; 0x15
    36aa:	2a e0       	ldi	r18, 0x0A	; 10
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e0       	ldi	r20, 0x00	; 0
    36b0:	50 e0       	ldi	r21, 0x00	; 0
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__udivmodsi4>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	28 2f       	mov	r18, r24
    36c0:	ce 01       	movw	r24, r28
    36c2:	02 96       	adiw	r24, 0x02	; 2
    36c4:	fc 01       	movw	r30, r24
    36c6:	e0 0f       	add	r30, r16
    36c8:	f1 1f       	adc	r31, r17
    36ca:	20 83       	st	Z, r18
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	8f 5f       	subi	r24, 0xFF	; 255
    36d0:	89 83       	std	Y+1, r24	; 0x01
		    	   number/=10;
    36d2:	8a 89       	ldd	r24, Y+18	; 0x12
    36d4:	9b 89       	ldd	r25, Y+19	; 0x13
    36d6:	ac 89       	ldd	r26, Y+20	; 0x14
    36d8:	bd 89       	ldd	r27, Y+21	; 0x15
    36da:	2a e0       	ldi	r18, 0x0A	; 10
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 e0       	ldi	r20, 0x00	; 0
    36e0:	50 e0       	ldi	r21, 0x00	; 0
    36e2:	bc 01       	movw	r22, r24
    36e4:	cd 01       	movw	r24, r26
    36e6:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__udivmodsi4>
    36ea:	da 01       	movw	r26, r20
    36ec:	c9 01       	movw	r24, r18
    36ee:	8a 8b       	std	Y+18, r24	; 0x12
    36f0:	9b 8b       	std	Y+19, r25	; 0x13
    36f2:	ac 8b       	std	Y+20, r26	; 0x14
    36f4:	bd 8b       	std	Y+21, r27	; 0x15
		       u8 count=0;
		       if(number==0)
		       {
		    	   LCD_void_write_char('0');
		       }
		       while(number && (count<16))
    36f6:	8a 89       	ldd	r24, Y+18	; 0x12
    36f8:	9b 89       	ldd	r25, Y+19	; 0x13
    36fa:	ac 89       	ldd	r26, Y+20	; 0x14
    36fc:	bd 89       	ldd	r27, Y+21	; 0x15
    36fe:	00 97       	sbiw	r24, 0x00	; 0
    3700:	a1 05       	cpc	r26, r1
    3702:	b1 05       	cpc	r27, r1
    3704:	99 f0       	breq	.+38     	; 0x372c <LCD_void_print_unsigned_integer+0xca>
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	80 31       	cpi	r24, 0x10	; 16
    370a:	40 f2       	brcs	.-112    	; 0x369c <LCD_void_print_unsigned_integer+0x3a>
    370c:	0f c0       	rjmp	.+30     	; 0x372c <LCD_void_print_unsigned_integer+0xca>
		    	   Str[count++]=number%10;
		    	   number/=10;
		       }
		       while(count)
		       {
		    	   LCD_void_write_char(Str[--count]+'0');
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	81 50       	subi	r24, 0x01	; 1
    3712:	89 83       	std	Y+1, r24	; 0x01
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	28 2f       	mov	r18, r24
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	ce 01       	movw	r24, r28
    371c:	02 96       	adiw	r24, 0x02	; 2
    371e:	fc 01       	movw	r30, r24
    3720:	e2 0f       	add	r30, r18
    3722:	f3 1f       	adc	r31, r19
    3724:	80 81       	ld	r24, Z
    3726:	80 5d       	subi	r24, 0xD0	; 208
    3728:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_void_write_char>
		       while(number && (count<16))
		       {
		    	   Str[count++]=number%10;
		    	   number/=10;
		       }
		       while(count)
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	88 23       	and	r24, r24
    3730:	71 f7       	brne	.-36     	; 0x370e <LCD_void_print_unsigned_integer+0xac>
		       {
		    	   LCD_void_write_char(Str[--count]+'0');
		       }
}
    3732:	65 96       	adiw	r28, 0x15	; 21
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	f8 94       	cli
    3738:	de bf       	out	0x3e, r29	; 62
    373a:	0f be       	out	0x3f, r0	; 63
    373c:	cd bf       	out	0x3d, r28	; 61
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	1f 91       	pop	r17
    3744:	0f 91       	pop	r16
    3746:	08 95       	ret

00003748 <LCD_void_print_signed_integer>:
void LCD_void_print_signed_integer  (s32 number)
{
    3748:	0f 93       	push	r16
    374a:	1f 93       	push	r17
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	65 97       	sbiw	r28, 0x15	; 21
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	6a 8b       	std	Y+18, r22	; 0x12
    3762:	7b 8b       	std	Y+19, r23	; 0x13
    3764:	8c 8b       	std	Y+20, r24	; 0x14
    3766:	9d 8b       	std	Y+21, r25	; 0x15
	               s8 Str[16];
			       u8 count=0;
    3768:	19 82       	std	Y+1, r1	; 0x01
			       if(number==0)
    376a:	8a 89       	ldd	r24, Y+18	; 0x12
    376c:	9b 89       	ldd	r25, Y+19	; 0x13
    376e:	ac 89       	ldd	r26, Y+20	; 0x14
    3770:	bd 89       	ldd	r27, Y+21	; 0x15
    3772:	00 97       	sbiw	r24, 0x00	; 0
    3774:	a1 05       	cpc	r26, r1
    3776:	b1 05       	cpc	r27, r1
    3778:	b1 f4       	brne	.+44     	; 0x37a6 <LCD_void_print_signed_integer+0x5e>
					   {
						   LCD_void_write_char('0');
    377a:	80 e3       	ldi	r24, 0x30	; 48
    377c:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_void_write_char>
    3780:	12 c0       	rjmp	.+36     	; 0x37a6 <LCD_void_print_signed_integer+0x5e>
					   }
			       while(number <0)
					   {
			    	   LCD_void_write_char('-');
    3782:	8d e2       	ldi	r24, 0x2D	; 45
    3784:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_void_write_char>
						   number*=-1;
    3788:	8a 89       	ldd	r24, Y+18	; 0x12
    378a:	9b 89       	ldd	r25, Y+19	; 0x13
    378c:	ac 89       	ldd	r26, Y+20	; 0x14
    378e:	bd 89       	ldd	r27, Y+21	; 0x15
    3790:	b0 95       	com	r27
    3792:	a0 95       	com	r26
    3794:	90 95       	com	r25
    3796:	81 95       	neg	r24
    3798:	9f 4f       	sbci	r25, 0xFF	; 255
    379a:	af 4f       	sbci	r26, 0xFF	; 255
    379c:	bf 4f       	sbci	r27, 0xFF	; 255
    379e:	8a 8b       	std	Y+18, r24	; 0x12
    37a0:	9b 8b       	std	Y+19, r25	; 0x13
    37a2:	ac 8b       	std	Y+20, r26	; 0x14
    37a4:	bd 8b       	std	Y+21, r27	; 0x15
			       u8 count=0;
			       if(number==0)
					   {
						   LCD_void_write_char('0');
					   }
			       while(number <0)
    37a6:	8a 89       	ldd	r24, Y+18	; 0x12
    37a8:	9b 89       	ldd	r25, Y+19	; 0x13
    37aa:	ac 89       	ldd	r26, Y+20	; 0x14
    37ac:	bd 89       	ldd	r27, Y+21	; 0x15
    37ae:	bb 23       	and	r27, r27
    37b0:	44 f3       	brlt	.-48     	; 0x3782 <LCD_void_print_signed_integer+0x3a>
    37b2:	2d c0       	rjmp	.+90     	; 0x380e <LCD_void_print_signed_integer+0xc6>
			    	   LCD_void_write_char('-');
						   number*=-1;
					   }
				  while(number && (count<16))
					   {
						   Str[count++]=number%10;
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	08 2f       	mov	r16, r24
    37b8:	10 e0       	ldi	r17, 0x00	; 0
    37ba:	8a 89       	ldd	r24, Y+18	; 0x12
    37bc:	9b 89       	ldd	r25, Y+19	; 0x13
    37be:	ac 89       	ldd	r26, Y+20	; 0x14
    37c0:	bd 89       	ldd	r27, Y+21	; 0x15
    37c2:	2a e0       	ldi	r18, 0x0A	; 10
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	50 e0       	ldi	r21, 0x00	; 0
    37ca:	bc 01       	movw	r22, r24
    37cc:	cd 01       	movw	r24, r26
    37ce:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__divmodsi4>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	28 2f       	mov	r18, r24
    37d8:	ce 01       	movw	r24, r28
    37da:	02 96       	adiw	r24, 0x02	; 2
    37dc:	fc 01       	movw	r30, r24
    37de:	e0 0f       	add	r30, r16
    37e0:	f1 1f       	adc	r31, r17
    37e2:	20 83       	st	Z, r18
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	8f 5f       	subi	r24, 0xFF	; 255
    37e8:	89 83       	std	Y+1, r24	; 0x01
						   number/=10;
    37ea:	8a 89       	ldd	r24, Y+18	; 0x12
    37ec:	9b 89       	ldd	r25, Y+19	; 0x13
    37ee:	ac 89       	ldd	r26, Y+20	; 0x14
    37f0:	bd 89       	ldd	r27, Y+21	; 0x15
    37f2:	2a e0       	ldi	r18, 0x0A	; 10
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	40 e0       	ldi	r20, 0x00	; 0
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	bc 01       	movw	r22, r24
    37fc:	cd 01       	movw	r24, r26
    37fe:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__divmodsi4>
    3802:	da 01       	movw	r26, r20
    3804:	c9 01       	movw	r24, r18
    3806:	8a 8b       	std	Y+18, r24	; 0x12
    3808:	9b 8b       	std	Y+19, r25	; 0x13
    380a:	ac 8b       	std	Y+20, r26	; 0x14
    380c:	bd 8b       	std	Y+21, r27	; 0x15
			       while(number <0)
					   {
			    	   LCD_void_write_char('-');
						   number*=-1;
					   }
				  while(number && (count<16))
    380e:	8a 89       	ldd	r24, Y+18	; 0x12
    3810:	9b 89       	ldd	r25, Y+19	; 0x13
    3812:	ac 89       	ldd	r26, Y+20	; 0x14
    3814:	bd 89       	ldd	r27, Y+21	; 0x15
    3816:	00 97       	sbiw	r24, 0x00	; 0
    3818:	a1 05       	cpc	r26, r1
    381a:	b1 05       	cpc	r27, r1
    381c:	99 f0       	breq	.+38     	; 0x3844 <LCD_void_print_signed_integer+0xfc>
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	80 31       	cpi	r24, 0x10	; 16
    3822:	40 f2       	brcs	.-112    	; 0x37b4 <LCD_void_print_signed_integer+0x6c>
    3824:	0f c0       	rjmp	.+30     	; 0x3844 <LCD_void_print_signed_integer+0xfc>
						   number/=10;
					   }

				   while(count)
					   {
						   LCD_void_write_char(Str[--count]+'0');
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	81 50       	subi	r24, 0x01	; 1
    382a:	89 83       	std	Y+1, r24	; 0x01
    382c:	89 81       	ldd	r24, Y+1	; 0x01
    382e:	28 2f       	mov	r18, r24
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	ce 01       	movw	r24, r28
    3834:	02 96       	adiw	r24, 0x02	; 2
    3836:	fc 01       	movw	r30, r24
    3838:	e2 0f       	add	r30, r18
    383a:	f3 1f       	adc	r31, r19
    383c:	80 81       	ld	r24, Z
    383e:	80 5d       	subi	r24, 0xD0	; 208
    3840:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_void_write_char>
					   {
						   Str[count++]=number%10;
						   number/=10;
					   }

				   while(count)
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	88 23       	and	r24, r24
    3848:	71 f7       	brne	.-36     	; 0x3826 <LCD_void_print_signed_integer+0xde>
					   {
						   LCD_void_write_char(Str[--count]+'0');
					   }
}
    384a:	65 96       	adiw	r28, 0x15	; 21
    384c:	0f b6       	in	r0, 0x3f	; 63
    384e:	f8 94       	cli
    3850:	de bf       	out	0x3e, r29	; 62
    3852:	0f be       	out	0x3f, r0	; 63
    3854:	cd bf       	out	0x3d, r28	; 61
    3856:	cf 91       	pop	r28
    3858:	df 91       	pop	r29
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	08 95       	ret

00003860 <LCD_void_goto>:
void LCD_void_goto(u8 raw , u8 col)
{
    3860:	df 93       	push	r29
    3862:	cf 93       	push	r28
    3864:	00 d0       	rcall	.+0      	; 0x3866 <LCD_void_goto+0x6>
    3866:	00 d0       	rcall	.+0      	; 0x3868 <LCD_void_goto+0x8>
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62
    386c:	89 83       	std	Y+1, r24	; 0x01
    386e:	6a 83       	std	Y+2, r22	; 0x02
         switch(raw)
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	28 2f       	mov	r18, r24
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	3c 83       	std	Y+4, r19	; 0x04
    3878:	2b 83       	std	Y+3, r18	; 0x03
    387a:	8b 81       	ldd	r24, Y+3	; 0x03
    387c:	9c 81       	ldd	r25, Y+4	; 0x04
    387e:	00 97       	sbiw	r24, 0x00	; 0
    3880:	31 f0       	breq	.+12     	; 0x388e <LCD_void_goto+0x2e>
    3882:	2b 81       	ldd	r18, Y+3	; 0x03
    3884:	3c 81       	ldd	r19, Y+4	; 0x04
    3886:	21 30       	cpi	r18, 0x01	; 1
    3888:	31 05       	cpc	r19, r1
    388a:	49 f0       	breq	.+18     	; 0x389e <LCD_void_goto+0x3e>
    388c:	0f c0       	rjmp	.+30     	; 0x38ac <LCD_void_goto+0x4c>
         {
         case 0:
        	 if ((col <16) &&  (col >=0))
    388e:	8a 81       	ldd	r24, Y+2	; 0x02
    3890:	80 31       	cpi	r24, 0x10	; 16
    3892:	60 f4       	brcc	.+24     	; 0x38ac <LCD_void_goto+0x4c>
        	 {
        		 LCD_void_send_command(0x80+col);
    3894:	8a 81       	ldd	r24, Y+2	; 0x02
    3896:	80 58       	subi	r24, 0x80	; 128
    3898:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
    389c:	07 c0       	rjmp	.+14     	; 0x38ac <LCD_void_goto+0x4c>
        	 }
        	 break;
         case 1:
			 if ((col <16) &&  (col >=0))
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	80 31       	cpi	r24, 0x10	; 16
    38a2:	20 f4       	brcc	.+8      	; 0x38ac <LCD_void_goto+0x4c>
			 {
				 LCD_void_send_command(0xc0+col);
    38a4:	8a 81       	ldd	r24, Y+2	; 0x02
    38a6:	80 54       	subi	r24, 0x40	; 64
    38a8:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
			 }
			 break;
         }
}
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	cf 91       	pop	r28
    38b6:	df 91       	pop	r29
    38b8:	08 95       	ret

000038ba <main>:
#include "includes.h"

int main(void)
{        ////////////////////////////////
    38ba:	ef 92       	push	r14
    38bc:	ff 92       	push	r15
    38be:	0f 93       	push	r16
    38c0:	1f 93       	push	r17
    38c2:	df 93       	push	r29
    38c4:	cf 93       	push	r28
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	eb 97       	sbiw	r28, 0x3b	; 59
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
	DIO_void_setPin_direction(PORTD_ID,PIN0,INPUT);
    38d6:	83 e0       	ldi	r24, 0x03	; 3
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	40 e0       	ldi	r20, 0x00	; 0
    38dc:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTD_ID,PIN1,OUTPUT);
    38e0:	83 e0       	ldi	r24, 0x03	; 3
    38e2:	61 e0       	ldi	r22, 0x01	; 1
    38e4:	41 e0       	ldi	r20, 0x01	; 1
    38e6:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_void_setPin_direction>
	LCD_void_init(LCD_enum_4BITS_MODE);
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_void_init>
	UART_void_initialize();
    38f0:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_void_initialize>
	TIMER0_void_Intialize(TIMER0_FASTPWM_MODE , Prescaller_64 , TIMER0_NONINVERTING_PWM_OC0 );;
    38f4:	82 e0       	ldi	r24, 0x02	; 2
    38f6:	63 e0       	ldi	r22, 0x03	; 3
    38f8:	42 e0       	ldi	r20, 0x02	; 2
    38fa:	0e 94 57 08 	call	0x10ae	; 0x10ae <TIMER0_void_Intialize>
	 ////////////////////////////////
	u8 StorePass[]="123456";
    38fe:	ce 01       	movw	r24, r28
    3900:	88 96       	adiw	r24, 0x28	; 40
    3902:	98 af       	std	Y+56, r25	; 0x38
    3904:	8f ab       	std	Y+55, r24	; 0x37
    3906:	e6 e8       	ldi	r30, 0x86	; 134
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	fa af       	std	Y+58, r31	; 0x3a
    390c:	e9 af       	std	Y+57, r30	; 0x39
    390e:	f7 e0       	ldi	r31, 0x07	; 7
    3910:	fb af       	std	Y+59, r31	; 0x3b
    3912:	e9 ad       	ldd	r30, Y+57	; 0x39
    3914:	fa ad       	ldd	r31, Y+58	; 0x3a
    3916:	00 80       	ld	r0, Z
    3918:	89 ad       	ldd	r24, Y+57	; 0x39
    391a:	9a ad       	ldd	r25, Y+58	; 0x3a
    391c:	01 96       	adiw	r24, 0x01	; 1
    391e:	9a af       	std	Y+58, r25	; 0x3a
    3920:	89 af       	std	Y+57, r24	; 0x39
    3922:	ef a9       	ldd	r30, Y+55	; 0x37
    3924:	f8 ad       	ldd	r31, Y+56	; 0x38
    3926:	00 82       	st	Z, r0
    3928:	8f a9       	ldd	r24, Y+55	; 0x37
    392a:	98 ad       	ldd	r25, Y+56	; 0x38
    392c:	01 96       	adiw	r24, 0x01	; 1
    392e:	98 af       	std	Y+56, r25	; 0x38
    3930:	8f ab       	std	Y+55, r24	; 0x37
    3932:	9b ad       	ldd	r25, Y+59	; 0x3b
    3934:	91 50       	subi	r25, 0x01	; 1
    3936:	9b af       	std	Y+59, r25	; 0x3b
    3938:	eb ad       	ldd	r30, Y+59	; 0x3b
    393a:	ee 23       	and	r30, r30
    393c:	51 f7       	brne	.-44     	; 0x3912 <main+0x58>
	u32 i, j,count=0,number=sizeof(StorePass)-1;
    393e:	1c 8e       	std	Y+28, r1	; 0x1c
    3940:	1d 8e       	std	Y+29, r1	; 0x1d
    3942:	1e 8e       	std	Y+30, r1	; 0x1e
    3944:	1f 8e       	std	Y+31, r1	; 0x1f
    3946:	86 e0       	ldi	r24, 0x06	; 6
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	a0 e0       	ldi	r26, 0x00	; 0
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	88 8f       	std	Y+24, r24	; 0x18
    3950:	99 8f       	std	Y+25, r25	; 0x19
    3952:	aa 8f       	std	Y+26, r26	; 0x1a
    3954:	bb 8f       	std	Y+27, r27	; 0x1b
	char pass[sizeof(StorePass)-1];
	u32 digit=0;
    3956:	1c 8a       	std	Y+20, r1	; 0x14
    3958:	1d 8a       	std	Y+21, r1	; 0x15
    395a:	1e 8a       	std	Y+22, r1	; 0x16
    395c:	1f 8a       	std	Y+23, r1	; 0x17
	//////////////////////////////
	LCD_void_goto(0,1);
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	61 e0       	ldi	r22, 0x01	; 1
    3962:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_void_goto>
	LCD_void_write_string("ENTER PASSWORD");
    3966:	80 e6       	ldi	r24, 0x60	; 96
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	0e 94 08 1b 	call	0x3610	; 0x3610 <LCD_void_write_string>
	LCD_void_goto(1,1);
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	61 e0       	ldi	r22, 0x01	; 1
    3972:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_void_goto>
	for(i=0;i<=sizeof(StorePass)-1;i++)
    3976:	1c a2       	std	Y+36, r1	; 0x24
    3978:	1d a2       	std	Y+37, r1	; 0x25
    397a:	1e a2       	std	Y+38, r1	; 0x26
    397c:	1f a2       	std	Y+39, r1	; 0x27
    397e:	25 c0       	rjmp	.+74     	; 0x39ca <main+0x110>
	{
				pass[i] = UART_void_recieve_data();      //Receive PASSWARD
    3980:	ec a0       	ldd	r14, Y+36	; 0x24
    3982:	fd a0       	ldd	r15, Y+37	; 0x25
    3984:	0e a1       	ldd	r16, Y+38	; 0x26
    3986:	1f a1       	ldd	r17, Y+39	; 0x27
    3988:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_void_recieve_data>
    398c:	28 2f       	mov	r18, r24
    398e:	ce 01       	movw	r24, r28
    3990:	8f 96       	adiw	r24, 0x2f	; 47
    3992:	fc 01       	movw	r30, r24
    3994:	ee 0d       	add	r30, r14
    3996:	ff 1d       	adc	r31, r15
    3998:	20 83       	st	Z, r18
				LCD_void_write_char(pass[i]);
    399a:	8c a1       	ldd	r24, Y+36	; 0x24
    399c:	9d a1       	ldd	r25, Y+37	; 0x25
    399e:	ae a1       	ldd	r26, Y+38	; 0x26
    39a0:	bf a1       	ldd	r27, Y+39	; 0x27
    39a2:	9e 01       	movw	r18, r28
    39a4:	21 5d       	subi	r18, 0xD1	; 209
    39a6:	3f 4f       	sbci	r19, 0xFF	; 255
    39a8:	f9 01       	movw	r30, r18
    39aa:	e8 0f       	add	r30, r24
    39ac:	f9 1f       	adc	r31, r25
    39ae:	80 81       	ld	r24, Z
    39b0:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_void_write_char>
	u32 digit=0;
	//////////////////////////////
	LCD_void_goto(0,1);
	LCD_void_write_string("ENTER PASSWORD");
	LCD_void_goto(1,1);
	for(i=0;i<=sizeof(StorePass)-1;i++)
    39b4:	8c a1       	ldd	r24, Y+36	; 0x24
    39b6:	9d a1       	ldd	r25, Y+37	; 0x25
    39b8:	ae a1       	ldd	r26, Y+38	; 0x26
    39ba:	bf a1       	ldd	r27, Y+39	; 0x27
    39bc:	01 96       	adiw	r24, 0x01	; 1
    39be:	a1 1d       	adc	r26, r1
    39c0:	b1 1d       	adc	r27, r1
    39c2:	8c a3       	std	Y+36, r24	; 0x24
    39c4:	9d a3       	std	Y+37, r25	; 0x25
    39c6:	ae a3       	std	Y+38, r26	; 0x26
    39c8:	bf a3       	std	Y+39, r27	; 0x27
    39ca:	8c a1       	ldd	r24, Y+36	; 0x24
    39cc:	9d a1       	ldd	r25, Y+37	; 0x25
    39ce:	ae a1       	ldd	r26, Y+38	; 0x26
    39d0:	bf a1       	ldd	r27, Y+39	; 0x27
    39d2:	87 30       	cpi	r24, 0x07	; 7
    39d4:	91 05       	cpc	r25, r1
    39d6:	a1 05       	cpc	r26, r1
    39d8:	b1 05       	cpc	r27, r1
    39da:	90 f2       	brcs	.-92     	; 0x3980 <main+0xc6>
	{
				pass[i] = UART_void_recieve_data();      //Receive PASSWARD
				LCD_void_write_char(pass[i]);
	}
	for(j=0;j<number;j++)
    39dc:	18 a2       	std	Y+32, r1	; 0x20
    39de:	19 a2       	std	Y+33, r1	; 0x21
    39e0:	1a a2       	std	Y+34, r1	; 0x22
    39e2:	1b a2       	std	Y+35, r1	; 0x23
    39e4:	2e c0       	rjmp	.+92     	; 0x3a42 <main+0x188>
		  {
			if(pass[j]==StorePass[j])
    39e6:	88 a1       	ldd	r24, Y+32	; 0x20
    39e8:	99 a1       	ldd	r25, Y+33	; 0x21
    39ea:	aa a1       	ldd	r26, Y+34	; 0x22
    39ec:	bb a1       	ldd	r27, Y+35	; 0x23
    39ee:	9e 01       	movw	r18, r28
    39f0:	21 5d       	subi	r18, 0xD1	; 209
    39f2:	3f 4f       	sbci	r19, 0xFF	; 255
    39f4:	f9 01       	movw	r30, r18
    39f6:	e8 0f       	add	r30, r24
    39f8:	f9 1f       	adc	r31, r25
    39fa:	40 81       	ld	r20, Z
    39fc:	88 a1       	ldd	r24, Y+32	; 0x20
    39fe:	99 a1       	ldd	r25, Y+33	; 0x21
    3a00:	aa a1       	ldd	r26, Y+34	; 0x22
    3a02:	bb a1       	ldd	r27, Y+35	; 0x23
    3a04:	9e 01       	movw	r18, r28
    3a06:	28 5d       	subi	r18, 0xD8	; 216
    3a08:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0a:	f9 01       	movw	r30, r18
    3a0c:	e8 0f       	add	r30, r24
    3a0e:	f9 1f       	adc	r31, r25
    3a10:	80 81       	ld	r24, Z
    3a12:	48 17       	cp	r20, r24
    3a14:	59 f4       	brne	.+22     	; 0x3a2c <main+0x172>
			count++;
    3a16:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a18:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a1a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3a1c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3a1e:	01 96       	adiw	r24, 0x01	; 1
    3a20:	a1 1d       	adc	r26, r1
    3a22:	b1 1d       	adc	r27, r1
    3a24:	8c 8f       	std	Y+28, r24	; 0x1c
    3a26:	9d 8f       	std	Y+29, r25	; 0x1d
    3a28:	ae 8f       	std	Y+30, r26	; 0x1e
    3a2a:	bf 8f       	std	Y+31, r27	; 0x1f
	for(i=0;i<=sizeof(StorePass)-1;i++)
	{
				pass[i] = UART_void_recieve_data();      //Receive PASSWARD
				LCD_void_write_char(pass[i]);
	}
	for(j=0;j<number;j++)
    3a2c:	88 a1       	ldd	r24, Y+32	; 0x20
    3a2e:	99 a1       	ldd	r25, Y+33	; 0x21
    3a30:	aa a1       	ldd	r26, Y+34	; 0x22
    3a32:	bb a1       	ldd	r27, Y+35	; 0x23
    3a34:	01 96       	adiw	r24, 0x01	; 1
    3a36:	a1 1d       	adc	r26, r1
    3a38:	b1 1d       	adc	r27, r1
    3a3a:	88 a3       	std	Y+32, r24	; 0x20
    3a3c:	99 a3       	std	Y+33, r25	; 0x21
    3a3e:	aa a3       	std	Y+34, r26	; 0x22
    3a40:	bb a3       	std	Y+35, r27	; 0x23
    3a42:	28 a1       	ldd	r18, Y+32	; 0x20
    3a44:	39 a1       	ldd	r19, Y+33	; 0x21
    3a46:	4a a1       	ldd	r20, Y+34	; 0x22
    3a48:	5b a1       	ldd	r21, Y+35	; 0x23
    3a4a:	88 8d       	ldd	r24, Y+24	; 0x18
    3a4c:	99 8d       	ldd	r25, Y+25	; 0x19
    3a4e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3a50:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3a52:	28 17       	cp	r18, r24
    3a54:	39 07       	cpc	r19, r25
    3a56:	4a 07       	cpc	r20, r26
    3a58:	5b 07       	cpc	r21, r27
    3a5a:	28 f2       	brcs	.-118    	; 0x39e6 <main+0x12c>
		  {
			if(pass[j]==StorePass[j])
			count++;
		  }
	  if(count==number)
    3a5c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3a5e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    3a60:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3a62:	5f 8d       	ldd	r21, Y+31	; 0x1f
    3a64:	88 8d       	ldd	r24, Y+24	; 0x18
    3a66:	99 8d       	ldd	r25, Y+25	; 0x19
    3a68:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3a6a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3a6c:	28 17       	cp	r18, r24
    3a6e:	39 07       	cpc	r19, r25
    3a70:	4a 07       	cpc	r20, r26
    3a72:	5b 07       	cpc	r21, r27
    3a74:	09 f0       	breq	.+2      	; 0x3a78 <main+0x1be>
    3a76:	80 c0       	rjmp	.+256    	; 0x3b78 <main+0x2be>
	  {
		  LCD_void_send_command(0x01);
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
		while(1)
		{
			/////////////////////////////////////////////////////////////////
///////////////////////////////////START TEMP SENSOR/////////////////////////////////////
			////////////////////////////////////////////////////////////////
			 u8 check_T=UART_void_recieve_data();
    3a7e:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_void_recieve_data>
    3a82:	8b 8b       	std	Y+19, r24	; 0x13
			 if(check_T=='T')
    3a84:	8b 89       	ldd	r24, Y+19	; 0x13
    3a86:	84 35       	cpi	r24, 0x54	; 84
    3a88:	d1 f7       	brne	.-12     	; 0x3a7e <main+0x1c4>
			 {
				  u8 Temp_Data[2]={0};
    3a8a:	1e aa       	std	Y+54, r1	; 0x36
    3a8c:	1d aa       	std	Y+53, r1	; 0x35
				  LCD_void_goto(0,0);
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	60 e0       	ldi	r22, 0x00	; 0
    3a92:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_void_goto>
				  LCD_void_write_string((u8*)"Temp = ");
    3a96:	8f e6       	ldi	r24, 0x6F	; 111
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	0e 94 08 1b 	call	0x3610	; 0x3610 <LCD_void_write_string>
				  for(i=0;i<2;i++)
    3a9e:	1c a2       	std	Y+36, r1	; 0x24
    3aa0:	1d a2       	std	Y+37, r1	; 0x25
    3aa2:	1e a2       	std	Y+38, r1	; 0x26
    3aa4:	1f a2       	std	Y+39, r1	; 0x27
    3aa6:	28 c0       	rjmp	.+80     	; 0x3af8 <main+0x23e>
				  {
					  Temp_Data[i] = UART_void_recieve_data();      //Receive PASSWARD
    3aa8:	ec a0       	ldd	r14, Y+36	; 0x24
    3aaa:	fd a0       	ldd	r15, Y+37	; 0x25
    3aac:	0e a1       	ldd	r16, Y+38	; 0x26
    3aae:	1f a1       	ldd	r17, Y+39	; 0x27
    3ab0:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_void_recieve_data>
    3ab4:	28 2f       	mov	r18, r24
    3ab6:	ce 01       	movw	r24, r28
    3ab8:	c5 96       	adiw	r24, 0x35	; 53
    3aba:	fc 01       	movw	r30, r24
    3abc:	ee 0d       	add	r30, r14
    3abe:	ff 1d       	adc	r31, r15
    3ac0:	20 83       	st	Z, r18
					  UART_void_send_data(i);
    3ac2:	8c a1       	ldd	r24, Y+36	; 0x24
    3ac4:	0e 94 11 08 	call	0x1022	; 0x1022 <UART_void_send_data>
					  LCD_void_write_char(Temp_Data[i]);
    3ac8:	8c a1       	ldd	r24, Y+36	; 0x24
    3aca:	9d a1       	ldd	r25, Y+37	; 0x25
    3acc:	ae a1       	ldd	r26, Y+38	; 0x26
    3ace:	bf a1       	ldd	r27, Y+39	; 0x27
    3ad0:	9e 01       	movw	r18, r28
    3ad2:	2b 5c       	subi	r18, 0xCB	; 203
    3ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad6:	f9 01       	movw	r30, r18
    3ad8:	e8 0f       	add	r30, r24
    3ada:	f9 1f       	adc	r31, r25
    3adc:	80 81       	ld	r24, Z
    3ade:	0e 94 5f 19 	call	0x32be	; 0x32be <LCD_void_write_char>
			 if(check_T=='T')
			 {
				  u8 Temp_Data[2]={0};
				  LCD_void_goto(0,0);
				  LCD_void_write_string((u8*)"Temp = ");
				  for(i=0;i<2;i++)
    3ae2:	8c a1       	ldd	r24, Y+36	; 0x24
    3ae4:	9d a1       	ldd	r25, Y+37	; 0x25
    3ae6:	ae a1       	ldd	r26, Y+38	; 0x26
    3ae8:	bf a1       	ldd	r27, Y+39	; 0x27
    3aea:	01 96       	adiw	r24, 0x01	; 1
    3aec:	a1 1d       	adc	r26, r1
    3aee:	b1 1d       	adc	r27, r1
    3af0:	8c a3       	std	Y+36, r24	; 0x24
    3af2:	9d a3       	std	Y+37, r25	; 0x25
    3af4:	ae a3       	std	Y+38, r26	; 0x26
    3af6:	bf a3       	std	Y+39, r27	; 0x27
    3af8:	8c a1       	ldd	r24, Y+36	; 0x24
    3afa:	9d a1       	ldd	r25, Y+37	; 0x25
    3afc:	ae a1       	ldd	r26, Y+38	; 0x26
    3afe:	bf a1       	ldd	r27, Y+39	; 0x27
    3b00:	82 30       	cpi	r24, 0x02	; 2
    3b02:	91 05       	cpc	r25, r1
    3b04:	a1 05       	cpc	r26, r1
    3b06:	b1 05       	cpc	r27, r1
    3b08:	78 f2       	brcs	.-98     	; 0x3aa8 <main+0x1ee>
				  {
					  Temp_Data[i] = UART_void_recieve_data();      //Receive PASSWARD
					  UART_void_send_data(i);
					  LCD_void_write_char(Temp_Data[i]);
				  }
				  LCD_void_write_string('C');
    3b0a:	83 e4       	ldi	r24, 0x43	; 67
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	0e 94 08 1b 	call	0x3610	; 0x3610 <LCD_void_write_string>
				  u32 digit=0;
    3b12:	1f 86       	std	Y+15, r1	; 0x0f
    3b14:	18 8a       	std	Y+16, r1	; 0x10
    3b16:	19 8a       	std	Y+17, r1	; 0x11
    3b18:	1a 8a       	std	Y+18, r1	; 0x12
				  digit = atoi(Temp_Data);
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	c5 96       	adiw	r24, 0x35	; 53
    3b1e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <atoi>
    3b22:	aa 27       	eor	r26, r26
    3b24:	97 fd       	sbrc	r25, 7
    3b26:	a0 95       	com	r26
    3b28:	ba 2f       	mov	r27, r26
    3b2a:	8f 87       	std	Y+15, r24	; 0x0f
    3b2c:	98 8b       	std	Y+16, r25	; 0x10
    3b2e:	a9 8b       	std	Y+17, r26	; 0x11
    3b30:	ba 8b       	std	Y+18, r27	; 0x12
				  if(digit>=10)
    3b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b34:	98 89       	ldd	r25, Y+16	; 0x10
    3b36:	a9 89       	ldd	r26, Y+17	; 0x11
    3b38:	ba 89       	ldd	r27, Y+18	; 0x12
    3b3a:	8a 30       	cpi	r24, 0x0A	; 10
    3b3c:	91 05       	cpc	r25, r1
    3b3e:	a1 05       	cpc	r26, r1
    3b40:	b1 05       	cpc	r27, r1
    3b42:	40 f0       	brcs	.+16     	; 0x3b54 <main+0x29a>
				  {
					  LED_void_LED_Direction(PORTC_ID, PIN0);
    3b44:	82 e0       	ldi	r24, 0x02	; 2
    3b46:	60 e0       	ldi	r22, 0x00	; 0
    3b48:	0e 94 ab 10 	call	0x2156	; 0x2156 <LED_void_LED_Direction>
					  LED_void_LEDINT(10);
    3b4c:	8a e0       	ldi	r24, 0x0A	; 10
    3b4e:	0e 94 02 11 	call	0x2204	; 0x2204 <LED_void_LEDINT>
    3b52:	95 cf       	rjmp	.-214    	; 0x3a7e <main+0x1c4>
				  }
				  else if (digit>=20)
    3b54:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b56:	98 89       	ldd	r25, Y+16	; 0x10
    3b58:	a9 89       	ldd	r26, Y+17	; 0x11
    3b5a:	ba 89       	ldd	r27, Y+18	; 0x12
    3b5c:	84 31       	cpi	r24, 0x14	; 20
    3b5e:	91 05       	cpc	r25, r1
    3b60:	a1 05       	cpc	r26, r1
    3b62:	b1 05       	cpc	r27, r1
    3b64:	08 f4       	brcc	.+2      	; 0x3b68 <main+0x2ae>
    3b66:	8b cf       	rjmp	.-234    	; 0x3a7e <main+0x1c4>
				  {
					  LED_void_LED_Direction(PORTC_ID, PIN0);
    3b68:	82 e0       	ldi	r24, 0x02	; 2
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	0e 94 ab 10 	call	0x2156	; 0x2156 <LED_void_LED_Direction>
					  LED_void_LEDINT(30);
    3b70:	8e e1       	ldi	r24, 0x1E	; 30
    3b72:	0e 94 02 11 	call	0x2204	; 0x2204 <LED_void_LEDINT>
    3b76:	83 cf       	rjmp	.-250    	; 0x3a7e <main+0x1c4>
		}//END WHILE

		  }
		  else
		  {
			  LCD_void_send_command(0x01);
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
			  LCD_void_goto(0,1);
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	61 e0       	ldi	r22, 0x01	; 1
    3b82:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_void_goto>
			  LCD_void_write_string((u8*)"Wrong Password");
    3b86:	87 e7       	ldi	r24, 0x77	; 119
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	0e 94 08 1b 	call	0x3610	; 0x3610 <LCD_void_write_string>
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	aa ef       	ldi	r26, 0xFA	; 250
    3b94:	b4 e4       	ldi	r27, 0x44	; 68
    3b96:	8b 87       	std	Y+11, r24	; 0x0b
    3b98:	9c 87       	std	Y+12, r25	; 0x0c
    3b9a:	ad 87       	std	Y+13, r26	; 0x0d
    3b9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	4a ef       	ldi	r20, 0xFA	; 250
    3bac:	54 e4       	ldi	r21, 0x44	; 68
    3bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	8f 83       	std	Y+7, r24	; 0x07
    3bb8:	98 87       	std	Y+8, r25	; 0x08
    3bba:	a9 87       	std	Y+9, r26	; 0x09
    3bbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc0:	78 85       	ldd	r23, Y+8	; 0x08
    3bc2:	89 85       	ldd	r24, Y+9	; 0x09
    3bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	40 e8       	ldi	r20, 0x80	; 128
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bd2:	88 23       	and	r24, r24
    3bd4:	2c f4       	brge	.+10     	; 0x3be0 <main+0x326>
		__ticks = 1;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	9e 83       	std	Y+6, r25	; 0x06
    3bdc:	8d 83       	std	Y+5, r24	; 0x05
    3bde:	3f c0       	rjmp	.+126    	; 0x3c5e <main+0x3a4>
	else if (__tmp > 65535)
    3be0:	6f 81       	ldd	r22, Y+7	; 0x07
    3be2:	78 85       	ldd	r23, Y+8	; 0x08
    3be4:	89 85       	ldd	r24, Y+9	; 0x09
    3be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	3f ef       	ldi	r19, 0xFF	; 255
    3bec:	4f e7       	ldi	r20, 0x7F	; 127
    3bee:	57 e4       	ldi	r21, 0x47	; 71
    3bf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bf4:	18 16       	cp	r1, r24
    3bf6:	4c f5       	brge	.+82     	; 0x3c4a <main+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e2       	ldi	r20, 0x20	; 32
    3c06:	51 e4       	ldi	r21, 0x41	; 65
    3c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	bc 01       	movw	r22, r24
    3c12:	cd 01       	movw	r24, r26
    3c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	9e 83       	std	Y+6, r25	; 0x06
    3c1e:	8d 83       	std	Y+5, r24	; 0x05
    3c20:	0f c0       	rjmp	.+30     	; 0x3c40 <main+0x386>
    3c22:	88 ec       	ldi	r24, 0xC8	; 200
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	9c 83       	std	Y+4, r25	; 0x04
    3c28:	8b 83       	std	Y+3, r24	; 0x03
    3c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	f1 f7       	brne	.-4      	; 0x3c2e <main+0x374>
    3c32:	9c 83       	std	Y+4, r25	; 0x04
    3c34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c36:	8d 81       	ldd	r24, Y+5	; 0x05
    3c38:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	9e 83       	std	Y+6, r25	; 0x06
    3c3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c40:	8d 81       	ldd	r24, Y+5	; 0x05
    3c42:	9e 81       	ldd	r25, Y+6	; 0x06
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	69 f7       	brne	.-38     	; 0x3c22 <main+0x368>
    3c48:	14 c0       	rjmp	.+40     	; 0x3c72 <main+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4c:	78 85       	ldd	r23, Y+8	; 0x08
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9e 83       	std	Y+6, r25	; 0x06
    3c5c:	8d 83       	std	Y+5, r24	; 0x05
    3c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c60:	9e 81       	ldd	r25, Y+6	; 0x06
    3c62:	9a 83       	std	Y+2, r25	; 0x02
    3c64:	89 83       	std	Y+1, r24	; 0x01
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <main+0x3b0>
    3c6e:	9a 83       	std	Y+2, r25	; 0x02
    3c70:	89 83       	std	Y+1, r24	; 0x01
			  _delay_ms(2000);
			  LCD_void_send_command(0x01);
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_void_send_command>
			  LCD_void_goto(0,1);
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	61 e0       	ldi	r22, 0x01	; 1
    3c7c:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_void_goto>
			  LCD_void_write_string((u8*)"ENTER PASSWORD");
    3c80:	80 e6       	ldi	r24, 0x60	; 96
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	0e 94 08 1b 	call	0x3610	; 0x3610 <LCD_void_write_string>
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	90 e0       	ldi	r25, 0x00	; 0

		  }
}
    3c8c:	eb 96       	adiw	r28, 0x3b	; 59
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
    3c98:	cf 91       	pop	r28
    3c9a:	df 91       	pop	r29
    3c9c:	1f 91       	pop	r17
    3c9e:	0f 91       	pop	r16
    3ca0:	ff 90       	pop	r15
    3ca2:	ef 90       	pop	r14
    3ca4:	08 95       	ret

00003ca6 <__mulsi3>:
    3ca6:	62 9f       	mul	r22, r18
    3ca8:	d0 01       	movw	r26, r0
    3caa:	73 9f       	mul	r23, r19
    3cac:	f0 01       	movw	r30, r0
    3cae:	82 9f       	mul	r24, r18
    3cb0:	e0 0d       	add	r30, r0
    3cb2:	f1 1d       	adc	r31, r1
    3cb4:	64 9f       	mul	r22, r20
    3cb6:	e0 0d       	add	r30, r0
    3cb8:	f1 1d       	adc	r31, r1
    3cba:	92 9f       	mul	r25, r18
    3cbc:	f0 0d       	add	r31, r0
    3cbe:	83 9f       	mul	r24, r19
    3cc0:	f0 0d       	add	r31, r0
    3cc2:	74 9f       	mul	r23, r20
    3cc4:	f0 0d       	add	r31, r0
    3cc6:	65 9f       	mul	r22, r21
    3cc8:	f0 0d       	add	r31, r0
    3cca:	99 27       	eor	r25, r25
    3ccc:	72 9f       	mul	r23, r18
    3cce:	b0 0d       	add	r27, r0
    3cd0:	e1 1d       	adc	r30, r1
    3cd2:	f9 1f       	adc	r31, r25
    3cd4:	63 9f       	mul	r22, r19
    3cd6:	b0 0d       	add	r27, r0
    3cd8:	e1 1d       	adc	r30, r1
    3cda:	f9 1f       	adc	r31, r25
    3cdc:	bd 01       	movw	r22, r26
    3cde:	cf 01       	movw	r24, r30
    3ce0:	11 24       	eor	r1, r1
    3ce2:	08 95       	ret

00003ce4 <__divmodhi4>:
    3ce4:	97 fb       	bst	r25, 7
    3ce6:	09 2e       	mov	r0, r25
    3ce8:	07 26       	eor	r0, r23
    3cea:	0a d0       	rcall	.+20     	; 0x3d00 <__divmodhi4_neg1>
    3cec:	77 fd       	sbrc	r23, 7
    3cee:	04 d0       	rcall	.+8      	; 0x3cf8 <__divmodhi4_neg2>
    3cf0:	49 d0       	rcall	.+146    	; 0x3d84 <__udivmodhi4>
    3cf2:	06 d0       	rcall	.+12     	; 0x3d00 <__divmodhi4_neg1>
    3cf4:	00 20       	and	r0, r0
    3cf6:	1a f4       	brpl	.+6      	; 0x3cfe <__divmodhi4_exit>

00003cf8 <__divmodhi4_neg2>:
    3cf8:	70 95       	com	r23
    3cfa:	61 95       	neg	r22
    3cfc:	7f 4f       	sbci	r23, 0xFF	; 255

00003cfe <__divmodhi4_exit>:
    3cfe:	08 95       	ret

00003d00 <__divmodhi4_neg1>:
    3d00:	f6 f7       	brtc	.-4      	; 0x3cfe <__divmodhi4_exit>
    3d02:	90 95       	com	r25
    3d04:	81 95       	neg	r24
    3d06:	9f 4f       	sbci	r25, 0xFF	; 255
    3d08:	08 95       	ret

00003d0a <__udivmodsi4>:
    3d0a:	a1 e2       	ldi	r26, 0x21	; 33
    3d0c:	1a 2e       	mov	r1, r26
    3d0e:	aa 1b       	sub	r26, r26
    3d10:	bb 1b       	sub	r27, r27
    3d12:	fd 01       	movw	r30, r26
    3d14:	0d c0       	rjmp	.+26     	; 0x3d30 <__udivmodsi4_ep>

00003d16 <__udivmodsi4_loop>:
    3d16:	aa 1f       	adc	r26, r26
    3d18:	bb 1f       	adc	r27, r27
    3d1a:	ee 1f       	adc	r30, r30
    3d1c:	ff 1f       	adc	r31, r31
    3d1e:	a2 17       	cp	r26, r18
    3d20:	b3 07       	cpc	r27, r19
    3d22:	e4 07       	cpc	r30, r20
    3d24:	f5 07       	cpc	r31, r21
    3d26:	20 f0       	brcs	.+8      	; 0x3d30 <__udivmodsi4_ep>
    3d28:	a2 1b       	sub	r26, r18
    3d2a:	b3 0b       	sbc	r27, r19
    3d2c:	e4 0b       	sbc	r30, r20
    3d2e:	f5 0b       	sbc	r31, r21

00003d30 <__udivmodsi4_ep>:
    3d30:	66 1f       	adc	r22, r22
    3d32:	77 1f       	adc	r23, r23
    3d34:	88 1f       	adc	r24, r24
    3d36:	99 1f       	adc	r25, r25
    3d38:	1a 94       	dec	r1
    3d3a:	69 f7       	brne	.-38     	; 0x3d16 <__udivmodsi4_loop>
    3d3c:	60 95       	com	r22
    3d3e:	70 95       	com	r23
    3d40:	80 95       	com	r24
    3d42:	90 95       	com	r25
    3d44:	9b 01       	movw	r18, r22
    3d46:	ac 01       	movw	r20, r24
    3d48:	bd 01       	movw	r22, r26
    3d4a:	cf 01       	movw	r24, r30
    3d4c:	08 95       	ret

00003d4e <__divmodsi4>:
    3d4e:	97 fb       	bst	r25, 7
    3d50:	09 2e       	mov	r0, r25
    3d52:	05 26       	eor	r0, r21
    3d54:	0e d0       	rcall	.+28     	; 0x3d72 <__divmodsi4_neg1>
    3d56:	57 fd       	sbrc	r21, 7
    3d58:	04 d0       	rcall	.+8      	; 0x3d62 <__divmodsi4_neg2>
    3d5a:	d7 df       	rcall	.-82     	; 0x3d0a <__udivmodsi4>
    3d5c:	0a d0       	rcall	.+20     	; 0x3d72 <__divmodsi4_neg1>
    3d5e:	00 1c       	adc	r0, r0
    3d60:	38 f4       	brcc	.+14     	; 0x3d70 <__divmodsi4_exit>

00003d62 <__divmodsi4_neg2>:
    3d62:	50 95       	com	r21
    3d64:	40 95       	com	r20
    3d66:	30 95       	com	r19
    3d68:	21 95       	neg	r18
    3d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d6c:	4f 4f       	sbci	r20, 0xFF	; 255
    3d6e:	5f 4f       	sbci	r21, 0xFF	; 255

00003d70 <__divmodsi4_exit>:
    3d70:	08 95       	ret

00003d72 <__divmodsi4_neg1>:
    3d72:	f6 f7       	brtc	.-4      	; 0x3d70 <__divmodsi4_exit>
    3d74:	90 95       	com	r25
    3d76:	80 95       	com	r24
    3d78:	70 95       	com	r23
    3d7a:	61 95       	neg	r22
    3d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d80:	9f 4f       	sbci	r25, 0xFF	; 255
    3d82:	08 95       	ret

00003d84 <__udivmodhi4>:
    3d84:	aa 1b       	sub	r26, r26
    3d86:	bb 1b       	sub	r27, r27
    3d88:	51 e1       	ldi	r21, 0x11	; 17
    3d8a:	07 c0       	rjmp	.+14     	; 0x3d9a <__udivmodhi4_ep>

00003d8c <__udivmodhi4_loop>:
    3d8c:	aa 1f       	adc	r26, r26
    3d8e:	bb 1f       	adc	r27, r27
    3d90:	a6 17       	cp	r26, r22
    3d92:	b7 07       	cpc	r27, r23
    3d94:	10 f0       	brcs	.+4      	; 0x3d9a <__udivmodhi4_ep>
    3d96:	a6 1b       	sub	r26, r22
    3d98:	b7 0b       	sbc	r27, r23

00003d9a <__udivmodhi4_ep>:
    3d9a:	88 1f       	adc	r24, r24
    3d9c:	99 1f       	adc	r25, r25
    3d9e:	5a 95       	dec	r21
    3da0:	a9 f7       	brne	.-22     	; 0x3d8c <__udivmodhi4_loop>
    3da2:	80 95       	com	r24
    3da4:	90 95       	com	r25
    3da6:	bc 01       	movw	r22, r24
    3da8:	cd 01       	movw	r24, r26
    3daa:	08 95       	ret

00003dac <__prologue_saves__>:
    3dac:	2f 92       	push	r2
    3dae:	3f 92       	push	r3
    3db0:	4f 92       	push	r4
    3db2:	5f 92       	push	r5
    3db4:	6f 92       	push	r6
    3db6:	7f 92       	push	r7
    3db8:	8f 92       	push	r8
    3dba:	9f 92       	push	r9
    3dbc:	af 92       	push	r10
    3dbe:	bf 92       	push	r11
    3dc0:	cf 92       	push	r12
    3dc2:	df 92       	push	r13
    3dc4:	ef 92       	push	r14
    3dc6:	ff 92       	push	r15
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	cd b7       	in	r28, 0x3d	; 61
    3dd2:	de b7       	in	r29, 0x3e	; 62
    3dd4:	ca 1b       	sub	r28, r26
    3dd6:	db 0b       	sbc	r29, r27
    3dd8:	0f b6       	in	r0, 0x3f	; 63
    3dda:	f8 94       	cli
    3ddc:	de bf       	out	0x3e, r29	; 62
    3dde:	0f be       	out	0x3f, r0	; 63
    3de0:	cd bf       	out	0x3d, r28	; 61
    3de2:	09 94       	ijmp

00003de4 <__epilogue_restores__>:
    3de4:	2a 88       	ldd	r2, Y+18	; 0x12
    3de6:	39 88       	ldd	r3, Y+17	; 0x11
    3de8:	48 88       	ldd	r4, Y+16	; 0x10
    3dea:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dec:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dee:	7d 84       	ldd	r7, Y+13	; 0x0d
    3df0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3df2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3df4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3df6:	b9 84       	ldd	r11, Y+9	; 0x09
    3df8:	c8 84       	ldd	r12, Y+8	; 0x08
    3dfa:	df 80       	ldd	r13, Y+7	; 0x07
    3dfc:	ee 80       	ldd	r14, Y+6	; 0x06
    3dfe:	fd 80       	ldd	r15, Y+5	; 0x05
    3e00:	0c 81       	ldd	r16, Y+4	; 0x04
    3e02:	1b 81       	ldd	r17, Y+3	; 0x03
    3e04:	aa 81       	ldd	r26, Y+2	; 0x02
    3e06:	b9 81       	ldd	r27, Y+1	; 0x01
    3e08:	ce 0f       	add	r28, r30
    3e0a:	d1 1d       	adc	r29, r1
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	f8 94       	cli
    3e10:	de bf       	out	0x3e, r29	; 62
    3e12:	0f be       	out	0x3f, r0	; 63
    3e14:	cd bf       	out	0x3d, r28	; 61
    3e16:	ed 01       	movw	r28, r26
    3e18:	08 95       	ret

00003e1a <atoi>:
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	88 27       	eor	r24, r24
    3e1e:	99 27       	eor	r25, r25
    3e20:	e8 94       	clt
    3e22:	21 91       	ld	r18, Z+
    3e24:	20 32       	cpi	r18, 0x20	; 32
    3e26:	e9 f3       	breq	.-6      	; 0x3e22 <atoi+0x8>
    3e28:	29 30       	cpi	r18, 0x09	; 9
    3e2a:	10 f0       	brcs	.+4      	; 0x3e30 <atoi+0x16>
    3e2c:	2e 30       	cpi	r18, 0x0E	; 14
    3e2e:	c8 f3       	brcs	.-14     	; 0x3e22 <atoi+0x8>
    3e30:	2b 32       	cpi	r18, 0x2B	; 43
    3e32:	41 f0       	breq	.+16     	; 0x3e44 <atoi+0x2a>
    3e34:	2d 32       	cpi	r18, 0x2D	; 45
    3e36:	39 f4       	brne	.+14     	; 0x3e46 <atoi+0x2c>
    3e38:	68 94       	set
    3e3a:	04 c0       	rjmp	.+8      	; 0x3e44 <atoi+0x2a>
    3e3c:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <__mulhi_const_10>
    3e40:	82 0f       	add	r24, r18
    3e42:	91 1d       	adc	r25, r1
    3e44:	21 91       	ld	r18, Z+
    3e46:	20 53       	subi	r18, 0x30	; 48
    3e48:	2a 30       	cpi	r18, 0x0A	; 10
    3e4a:	c0 f3       	brcs	.-16     	; 0x3e3c <atoi+0x22>
    3e4c:	1e f4       	brtc	.+6      	; 0x3e54 <atoi+0x3a>
    3e4e:	90 95       	com	r25
    3e50:	81 95       	neg	r24
    3e52:	9f 4f       	sbci	r25, 0xFF	; 255
    3e54:	08 95       	ret

00003e56 <__mulhi_const_10>:
    3e56:	7a e0       	ldi	r23, 0x0A	; 10
    3e58:	97 9f       	mul	r25, r23
    3e5a:	90 2d       	mov	r25, r0
    3e5c:	87 9f       	mul	r24, r23
    3e5e:	80 2d       	mov	r24, r0
    3e60:	91 0d       	add	r25, r1
    3e62:	11 24       	eor	r1, r1
    3e64:	08 95       	ret

00003e66 <_exit>:
    3e66:	f8 94       	cli

00003e68 <__stop_program>:
    3e68:	ff cf       	rjmp	.-2      	; 0x3e68 <__stop_program>
