
NewNewMc.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003caa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00003caa  00003d3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080019a  0080019a  00003e78  2**0
                  ALLOC
  3 .stab         00003ae0  00000000  00000000  00003e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b3b  00000000  00000000  00007958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009493  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009633  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009825  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bc30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cfb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e18c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e642  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000efb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 1b 	call	0x375c	; 0x375c <main>
      8a:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 1d 	jmp	0x3bfc	; 0x3bfc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e8       	ldi	r22, 0x8F	; 143
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1a 1e 	jmp	0x3c34	; 0x3c34 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fe 1d 	jmp	0x3bfc	; 0x3bfc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 1a 1e 	jmp	0x3c34	; 0x3c34 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 56       	subi	r30, 0x69	; 105
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <SER_UART_void_send_string>:
#include "../MCAL/UART/UART_interface.h"
#include "../SERV_UART/SERV_UART.h"
#include "../MCAL/DIO/Memmap.h"
#include "../LIB/BIT_Math.h"
void SER_UART_void_send_string(u8* s)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <SER_UART_void_send_string+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0;
     e3e:	19 82       	std	Y+1, r1	; 0x01
     e40:	0e c0       	rjmp	.+28     	; 0xe5e <SER_UART_void_send_string+0x30>
	while (s[count]!='\0')
	{
		UART_void_send_data(s[count]);
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	9b 81       	ldd	r25, Y+3	; 0x03
     e4c:	fc 01       	movw	r30, r24
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	80 81       	ld	r24, Z
     e54:	0e 94 11 08 	call	0x1022	; 0x1022 <UART_void_send_data>
		count++;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	89 83       	std	Y+1, r24	; 0x01
#include "../MCAL/DIO/Memmap.h"
#include "../LIB/BIT_Math.h"
void SER_UART_void_send_string(u8* s)
{
	u8 count=0;
	while (s[count]!='\0')
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	fc 01       	movw	r30, r24
     e6a:	e2 0f       	add	r30, r18
     e6c:	f3 1f       	adc	r31, r19
     e6e:	80 81       	ld	r24, Z
     e70:	88 23       	and	r24, r24
     e72:	39 f7       	brne	.-50     	; 0xe42 <SER_UART_void_send_string+0x14>
	{
		UART_void_send_data(s[count]);
		count++;
	}
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <SER_UART_void_receive_string>:
void SER_UART_void_receive_string(u8* s)
{
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <SER_UART_void_receive_string+0xa>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9b 83       	std	Y+3, r25	; 0x03
     e92:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0;
     e94:	19 82       	std	Y+1, r1	; 0x01
	s[count]=UART_void_recieve_data();
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	8c 01       	movw	r16, r24
     ea2:	02 0f       	add	r16, r18
     ea4:	13 1f       	adc	r17, r19
     ea6:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_void_recieve_data>
     eaa:	f8 01       	movw	r30, r16
     eac:	80 83       	st	Z, r24
     eae:	0f c0       	rjmp	.+30     	; 0xece <SER_UART_void_receive_string+0x4e>
	while(s[count]!='$')
	{
		count++;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	89 83       	std	Y+1, r24	; 0x01
		s[count]=UART_void_recieve_data();
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	8c 01       	movw	r16, r24
     ec2:	02 0f       	add	r16, r18
     ec4:	13 1f       	adc	r17, r19
     ec6:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_void_recieve_data>
     eca:	f8 01       	movw	r30, r16
     ecc:	80 83       	st	Z, r24
}
void SER_UART_void_receive_string(u8* s)
{
	u8 count=0;
	s[count]=UART_void_recieve_data();
	while(s[count]!='$')
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	9b 81       	ldd	r25, Y+3	; 0x03
     ed8:	fc 01       	movw	r30, r24
     eda:	e2 0f       	add	r30, r18
     edc:	f3 1f       	adc	r31, r19
     ede:	80 81       	ld	r24, Z
     ee0:	84 32       	cpi	r24, 0x24	; 36
     ee2:	31 f7       	brne	.-52     	; 0xeb0 <SER_UART_void_receive_string+0x30>
	{
		count++;
		s[count]=UART_void_recieve_data();
	}
	s[count]='\0';
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	fc 01       	movw	r30, r24
     ef0:	e2 0f       	add	r30, r18
     ef2:	f3 1f       	adc	r31, r19
     ef4:	10 82       	st	Z, r1
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <SER_UART_void_receive_string_NOBLOCKING>:
void SER_UART_void_receive_string_NOBLOCKING(u8* s)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <SER_UART_void_receive_string_NOBLOCKING+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <SER_UART_void_receive_string_NOBLOCKING+0x8>
     f0e:	0f 92       	push	r0
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	9d 83       	std	Y+5, r25	; 0x05
     f16:	8c 83       	std	Y+4, r24	; 0x04
	       u8 statue,data,count=0;
     f18:	19 82       	std	Y+1, r1	; 0x01
	do{
		    statue=UART_u8RecieveDataNoBLOCKING(& data);
     f1a:	ce 01       	movw	r24, r28
     f1c:	03 96       	adiw	r24, 0x03	; 3
     f1e:	0e 94 3a 08 	call	0x1074	; 0x1074 <UART_u8RecieveDataNoBLOCKING>
     f22:	8a 83       	std	Y+2, r24	; 0x02
		    if (statue)
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	88 23       	and	r24, r24
     f28:	d9 f0       	breq	.+54     	; 0xf60 <SER_UART_void_receive_string_NOBLOCKING+0x5a>
				{
					s[count]=data;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	fc 01       	movw	r30, r24
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	80 83       	st	Z, r24
					count++;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	8f 5f       	subi	r24, 0xFF	; 255
     f42:	89 83       	std	Y+1, r24	; 0x01
				}
		    else
				{
					break;
				}
	     }while(s[count-1]!='$');
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9c 01       	movw	r18, r24
     f4c:	21 50       	subi	r18, 0x01	; 1
     f4e:	30 40       	sbci	r19, 0x00	; 0
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	fc 01       	movw	r30, r24
     f56:	e2 0f       	add	r30, r18
     f58:	f3 1f       	adc	r31, r19
     f5a:	80 81       	ld	r24, Z
     f5c:	84 32       	cpi	r24, 0x24	; 36
     f5e:	e9 f6       	brne	.-70     	; 0xf1a <SER_UART_void_receive_string_NOBLOCKING+0x14>
	s[count-1]='\0';
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9c 01       	movw	r18, r24
     f68:	21 50       	subi	r18, 0x01	; 1
     f6a:	30 40       	sbci	r19, 0x00	; 0
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	fc 01       	movw	r30, r24
     f72:	e2 0f       	add	r30, r18
     f74:	f3 1f       	adc	r31, r19
     f76:	10 82       	st	Z, r1
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <UART_void_initialize>:
#include "ADC_Interface.h"
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_type.h"
*/
void UART_void_initialize(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	SETBIT(UCSRB,RXEN);
     f90:	aa e2       	ldi	r26, 0x2A	; 42
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ea e2       	ldi	r30, 0x2A	; 42
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	8c 93       	st	X, r24
	SETBIT(UCSRB,TXEN);
     f9e:	aa e2       	ldi	r26, 0x2A	; 42
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ea e2       	ldi	r30, 0x2A	; 42
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	88 60       	ori	r24, 0x08	; 8
     faa:	8c 93       	st	X, r24
	CLRBIT(UCSRC, UMSEL);
     fac:	a0 e4       	ldi	r26, 0x40	; 64
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e0 e4       	ldi	r30, 0x40	; 64
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7b       	andi	r24, 0xBF	; 191
     fb8:	8c 93       	st	X, r24
	CLRBIT(UCSRC, UPM0);
     fba:	a0 e4       	ldi	r26, 0x40	; 64
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e0 e4       	ldi	r30, 0x40	; 64
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7e       	andi	r24, 0xEF	; 239
     fc6:	8c 93       	st	X, r24
	CLRBIT(UCSRC, UPM1);
     fc8:	a0 e4       	ldi	r26, 0x40	; 64
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e0 e4       	ldi	r30, 0x40	; 64
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8f 7d       	andi	r24, 0xDF	; 223
     fd4:	8c 93       	st	X, r24
	CLRBIT(UCSRC, USBS);
     fd6:	a0 e4       	ldi	r26, 0x40	; 64
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e0 e4       	ldi	r30, 0x40	; 64
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	87 7f       	andi	r24, 0xF7	; 247
     fe2:	8c 93       	st	X, r24
	SETBIT(UCSRC, UCSZ0);
     fe4:	a0 e4       	ldi	r26, 0x40	; 64
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e0 e4       	ldi	r30, 0x40	; 64
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	8c 93       	st	X, r24
	SETBIT(UCSRC, UCSZ1);
     ff2:	a0 e4       	ldi	r26, 0x40	; 64
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e0 e4       	ldi	r30, 0x40	; 64
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	84 60       	ori	r24, 0x04	; 4
     ffe:	8c 93       	st	X, r24
	CLRBIT(UCSRB, UCSZ2);
    1000:	aa e2       	ldi	r26, 0x2A	; 42
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ea e2       	ldi	r30, 0x2A	; 42
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	8c 93       	st	X, r24

	//BAUD RATE
	UBRRH=0;
    100e:	e0 e4       	ldi	r30, 0x40	; 64
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	10 82       	st	Z, r1
	UBRRL=207;
    1014:	e9 e2       	ldi	r30, 0x29	; 41
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	8f ec       	ldi	r24, 0xCF	; 207
    101a:	80 83       	st	Z, r24

}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <UART_void_send_data>:


void UART_void_send_data(u8 data)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01
	while (!(GETBIT(UCSRA,UDRE)));
    102e:	eb e2       	ldi	r30, 0x2B	; 43
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	82 95       	swap	r24
    1036:	86 95       	lsr	r24
    1038:	87 70       	andi	r24, 0x07	; 7
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	90 70       	andi	r25, 0x00	; 0
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	a1 f3       	breq	.-24     	; 0x102e <UART_void_send_data+0xc>
	UDR=data;
    1046:	ec e2       	ldi	r30, 0x2C	; 44
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	80 83       	st	Z, r24
}
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <UART_void_recieve_data>:

u8 UART_void_recieve_data(void)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
	while(!(GETBIT(UCSRA,RXC)));
    105e:	eb e2       	ldi	r30, 0x2B	; 43
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	dc f7       	brge	.-10     	; 0x105e <UART_void_recieve_data+0x8>
	return UDR;
    1068:	ec e2       	ldi	r30, 0x2C	; 44
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <UART_u8RecieveDataNoBLOCKING>:
u8 UART_u8RecieveDataNoBLOCKING(u8* ptr_data)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <UART_u8RecieveDataNoBLOCKING+0x6>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
    u8 status = 0;
    1084:	19 82       	std	Y+1, r1	; 0x01
    if (GETBIT(UCSRA, RXC))
    1086:	eb e2       	ldi	r30, 0x2B	; 43
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 23       	and	r24, r24
    108e:	44 f4       	brge	.+16     	; 0x10a0 <UART_u8RecieveDataNoBLOCKING+0x2c>
    {
        *ptr_data =UDR;
    1090:	ec e2       	ldi	r30, 0x2C	; 44
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	ea 81       	ldd	r30, Y+2	; 0x02
    1098:	fb 81       	ldd	r31, Y+3	; 0x03
    109a:	80 83       	st	Z, r24
        status =1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        //
    }
    return status;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <TIMER0_voidStartTimer>:
static u8           TIMER0_u8TCCR0Value         = 0;
static u8           TIMER0_u8TCNT0Preload       = 0;
static u16          TIMER0_u16Prescaler            = 1;

 void TIMER0_voidStartTimer(void)
 {
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62

	 TCCR0  = TIMER0_u8TCCR0Value;
    10b6:	e3 e5       	ldi	r30, 0x53	; 83
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 91 9e 01 	lds	r24, 0x019E
    10be:	80 83       	st	Z, r24
 }
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <TIMER0_voidStopTimer>:


 void TIMER0_voidStopTimer(void)
 {
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62

 	TCCR0 = TIMER0_u8TCCR0Value & TIMER0_STOP_MASK;
    10ce:	e3 e5       	ldi	r30, 0x53	; 83
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 91 9e 01 	lds	r24, 0x019E
    10d6:	88 7f       	andi	r24, 0xF8	; 248
    10d8:	80 83       	st	Z, r24
 }
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <TIMER0_voidInitializeTimer0>:
 void TIMER0_voidInitializeTimer0(void)
  {
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62


 	TIMER0_u8TCCR0Value &= TIMER0_TCCR0_MASK;
    10ea:	80 91 9e 01 	lds	r24, 0x019E
    10ee:	88 7f       	andi	r24, 0xF8	; 248
    10f0:	80 93 9e 01 	sts	0x019E, r24

 	TIMER0_u8TCCR0Value |= TIMER0_PRESCALER;
    10f4:	80 91 9e 01 	lds	r24, 0x019E
    10f8:	83 60       	ori	r24, 0x03	; 3
    10fa:	80 93 9e 01 	sts	0x019E, r24


 	TIMER0_u16Prescaler = 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	90 93 98 01 	sts	0x0198, r25
    1106:	80 93 97 01 	sts	0x0197, r24

 		TIMER0_u16Prescaler = 8;

 	#elif (TIMER0_PRESCALER>Prescaller_8 && TIMER0_PRESCALER<=Prescaller_1024)

 		for (u8 i=0;i<(TIMER0_PRESCALER*2);i++)
    110a:	19 82       	std	Y+1, r1	; 0x01
    110c:	0d c0       	rjmp	.+26     	; 0x1128 <TIMER0_voidInitializeTimer0+0x48>
 		{
 			TIMER0_u16Prescaler *= 2;
    110e:	80 91 97 01 	lds	r24, 0x0197
    1112:	90 91 98 01 	lds	r25, 0x0198
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	90 93 98 01 	sts	0x0198, r25
    111e:	80 93 97 01 	sts	0x0197, r24

 		TIMER0_u16Prescaler = 8;

 	#elif (TIMER0_PRESCALER>Prescaller_8 && TIMER0_PRESCALER<=Prescaller_1024)

 		for (u8 i=0;i<(TIMER0_PRESCALER*2);i++)
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	86 30       	cpi	r24, 0x06	; 6
    112c:	80 f3       	brcs	.-32     	; 0x110e <TIMER0_voidInitializeTimer0+0x2e>
 		SETBIT(TIMER0_u8TCCR0Value,TIMER0_WGM00);
 		CLRBIT(TIMER0_u8TCCR0Value,TIMER0_WGM01);

 	#elif (TIMER0_MODE==TIMER0_FAST_PWM_MODE)

 		SETBIT(TIMER0_u8TCCR0Value,TIMER0_WGM00);
    112e:	80 91 9e 01 	lds	r24, 0x019E
    1132:	80 64       	ori	r24, 0x40	; 64
    1134:	80 93 9e 01 	sts	0x019E, r24
 		SETBIT(TIMER0_u8TCCR0Value,TIMER0_WGM01);
    1138:	80 91 9e 01 	lds	r24, 0x019E
    113c:	88 60       	ori	r24, 0x08	; 8
    113e:	80 93 9e 01 	sts	0x019E, r24

 	#else
 		#error "Wrong Timer0 Mode"
 	#endif

 	TIMER0_u8TCCR0Value &= TIMER0_COM_MASK;
    1142:	80 91 9e 01 	lds	r24, 0x019E
    1146:	8f 7c       	andi	r24, 0xCF	; 207
    1148:	80 93 9e 01 	sts	0x019E, r24
 	TIMER0_u8TCCR0Value |= (TIMER0_OC0_MODE<<4) ;
    114c:	80 91 9e 01 	lds	r24, 0x019E
    1150:	80 63       	ori	r24, 0x30	; 48
    1152:	80 93 9e 01 	sts	0x019E, r24



  }
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <TIMER0_voidSetDesiredTime_us>:

 void TIMER0_voidSetDesiredTime_us(u32 Copy_Time_us)
 {
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	68 97       	sbiw	r28, 0x18	; 24
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	6d 8b       	std	Y+21, r22	; 0x15
    117c:	7e 8b       	std	Y+22, r23	; 0x16
    117e:	8f 8b       	std	Y+23, r24	; 0x17
    1180:	98 8f       	std	Y+24, r25	; 0x18

 	u32 Local_u32TickTime               = (TIMER0_u16Prescaler*1000000)/TIMER0_F_CPU ;
    1182:	80 91 97 01 	lds	r24, 0x0197
    1186:	90 91 98 01 	lds	r25, 0x0198
    118a:	cc 01       	movw	r24, r24
    118c:	a0 e0       	ldi	r26, 0x00	; 0
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	20 e4       	ldi	r18, 0x40	; 64
    1192:	32 e4       	ldi	r19, 0x42	; 66
    1194:	4f e0       	ldi	r20, 0x0F	; 15
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__mulsi3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	34 e2       	ldi	r19, 0x24	; 36
    11a8:	44 ef       	ldi	r20, 0xF4	; 244
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__udivmodsi4>
    11b4:	da 01       	movw	r26, r20
    11b6:	c9 01       	movw	r24, r18
    11b8:	89 8b       	std	Y+17, r24	; 0x11
    11ba:	9a 8b       	std	Y+18, r25	; 0x12
    11bc:	ab 8b       	std	Y+19, r26	; 0x13
    11be:	bc 8b       	std	Y+20, r27	; 0x14
 	u32 Local_u32OverFlowTime           = Local_u32TickTime * TIMER0_REG_CAPACITY ;
    11c0:	89 89       	ldd	r24, Y+17	; 0x11
    11c2:	9a 89       	ldd	r25, Y+18	; 0x12
    11c4:	ab 89       	ldd	r26, Y+19	; 0x13
    11c6:	bc 89       	ldd	r27, Y+20	; 0x14
    11c8:	ba 2f       	mov	r27, r26
    11ca:	a9 2f       	mov	r26, r25
    11cc:	98 2f       	mov	r25, r24
    11ce:	88 27       	eor	r24, r24
    11d0:	8d 87       	std	Y+13, r24	; 0x0d
    11d2:	9e 87       	std	Y+14, r25	; 0x0e
    11d4:	af 87       	std	Y+15, r26	; 0x0f
    11d6:	b8 8b       	std	Y+16, r27	; 0x10
 	u32 Local_u32DesiredTime            = Copy_Time_us;
    11d8:	8d 89       	ldd	r24, Y+21	; 0x15
    11da:	9e 89       	ldd	r25, Y+22	; 0x16
    11dc:	af 89       	ldd	r26, Y+23	; 0x17
    11de:	b8 8d       	ldd	r27, Y+24	; 0x18
    11e0:	89 87       	std	Y+9, r24	; 0x09
    11e2:	9a 87       	std	Y+10, r25	; 0x0a
    11e4:	ab 87       	std	Y+11, r26	; 0x0b
    11e6:	bc 87       	std	Y+12, r27	; 0x0c


 	TIMER0_u32OverFlowNo                   = Local_u32DesiredTime/Local_u32OverFlowTime;
    11e8:	89 85       	ldd	r24, Y+9	; 0x09
    11ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ec:	ab 85       	ldd	r26, Y+11	; 0x0b
    11ee:	bc 85       	ldd	r27, Y+12	; 0x0c
    11f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    11f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    11f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    11f6:	58 89       	ldd	r21, Y+16	; 0x10
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__udivmodsi4>
    1200:	da 01       	movw	r26, r20
    1202:	c9 01       	movw	r24, r18
    1204:	80 93 9a 01 	sts	0x019A, r24
    1208:	90 93 9b 01 	sts	0x019B, r25
    120c:	a0 93 9c 01 	sts	0x019C, r26
    1210:	b0 93 9d 01 	sts	0x019D, r27
 	u32 TIMER0_u32OverFlowRemainderTime    = Local_u32DesiredTime%Local_u32OverFlowTime;
    1214:	89 85       	ldd	r24, Y+9	; 0x09
    1216:	9a 85       	ldd	r25, Y+10	; 0x0a
    1218:	ab 85       	ldd	r26, Y+11	; 0x0b
    121a:	bc 85       	ldd	r27, Y+12	; 0x0c
    121c:	2d 85       	ldd	r18, Y+13	; 0x0d
    121e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1220:	4f 85       	ldd	r20, Y+15	; 0x0f
    1222:	58 89       	ldd	r21, Y+16	; 0x10
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__udivmodsi4>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	8d 83       	std	Y+5, r24	; 0x05
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	af 83       	std	Y+7, r26	; 0x07
    1236:	b8 87       	std	Y+8, r27	; 0x08
 	u32 TIMER0_u32OverFlowRemCounts = ((float)TIMER0_u32OverFlowRemainderTime/Local_u32OverFlowTime)* TIMER0_REG_CAPACITY;
    1238:	6d 81       	ldd	r22, Y+5	; 0x05
    123a:	7e 81       	ldd	r23, Y+6	; 0x06
    123c:	8f 81       	ldd	r24, Y+7	; 0x07
    123e:	98 85       	ldd	r25, Y+8	; 0x08
    1240:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1244:	7b 01       	movw	r14, r22
    1246:	8c 01       	movw	r16, r24
    1248:	6d 85       	ldd	r22, Y+13	; 0x0d
    124a:	7e 85       	ldd	r23, Y+14	; 0x0e
    124c:	8f 85       	ldd	r24, Y+15	; 0x0f
    124e:	98 89       	ldd	r25, Y+16	; 0x10
    1250:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1254:	9b 01       	movw	r18, r22
    1256:	ac 01       	movw	r20, r24
    1258:	c8 01       	movw	r24, r16
    125a:	b7 01       	movw	r22, r14
    125c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	bc 01       	movw	r22, r24
    1266:	cd 01       	movw	r24, r26
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e8       	ldi	r20, 0x80	; 128
    126e:	53 e4       	ldi	r21, 0x43	; 67
    1270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	ab 83       	std	Y+3, r26	; 0x03
    128a:	bc 83       	std	Y+4, r27	; 0x04

 	TCNT0=0;
    128c:	e2 e5       	ldi	r30, 0x52	; 82
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	10 82       	st	Z, r1

 	if (TIMER0_u32OverFlowRemainderTime>0)
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	af 81       	ldd	r26, Y+7	; 0x07
    1298:	b8 85       	ldd	r27, Y+8	; 0x08
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	a1 05       	cpc	r26, r1
    129e:	b1 05       	cpc	r27, r1
    12a0:	e1 f0       	breq	.+56     	; 0x12da <TIMER0_voidSetDesiredTime_us+0x17c>
 	{
 		TIMER0_u8TCNT0Preload =TIMER0_REG_CAPACITY - TIMER0_u32OverFlowRemCounts;
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	81 95       	neg	r24
    12a6:	80 93 9f 01 	sts	0x019F, r24
 		TCNT0 = TIMER0_u8TCNT0Preload;
    12aa:	e2 e5       	ldi	r30, 0x52	; 82
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 91 9f 01 	lds	r24, 0x019F
    12b2:	80 83       	st	Z, r24
 		TIMER0_u32OverFlowNo++;
    12b4:	80 91 9a 01 	lds	r24, 0x019A
    12b8:	90 91 9b 01 	lds	r25, 0x019B
    12bc:	a0 91 9c 01 	lds	r26, 0x019C
    12c0:	b0 91 9d 01 	lds	r27, 0x019D
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	a1 1d       	adc	r26, r1
    12c8:	b1 1d       	adc	r27, r1
    12ca:	80 93 9a 01 	sts	0x019A, r24
    12ce:	90 93 9b 01 	sts	0x019B, r25
    12d2:	a0 93 9c 01 	sts	0x019C, r26
    12d6:	b0 93 9d 01 	sts	0x019D, r27
 	}

 	TIMER0_voidStartTimer();
    12da:	0e 94 57 08 	call	0x10ae	; 0x10ae <TIMER0_voidStartTimer>

 }
    12de:	68 96       	adiw	r28, 0x18	; 24
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	08 95       	ret

000012f8 <TIMER0_voidOverFlowCallBack>:

 void TIMER0_voidOverFlowCallBack(void(*Copy_Ptr)(void))
  {
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <TIMER0_voidOverFlowCallBack+0x6>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
 	 TIMER0_OverFlowCallBackPointer = Copy_Ptr;
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	90 93 a5 01 	sts	0x01A5, r25
    130e:	80 93 a4 01 	sts	0x01A4, r24
  }
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <__vector_11>:


 void __vector_11(void)
 {
    131c:	1f 92       	push	r1
    131e:	0f 92       	push	r0
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	0f 92       	push	r0
    1324:	11 24       	eor	r1, r1
    1326:	2f 93       	push	r18
    1328:	3f 93       	push	r19
    132a:	4f 93       	push	r20
    132c:	5f 93       	push	r21
    132e:	6f 93       	push	r22
    1330:	7f 93       	push	r23
    1332:	8f 93       	push	r24
    1334:	9f 93       	push	r25
    1336:	af 93       	push	r26
    1338:	bf 93       	push	r27
    133a:	ef 93       	push	r30
    133c:	ff 93       	push	r31
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
 	static u32 Local_u32Counter = 0;
 	Local_u32Counter++;
    1346:	80 91 a0 01 	lds	r24, 0x01A0
    134a:	90 91 a1 01 	lds	r25, 0x01A1
    134e:	a0 91 a2 01 	lds	r26, 0x01A2
    1352:	b0 91 a3 01 	lds	r27, 0x01A3
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	a1 1d       	adc	r26, r1
    135a:	b1 1d       	adc	r27, r1
    135c:	80 93 a0 01 	sts	0x01A0, r24
    1360:	90 93 a1 01 	sts	0x01A1, r25
    1364:	a0 93 a2 01 	sts	0x01A2, r26
    1368:	b0 93 a3 01 	sts	0x01A3, r27
 	if(Local_u32Counter == TIMER0_u32OverFlowNo)
    136c:	20 91 a0 01 	lds	r18, 0x01A0
    1370:	30 91 a1 01 	lds	r19, 0x01A1
    1374:	40 91 a2 01 	lds	r20, 0x01A2
    1378:	50 91 a3 01 	lds	r21, 0x01A3
    137c:	80 91 9a 01 	lds	r24, 0x019A
    1380:	90 91 9b 01 	lds	r25, 0x019B
    1384:	a0 91 9c 01 	lds	r26, 0x019C
    1388:	b0 91 9d 01 	lds	r27, 0x019D
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
    1390:	4a 07       	cpc	r20, r26
    1392:	5b 07       	cpc	r21, r27
    1394:	91 f4       	brne	.+36     	; 0x13ba <__vector_11+0x9e>
 	{

 		TIMER0_OverFlowCallBackPointer(); //ACTION //calling
    1396:	e0 91 a4 01 	lds	r30, 0x01A4
    139a:	f0 91 a5 01 	lds	r31, 0x01A5
    139e:	09 95       	icall

 		Local_u32Counter = 0;
    13a0:	10 92 a0 01 	sts	0x01A0, r1
    13a4:	10 92 a1 01 	sts	0x01A1, r1
    13a8:	10 92 a2 01 	sts	0x01A2, r1
    13ac:	10 92 a3 01 	sts	0x01A3, r1
 		TCNT0 =   TIMER0_u8TCNT0Preload;
    13b0:	e2 e5       	ldi	r30, 0x52	; 82
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 91 9f 01 	lds	r24, 0x019F
    13b8:	80 83       	st	Z, r24
 	}


 }
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	1f 90       	pop	r1
    13de:	18 95       	reti

000013e0 <TIMER0_voidFastPWM>:
 void TIMER0_voidFastPWM(u8 Duty_Cycle)
 {
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	89 83       	std	Y+1, r24	; 0x01
	 switch(TIMER0_OC0_MODE)
	 {
	 case TIMER0_PWM_INVERTED_OC0:
	           //Duty_Cycle=((255-OCR0)/256)*100;
		       OCR0=(255-(TIMER0_REG_CAPACITY*Duty_Cycle)/100);
    13ec:	ec e5       	ldi	r30, 0x5C	; 92
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	98 2f       	mov	r25, r24
    13f8:	88 27       	eor	r24, r24
    13fa:	24 e6       	ldi	r18, 0x64	; 100
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	b9 01       	movw	r22, r18
    1400:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__divmodhi4>
    1404:	cb 01       	movw	r24, r22
    1406:	80 95       	com	r24
    1408:	80 83       	st	Z, r24
	 case TIMER0_PWM_NONINVERTED_OC0:
	 	       //   Duty_Cycle=((OCR0+1)/256)*100;
		        OCR0=((TIMER0_REG_CAPACITY*Duty_Cycle)/100)-1;
	 	        break;
	 }
	 TIMER0_voidStartTimer();
    140a:	0e 94 57 08 	call	0x10ae	; 0x10ae <TIMER0_voidStartTimer>
 }
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <TIMER0_voidPhasePWM>:
 void TIMER0_voidPhasePWM(u8 Duty_Cycle)
 {
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	0f 92       	push	r0
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	89 83       	std	Y+1, r24	; 0x01
	 switch(TIMER0_OC0_MODE)
	 	 {
	 	 case TIMER0_PWM_INVERTED_OC0:
	 	           //Duty_Cycle=((255-OCR0)/255)*100;
	 		        OCR0=(255-(255*Duty_Cycle)/100);
    1422:	ec e5       	ldi	r30, 0x5C	; 92
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	48 2f       	mov	r20, r24
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	ca 01       	movw	r24, r20
    142e:	9c 01       	movw	r18, r24
    1430:	22 0f       	add	r18, r18
    1432:	33 1f       	adc	r19, r19
    1434:	c9 01       	movw	r24, r18
    1436:	96 95       	lsr	r25
    1438:	98 2f       	mov	r25, r24
    143a:	88 27       	eor	r24, r24
    143c:	97 95       	ror	r25
    143e:	87 95       	ror	r24
    1440:	82 1b       	sub	r24, r18
    1442:	93 0b       	sbc	r25, r19
    1444:	84 0f       	add	r24, r20
    1446:	95 1f       	adc	r25, r21
    1448:	24 e6       	ldi	r18, 0x64	; 100
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	b9 01       	movw	r22, r18
    144e:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__divmodhi4>
    1452:	cb 01       	movw	r24, r22
    1454:	80 95       	com	r24
    1456:	80 83       	st	Z, r24
	 	 case TIMER0_PWM_NONINVERTED_OC0:
	 	 	       //   Duty_Cycle=((OCR0)/255)*100;
	 		       OCR0=((255*Duty_Cycle)/100);
	 	 	        break;
	 	 }
	 	 TIMER0_voidStartTimer();
    1458:	0e 94 57 08 	call	0x10ae	; 0x10ae <TIMER0_voidStartTimer>
 }
    145c:	0f 90       	pop	r0
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <SPI_InitMaster>:
#include "SPI.h"
#include "../DIO/Memmap.h"
#include "../../LIB/STD_TYPES.h"
#include "../DIO/DIO_interface.h"
void SPI_InitMaster()
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
	DIO_void_setPin_direction(PORTB_ID,PIN4,OUTPUT);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	64 e0       	ldi	r22, 0x04	; 4
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN5,OUTPUT);
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	65 e0       	ldi	r22, 0x05	; 5
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN6,INPUT);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	66 e0       	ldi	r22, 0x06	; 6
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN7,OUTPUT);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	67 e0       	ldi	r22, 0x07	; 7
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
	SPCR |= (1<<SPE)|(1<<MSTR);
    1494:	ad e2       	ldi	r26, 0x2D	; 45
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ed e2       	ldi	r30, 0x2D	; 45
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 65       	ori	r24, 0x50	; 80
    14a0:	8c 93       	st	X, r24
}
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <SPI_InitSlave>:

void SPI_InitSlave()
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
	DIO_void_setPin_direction(PORTB_ID,PIN4,INPUT);
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	64 e0       	ldi	r22, 0x04	; 4
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN5,INPUT);
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	65 e0       	ldi	r22, 0x05	; 5
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN6,OUTPUT);
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	66 e0       	ldi	r22, 0x06	; 6
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTB_ID,PIN7,INPUT);
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	67 e0       	ldi	r22, 0x07	; 7
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
	SPCR |= (1<<SPE);
    14d8:	ad e2       	ldi	r26, 0x2D	; 45
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	ed e2       	ldi	r30, 0x2D	; 45
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 64       	ori	r24, 0x40	; 64
    14e4:	8c 93       	st	X, r24
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <SPI_SendByte>:

void SPI_SendByte(u8 data)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	0f 92       	push	r0
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    14f8:	ef e2       	ldi	r30, 0x2F	; 47
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	80 83       	st	Z, r24
	while(Bit_Is_Clear(SPSR,SPIF));
    1500:	ee e2       	ldi	r30, 0x2E	; 46
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	88 23       	and	r24, r24
    1508:	dc f7       	brge	.-10     	; 0x1500 <SPI_SendByte+0x14>
}
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <SPI_ReceiveByte>:

u8 SPI_ReceiveByte()
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
	while(Bit_Is_Clear(SPSR,SPIF));
    151a:	ee e2       	ldi	r30, 0x2E	; 46
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	88 23       	and	r24, r24
    1522:	dc f7       	brge	.-10     	; 0x151a <SPI_ReceiveByte+0x8>
	return SPDR;
    1524:	ef e2       	ldi	r30, 0x2F	; 47
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
}
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <SPI_SendString>:

void SPI_SendString(u8 *str)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <SPI_SendString+0x6>
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	0a c0       	rjmp	.+20     	; 0x1554 <SPI_SendString+0x24>
	while(*str)
	{
		SPI_SendByte(*str);
    1540:	e9 81       	ldd	r30, Y+1	; 0x01
    1542:	fa 81       	ldd	r31, Y+2	; 0x02
    1544:	80 81       	ld	r24, Z
    1546:	0e 94 76 0a 	call	0x14ec	; 0x14ec <SPI_SendByte>
		str++;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
	return SPDR;
}

void SPI_SendString(u8 *str)
{
	while(*str)
    1554:	e9 81       	ldd	r30, Y+1	; 0x01
    1556:	fa 81       	ldd	r31, Y+2	; 0x02
    1558:	80 81       	ld	r24, Z
    155a:	88 23       	and	r24, r24
    155c:	89 f7       	brne	.-30     	; 0x1540 <SPI_SendString+0x10>
	{
		SPI_SendByte(*str);
		str++;
	}
}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <SPI_ReceiveString>:

void SPI_ReceiveString(u8 *str)
{
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	00 d0       	rcall	.+0      	; 0x1572 <SPI_ReceiveString+0xa>
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	9b 83       	std	Y+3, r25	; 0x03
    157a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    157c:	19 82       	std	Y+1, r1	; 0x01
	str[i] = SPI_ReceiveByte();
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	8c 01       	movw	r16, r24
    158a:	02 0f       	add	r16, r18
    158c:	13 1f       	adc	r17, r19
    158e:	0e 94 89 0a 	call	0x1512	; 0x1512 <SPI_ReceiveByte>
    1592:	f8 01       	movw	r30, r16
    1594:	80 83       	st	Z, r24
    1596:	0f c0       	rjmp	.+30     	; 0x15b6 <SPI_ReceiveString+0x4e>
	while(str[i] != '#')
	{
		i++;
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_ReceiveByte();
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	9b 81       	ldd	r25, Y+3	; 0x03
    15a8:	8c 01       	movw	r16, r24
    15aa:	02 0f       	add	r16, r18
    15ac:	13 1f       	adc	r17, r19
    15ae:	0e 94 89 0a 	call	0x1512	; 0x1512 <SPI_ReceiveByte>
    15b2:	f8 01       	movw	r30, r16
    15b4:	80 83       	st	Z, r24

void SPI_ReceiveString(u8 *str)
{
	u8 i = 0;
	str[i] = SPI_ReceiveByte();
	while(str[i] != '#')
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	9b 81       	ldd	r25, Y+3	; 0x03
    15c0:	fc 01       	movw	r30, r24
    15c2:	e2 0f       	add	r30, r18
    15c4:	f3 1f       	adc	r31, r19
    15c6:	80 81       	ld	r24, Z
    15c8:	83 32       	cpi	r24, 0x23	; 35
    15ca:	31 f7       	brne	.-52     	; 0x1598 <SPI_ReceiveString+0x30>
	{
		i++;
		str[i] = SPI_ReceiveByte();
	}
	str[i] = '\0';
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	9b 81       	ldd	r25, Y+3	; 0x03
    15d6:	fc 01       	movw	r30, r24
    15d8:	e2 0f       	add	r30, r18
    15da:	f3 1f       	adc	r31, r19
    15dc:	10 82       	st	Z, r1
}
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	08 95       	ret

000015ee <EXTI_void_int>:
#include "../DIO/Memmap.h"
#include  "ex_int.h"


void EXTI_void_int( u8 INT)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <EXTI_void_int+0x6>
    15f4:	0f 92       	push	r0
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	89 83       	std	Y+1, r24	; 0x01
	//INT0 is input ( done )
	//  Enable peripheral interrupt enable
		switch(INT)
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3b 83       	std	Y+3, r19	; 0x03
    1604:	2a 83       	std	Y+2, r18	; 0x02
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	9b 81       	ldd	r25, Y+3	; 0x03
    160a:	86 30       	cpi	r24, 0x06	; 6
    160c:	91 05       	cpc	r25, r1
    160e:	59 f0       	breq	.+22     	; 0x1626 <EXTI_void_int+0x38>
    1610:	2a 81       	ldd	r18, Y+2	; 0x02
    1612:	3b 81       	ldd	r19, Y+3	; 0x03
    1614:	27 30       	cpi	r18, 0x07	; 7
    1616:	31 05       	cpc	r19, r1
    1618:	71 f0       	breq	.+28     	; 0x1636 <EXTI_void_int+0x48>
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	9b 81       	ldd	r25, Y+3	; 0x03
    161e:	85 30       	cpi	r24, 0x05	; 5
    1620:	91 05       	cpc	r25, r1
    1622:	89 f0       	breq	.+34     	; 0x1646 <EXTI_void_int+0x58>
    1624:	17 c0       	rjmp	.+46     	; 0x1654 <EXTI_void_int+0x66>
		{
		case INT0:
			SETBIT(GICR,6);
    1626:	ab e5       	ldi	r26, 0x5B	; 91
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	eb e5       	ldi	r30, 0x5B	; 91
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	80 64       	ori	r24, 0x40	; 64
    1632:	8c 93       	st	X, r24
    1634:	0f c0       	rjmp	.+30     	; 0x1654 <EXTI_void_int+0x66>
			break;
		case INT1:
			SETBIT(GICR,7);
    1636:	ab e5       	ldi	r26, 0x5B	; 91
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	eb e5       	ldi	r30, 0x5B	; 91
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 68       	ori	r24, 0x80	; 128
    1642:	8c 93       	st	X, r24
    1644:	07 c0       	rjmp	.+14     	; 0x1654 <EXTI_void_int+0x66>
			break;
		case INT2:
			SETBIT(GICR,5);
    1646:	ab e5       	ldi	r26, 0x5B	; 91
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	eb e5       	ldi	r30, 0x5B	; 91
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 62       	ori	r24, 0x20	; 32
    1652:	8c 93       	st	X, r24
			break;
		}
     //Enable GIE
	 SETBIT(SREG,7);
    1654:	af e5       	ldi	r26, 0x5F	; 95
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ef e5       	ldi	r30, 0x5F	; 95
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	80 68       	ori	r24, 0x80	; 128
    1660:	8c 93       	st	X, r24
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <EXTI_void_changeMod>:
void EXTI_void_changeMod(ext_mode_type mode,u8 INT)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	00 d0       	rcall	.+0      	; 0x1674 <EXTI_void_changeMod+0x6>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <EXTI_void_changeMod+0x8>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <EXTI_void_changeMod+0xa>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	6a 83       	std	Y+2, r22	; 0x02
     if (INT==INT0)
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	86 30       	cpi	r24, 0x06	; 6
    1684:	09 f0       	breq	.+2      	; 0x1688 <EXTI_void_changeMod+0x1a>
    1686:	5c c0       	rjmp	.+184    	; 0x1740 <EXTI_void_changeMod+0xd2>
        {
       	 switch(mode )
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	3e 83       	std	Y+6, r19	; 0x06
    1690:	2d 83       	std	Y+5, r18	; 0x05
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <EXTI_void_changeMod+0x30>
    169c:	42 c0       	rjmp	.+132    	; 0x1722 <EXTI_void_changeMod+0xb4>
    169e:	2d 81       	ldd	r18, Y+5	; 0x05
    16a0:	3e 81       	ldd	r19, Y+6	; 0x06
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <EXTI_void_changeMod+0x44>
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <EXTI_void_changeMod+0x5a>
    16b0:	a6 c0       	rjmp	.+332    	; 0x17fe <EXTI_void_changeMod+0x190>
    16b2:	2d 81       	ldd	r18, Y+5	; 0x05
    16b4:	3e 81       	ldd	r19, Y+6	; 0x06
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	21 f1       	breq	.+72     	; 0x1704 <EXTI_void_changeMod+0x96>
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	9e 81       	ldd	r25, Y+6	; 0x06
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	91 05       	cpc	r25, r1
    16c4:	81 f0       	breq	.+32     	; 0x16e6 <EXTI_void_changeMod+0x78>
    16c6:	9b c0       	rjmp	.+310    	; 0x17fe <EXTI_void_changeMod+0x190>
       	 {
         case EXT_LOW_MODE :
			  CLRBIT(MCUCR,0);
    16c8:	a5 e5       	ldi	r26, 0x55	; 85
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e5 e5       	ldi	r30, 0x55	; 85
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8e 7f       	andi	r24, 0xFE	; 254
    16d4:	8c 93       	st	X, r24
			  CLRBIT(MCUCR,1);
    16d6:	a5 e5       	ldi	r26, 0x55	; 85
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e5 e5       	ldi	r30, 0x55	; 85
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8d 7f       	andi	r24, 0xFD	; 253
    16e2:	8c 93       	st	X, r24
    16e4:	8c c0       	rjmp	.+280    	; 0x17fe <EXTI_void_changeMod+0x190>
			  break;
         case EXT_RAISING_MODE :
			  SETBIT(MCUCR,0);
    16e6:	a5 e5       	ldi	r26, 0x55	; 85
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e5       	ldi	r30, 0x55	; 85
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	81 60       	ori	r24, 0x01	; 1
    16f2:	8c 93       	st	X, r24
			  SETBIT(MCUCR,1);
    16f4:	a5 e5       	ldi	r26, 0x55	; 85
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e5 e5       	ldi	r30, 0x55	; 85
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	82 60       	ori	r24, 0x02	; 2
    1700:	8c 93       	st	X, r24
    1702:	7d c0       	rjmp	.+250    	; 0x17fe <EXTI_void_changeMod+0x190>
			  break;
         case EXT_FAILLING_MODE :
			  CLRBIT(MCUCR,0);
    1704:	a5 e5       	ldi	r26, 0x55	; 85
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e5       	ldi	r30, 0x55	; 85
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8e 7f       	andi	r24, 0xFE	; 254
    1710:	8c 93       	st	X, r24
			  SETBIT(MCUCR,1);
    1712:	a5 e5       	ldi	r26, 0x55	; 85
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e5 e5       	ldi	r30, 0x55	; 85
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	82 60       	ori	r24, 0x02	; 2
    171e:	8c 93       	st	X, r24
    1720:	6e c0       	rjmp	.+220    	; 0x17fe <EXTI_void_changeMod+0x190>
			  break;
         case EXT_CHANGE_MODE :
			  SETBIT(MCUCR,0);
    1722:	a5 e5       	ldi	r26, 0x55	; 85
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e5 e5       	ldi	r30, 0x55	; 85
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	81 60       	ori	r24, 0x01	; 1
    172e:	8c 93       	st	X, r24
			  CLRBIT(MCUCR,1);
    1730:	a5 e5       	ldi	r26, 0x55	; 85
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e5 e5       	ldi	r30, 0x55	; 85
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8d 7f       	andi	r24, 0xFD	; 253
    173c:	8c 93       	st	X, r24
    173e:	5f c0       	rjmp	.+190    	; 0x17fe <EXTI_void_changeMod+0x190>
			  break;
            }
        }
     else if (INT==INT1)
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	87 30       	cpi	r24, 0x07	; 7
    1744:	09 f0       	breq	.+2      	; 0x1748 <EXTI_void_changeMod+0xda>
    1746:	5b c0       	rjmp	.+182    	; 0x17fe <EXTI_void_changeMod+0x190>
            {
           	 switch(mode )
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3c 83       	std	Y+4, r19	; 0x04
    1750:	2b 83       	std	Y+3, r18	; 0x03
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <EXTI_void_changeMod+0xf0>
    175c:	42 c0       	rjmp	.+132    	; 0x17e2 <EXTI_void_changeMod+0x174>
    175e:	2b 81       	ldd	r18, Y+3	; 0x03
    1760:	3c 81       	ldd	r19, Y+4	; 0x04
    1762:	22 30       	cpi	r18, 0x02	; 2
    1764:	31 05       	cpc	r19, r1
    1766:	2c f4       	brge	.+10     	; 0x1772 <EXTI_void_changeMod+0x104>
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	61 f0       	breq	.+24     	; 0x1788 <EXTI_void_changeMod+0x11a>
    1770:	46 c0       	rjmp	.+140    	; 0x17fe <EXTI_void_changeMod+0x190>
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	3c 81       	ldd	r19, Y+4	; 0x04
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	31 05       	cpc	r19, r1
    177a:	21 f1       	breq	.+72     	; 0x17c4 <EXTI_void_changeMod+0x156>
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	91 05       	cpc	r25, r1
    1784:	81 f0       	breq	.+32     	; 0x17a6 <EXTI_void_changeMod+0x138>
    1786:	3b c0       	rjmp	.+118    	; 0x17fe <EXTI_void_changeMod+0x190>
           	 {
             case EXT_LOW_MODE :
				  CLRBIT(MCUCR,2);
    1788:	a5 e5       	ldi	r26, 0x55	; 85
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e5 e5       	ldi	r30, 0x55	; 85
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	8b 7f       	andi	r24, 0xFB	; 251
    1794:	8c 93       	st	X, r24
				  CLRBIT(MCUCR,3);
    1796:	a5 e5       	ldi	r26, 0x55	; 85
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e5       	ldi	r30, 0x55	; 85
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	87 7f       	andi	r24, 0xF7	; 247
    17a2:	8c 93       	st	X, r24
    17a4:	2c c0       	rjmp	.+88     	; 0x17fe <EXTI_void_changeMod+0x190>
				  break;
             case EXT_RAISING_MODE :
				  SETBIT(MCUCR,2);
    17a6:	a5 e5       	ldi	r26, 0x55	; 85
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e5 e5       	ldi	r30, 0x55	; 85
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	84 60       	ori	r24, 0x04	; 4
    17b2:	8c 93       	st	X, r24
				  SETBIT(MCUCR,3);
    17b4:	a5 e5       	ldi	r26, 0x55	; 85
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e5 e5       	ldi	r30, 0x55	; 85
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	88 60       	ori	r24, 0x08	; 8
    17c0:	8c 93       	st	X, r24
    17c2:	1d c0       	rjmp	.+58     	; 0x17fe <EXTI_void_changeMod+0x190>
				  break;
             case EXT_FAILLING_MODE :
				  CLRBIT(MCUCR,2);
    17c4:	a5 e5       	ldi	r26, 0x55	; 85
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e5 e5       	ldi	r30, 0x55	; 85
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	8b 7f       	andi	r24, 0xFB	; 251
    17d0:	8c 93       	st	X, r24
				  SETBIT(MCUCR,3);
    17d2:	a5 e5       	ldi	r26, 0x55	; 85
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e5 e5       	ldi	r30, 0x55	; 85
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	88 60       	ori	r24, 0x08	; 8
    17de:	8c 93       	st	X, r24
    17e0:	0e c0       	rjmp	.+28     	; 0x17fe <EXTI_void_changeMod+0x190>
				  break;
             case EXT_CHANGE_MODE :
				  SETBIT(MCUCR,2);
    17e2:	a5 e5       	ldi	r26, 0x55	; 85
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e5 e5       	ldi	r30, 0x55	; 85
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	84 60       	ori	r24, 0x04	; 4
    17ee:	8c 93       	st	X, r24
				  CLRBIT(MCUCR,3);
    17f0:	a5 e5       	ldi	r26, 0x55	; 85
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e5 e5       	ldi	r30, 0x55	; 85
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	87 7f       	andi	r24, 0xF7	; 247
    17fc:	8c 93       	st	X, r24
						 case EXT_FAILLING_MODE :
								  CLRBIT(mcucsr,6);
								  break;
					}*/
            }
}
    17fe:	26 96       	adiw	r28, 0x06	; 6
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <DIO_void_setPin_value>:
#include "DIO_interface.h"

#include "../../LIB/STD_TYPES.h"

void DIO_void_setPin_value(port_type port, pin_type pin,value_type value)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	27 97       	sbiw	r28, 0x07	; 7
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	6a 83       	std	Y+2, r22	; 0x02
    1828:	4b 83       	std	Y+3, r20	; 0x03
	if(value == LOW)
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	88 23       	and	r24, r24
    182e:	09 f0       	breq	.+2      	; 0x1832 <DIO_void_setPin_value+0x22>
    1830:	74 c0       	rjmp	.+232    	; 0x191a <DIO_void_setPin_value+0x10a>
	{
		switch(port)
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	3f 83       	std	Y+7, r19	; 0x07
    183a:	2e 83       	std	Y+6, r18	; 0x06
    183c:	8e 81       	ldd	r24, Y+6	; 0x06
    183e:	9f 81       	ldd	r25, Y+7	; 0x07
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	59 f1       	breq	.+86     	; 0x189c <DIO_void_setPin_value+0x8c>
    1846:	2e 81       	ldd	r18, Y+6	; 0x06
    1848:	3f 81       	ldd	r19, Y+7	; 0x07
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	2c f4       	brge	.+10     	; 0x185a <DIO_void_setPin_value+0x4a>
    1850:	8e 81       	ldd	r24, Y+6	; 0x06
    1852:	9f 81       	ldd	r25, Y+7	; 0x07
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	69 f0       	breq	.+26     	; 0x1872 <DIO_void_setPin_value+0x62>
    1858:	d2 c0       	rjmp	.+420    	; 0x19fe <DIO_void_setPin_value+0x1ee>
    185a:	2e 81       	ldd	r18, Y+6	; 0x06
    185c:	3f 81       	ldd	r19, Y+7	; 0x07
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	89 f1       	breq	.+98     	; 0x18c6 <DIO_void_setPin_value+0xb6>
    1864:	8e 81       	ldd	r24, Y+6	; 0x06
    1866:	9f 81       	ldd	r25, Y+7	; 0x07
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	91 05       	cpc	r25, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <DIO_void_setPin_value+0x60>
    186e:	40 c0       	rjmp	.+128    	; 0x18f0 <DIO_void_setPin_value+0xe0>
    1870:	c6 c0       	rjmp	.+396    	; 0x19fe <DIO_void_setPin_value+0x1ee>
		{
		case PORTA_ID:
			CLRBIT(PORTA, pin);
    1872:	ab e3       	ldi	r26, 0x3B	; 59
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	eb e3       	ldi	r30, 0x3B	; 59
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_void_setPin_value+0x80>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <DIO_void_setPin_value+0x7c>
    1894:	80 95       	com	r24
    1896:	84 23       	and	r24, r20
    1898:	8c 93       	st	X, r24
    189a:	b1 c0       	rjmp	.+354    	; 0x19fe <DIO_void_setPin_value+0x1ee>
			break;
		case PORTB_ID:
			CLRBIT(PORTB, pin);
    189c:	a8 e3       	ldi	r26, 0x38	; 56
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e8 e3       	ldi	r30, 0x38	; 56
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <DIO_void_setPin_value+0xaa>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <DIO_void_setPin_value+0xa6>
    18be:	80 95       	com	r24
    18c0:	84 23       	and	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	9c c0       	rjmp	.+312    	; 0x19fe <DIO_void_setPin_value+0x1ee>
			break;
		case PORTC_ID:
			CLRBIT(PORTC, pin);
    18c6:	a5 e3       	ldi	r26, 0x35	; 53
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e5 e3       	ldi	r30, 0x35	; 53
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <DIO_void_setPin_value+0xd4>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <DIO_void_setPin_value+0xd0>
    18e8:	80 95       	com	r24
    18ea:	84 23       	and	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	87 c0       	rjmp	.+270    	; 0x19fe <DIO_void_setPin_value+0x1ee>
			break;
		case PORTD_ID:
			CLRBIT(PORTD, pin);
    18f0:	a2 e3       	ldi	r26, 0x32	; 50
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e2 e3       	ldi	r30, 0x32	; 50
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_void_setPin_value+0xfe>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_void_setPin_value+0xfa>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	72 c0       	rjmp	.+228    	; 0x19fe <DIO_void_setPin_value+0x1ee>
			break;
		}//end switch
	}//end if
	else if(value == HIGH)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	09 f0       	breq	.+2      	; 0x1922 <DIO_void_setPin_value+0x112>
    1920:	6e c0       	rjmp	.+220    	; 0x19fe <DIO_void_setPin_value+0x1ee>
	{
		switch(port)
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3d 83       	std	Y+5, r19	; 0x05
    192a:	2c 83       	std	Y+4, r18	; 0x04
    192c:	8c 81       	ldd	r24, Y+4	; 0x04
    192e:	9d 81       	ldd	r25, Y+5	; 0x05
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	91 05       	cpc	r25, r1
    1934:	49 f1       	breq	.+82     	; 0x1988 <DIO_void_setPin_value+0x178>
    1936:	2c 81       	ldd	r18, Y+4	; 0x04
    1938:	3d 81       	ldd	r19, Y+5	; 0x05
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	2c f4       	brge	.+10     	; 0x194a <DIO_void_setPin_value+0x13a>
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	9d 81       	ldd	r25, Y+5	; 0x05
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	61 f0       	breq	.+24     	; 0x1960 <DIO_void_setPin_value+0x150>
    1948:	5a c0       	rjmp	.+180    	; 0x19fe <DIO_void_setPin_value+0x1ee>
    194a:	2c 81       	ldd	r18, Y+4	; 0x04
    194c:	3d 81       	ldd	r19, Y+5	; 0x05
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	71 f1       	breq	.+92     	; 0x19b0 <DIO_void_setPin_value+0x1a0>
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	e9 f1       	breq	.+122    	; 0x19d8 <DIO_void_setPin_value+0x1c8>
    195e:	4f c0       	rjmp	.+158    	; 0x19fe <DIO_void_setPin_value+0x1ee>
		{
		case PORTA_ID:
			SETBIT(PORTA, pin);
    1960:	ab e3       	ldi	r26, 0x3B	; 59
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	eb e3       	ldi	r30, 0x3B	; 59
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_void_setPin_value+0x16e>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_void_setPin_value+0x16a>
    1982:	84 2b       	or	r24, r20
    1984:	8c 93       	st	X, r24
    1986:	3b c0       	rjmp	.+118    	; 0x19fe <DIO_void_setPin_value+0x1ee>
			break;
		case PORTB_ID:
			SETBIT(PORTB, pin);
    1988:	a8 e3       	ldi	r26, 0x38	; 56
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e8 e3       	ldi	r30, 0x38	; 56
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_void_setPin_value+0x196>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <DIO_void_setPin_value+0x192>
    19aa:	84 2b       	or	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	27 c0       	rjmp	.+78     	; 0x19fe <DIO_void_setPin_value+0x1ee>
			break;
		case PORTC_ID:
			SETBIT(PORTC, pin);
    19b0:	a5 e3       	ldi	r26, 0x35	; 53
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e5 e3       	ldi	r30, 0x35	; 53
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_void_setPin_value+0x1be>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_void_setPin_value+0x1ba>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	13 c0       	rjmp	.+38     	; 0x19fe <DIO_void_setPin_value+0x1ee>
			break;
		case PORTD_ID:
			SETBIT(PORTD, pin);
    19d8:	a2 e3       	ldi	r26, 0x32	; 50
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e2 e3       	ldi	r30, 0x32	; 50
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_void_setPin_value+0x1e6>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_void_setPin_value+0x1e2>
    19fa:	84 2b       	or	r24, r20
    19fc:	8c 93       	st	X, r24
	}//end else if
	else
	{

	}//end else
}//end DIO_void_setPin_value
    19fe:	27 96       	adiw	r28, 0x07	; 7
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <DIO_void_setPin_direction>:
void DIO_void_setPin_direction(port_type port, pin_type pin,direction_type direction)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	27 97       	sbiw	r28, 0x07	; 7
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	6a 83       	std	Y+2, r22	; 0x02
    1a28:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == INPUT)
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 23       	and	r24, r24
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <DIO_void_setPin_direction+0x22>
    1a30:	74 c0       	rjmp	.+232    	; 0x1b1a <DIO_void_setPin_direction+0x10a>
	{
		switch(port)
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	3f 83       	std	Y+7, r19	; 0x07
    1a3a:	2e 83       	std	Y+6, r18	; 0x06
    1a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	91 05       	cpc	r25, r1
    1a44:	59 f1       	breq	.+86     	; 0x1a9c <DIO_void_setPin_direction+0x8c>
    1a46:	2e 81       	ldd	r18, Y+6	; 0x06
    1a48:	3f 81       	ldd	r19, Y+7	; 0x07
    1a4a:	22 30       	cpi	r18, 0x02	; 2
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <DIO_void_setPin_direction+0x4a>
    1a50:	8e 81       	ldd	r24, Y+6	; 0x06
    1a52:	9f 81       	ldd	r25, Y+7	; 0x07
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f0       	breq	.+26     	; 0x1a72 <DIO_void_setPin_direction+0x62>
    1a58:	d2 c0       	rjmp	.+420    	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
    1a5a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a5c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a5e:	22 30       	cpi	r18, 0x02	; 2
    1a60:	31 05       	cpc	r19, r1
    1a62:	89 f1       	breq	.+98     	; 0x1ac6 <DIO_void_setPin_direction+0xb6>
    1a64:	8e 81       	ldd	r24, Y+6	; 0x06
    1a66:	9f 81       	ldd	r25, Y+7	; 0x07
    1a68:	83 30       	cpi	r24, 0x03	; 3
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <DIO_void_setPin_direction+0x60>
    1a6e:	40 c0       	rjmp	.+128    	; 0x1af0 <DIO_void_setPin_direction+0xe0>
    1a70:	c6 c0       	rjmp	.+396    	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
		{
		case PORTA_ID:
			CLRBIT(DDRA, pin);
    1a72:	aa e3       	ldi	r26, 0x3A	; 58
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	ea e3       	ldi	r30, 0x3A	; 58
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <DIO_void_setPin_direction+0x80>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <DIO_void_setPin_direction+0x7c>
    1a94:	80 95       	com	r24
    1a96:	84 23       	and	r24, r20
    1a98:	8c 93       	st	X, r24
    1a9a:	b1 c0       	rjmp	.+354    	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTB_ID:
			CLRBIT(DDRB, pin);
    1a9c:	a7 e3       	ldi	r26, 0x37	; 55
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e7 e3       	ldi	r30, 0x37	; 55
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 2e       	mov	r0, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <DIO_void_setPin_direction+0xaa>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <DIO_void_setPin_direction+0xa6>
    1abe:	80 95       	com	r24
    1ac0:	84 23       	and	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	9c c0       	rjmp	.+312    	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTC_ID:
			CLRBIT(DDRC, pin);
    1ac6:	a4 e3       	ldi	r26, 0x34	; 52
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e4 e3       	ldi	r30, 0x34	; 52
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_void_setPin_direction+0xd4>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_void_setPin_direction+0xd0>
    1ae8:	80 95       	com	r24
    1aea:	84 23       	and	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	87 c0       	rjmp	.+270    	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTD_ID:
			CLRBIT(DDRD, pin);
    1af0:	a1 e3       	ldi	r26, 0x31	; 49
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e1 e3       	ldi	r30, 0x31	; 49
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <DIO_void_setPin_direction+0xfe>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <DIO_void_setPin_direction+0xfa>
    1b12:	80 95       	com	r24
    1b14:	84 23       	and	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	72 c0       	rjmp	.+228    	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
			break;
		}//end switch
	}//end if
	else if(direction == OUTPUT)
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <DIO_void_setPin_direction+0x112>
    1b20:	6e c0       	rjmp	.+220    	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
	{
		switch(port)
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	3d 83       	std	Y+5, r19	; 0x05
    1b2a:	2c 83       	std	Y+4, r18	; 0x04
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	91 05       	cpc	r25, r1
    1b34:	49 f1       	breq	.+82     	; 0x1b88 <DIO_void_setPin_direction+0x178>
    1b36:	2c 81       	ldd	r18, Y+4	; 0x04
    1b38:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <DIO_void_setPin_direction+0x13a>
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	61 f0       	breq	.+24     	; 0x1b60 <DIO_void_setPin_direction+0x150>
    1b48:	5a c0       	rjmp	.+180    	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
    1b4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	71 f1       	breq	.+92     	; 0x1bb0 <DIO_void_setPin_direction+0x1a0>
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	e9 f1       	breq	.+122    	; 0x1bd8 <DIO_void_setPin_direction+0x1c8>
    1b5e:	4f c0       	rjmp	.+158    	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
		{
		case PORTA_ID:
			SETBIT(DDRA, pin);
    1b60:	aa e3       	ldi	r26, 0x3A	; 58
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	ea e3       	ldi	r30, 0x3A	; 58
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <DIO_void_setPin_direction+0x16e>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <DIO_void_setPin_direction+0x16a>
    1b82:	84 2b       	or	r24, r20
    1b84:	8c 93       	st	X, r24
    1b86:	3b c0       	rjmp	.+118    	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTB_ID:
			SETBIT(DDRB, pin);
    1b88:	a7 e3       	ldi	r26, 0x37	; 55
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e7 e3       	ldi	r30, 0x37	; 55
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <DIO_void_setPin_direction+0x196>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <DIO_void_setPin_direction+0x192>
    1baa:	84 2b       	or	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	27 c0       	rjmp	.+78     	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTC_ID:
			SETBIT(DDRC, pin);
    1bb0:	a4 e3       	ldi	r26, 0x34	; 52
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e4 e3       	ldi	r30, 0x34	; 52
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <DIO_void_setPin_direction+0x1be>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <DIO_void_setPin_direction+0x1ba>
    1bd2:	84 2b       	or	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	13 c0       	rjmp	.+38     	; 0x1bfe <DIO_void_setPin_direction+0x1ee>
			break;
		case PORTD_ID:
			SETBIT(DDRD, pin);
    1bd8:	a1 e3       	ldi	r26, 0x31	; 49
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e1 e3       	ldi	r30, 0x31	; 49
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <DIO_void_setPin_direction+0x1e6>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <DIO_void_setPin_direction+0x1e2>
    1bfa:	84 2b       	or	r24, r20
    1bfc:	8c 93       	st	X, r24
	}//end else if
	else
	{

	}//end else
}//end DIO_void_setPin_direction
    1bfe:	27 96       	adiw	r28, 0x07	; 7
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <DIO_value_type_getPin_value>:
value_type DIO_value_type_getPin_value(port_type port, pin_type pin)
{
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <DIO_value_type_getPin_value+0x6>
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <DIO_value_type_getPin_value+0x8>
    1c18:	0f 92       	push	r0
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
    1c20:	6b 83       	std	Y+3, r22	; 0x03
	value_type ret_val;

	switch(port)
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3d 83       	std	Y+5, r19	; 0x05
    1c2a:	2c 83       	std	Y+4, r18	; 0x04
    1c2c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c2e:	5d 81       	ldd	r21, Y+5	; 0x05
    1c30:	41 30       	cpi	r20, 0x01	; 1
    1c32:	51 05       	cpc	r21, r1
    1c34:	41 f1       	breq	.+80     	; 0x1c86 <DIO_value_type_getPin_value+0x76>
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	34 f4       	brge	.+12     	; 0x1c4c <DIO_value_type_getPin_value+0x3c>
    1c40:	2c 81       	ldd	r18, Y+4	; 0x04
    1c42:	3d 81       	ldd	r19, Y+5	; 0x05
    1c44:	21 15       	cp	r18, r1
    1c46:	31 05       	cpc	r19, r1
    1c48:	61 f0       	breq	.+24     	; 0x1c62 <DIO_value_type_getPin_value+0x52>
    1c4a:	52 c0       	rjmp	.+164    	; 0x1cf0 <DIO_value_type_getPin_value+0xe0>
    1c4c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c4e:	5d 81       	ldd	r21, Y+5	; 0x05
    1c50:	42 30       	cpi	r20, 0x02	; 2
    1c52:	51 05       	cpc	r21, r1
    1c54:	51 f1       	breq	.+84     	; 0x1caa <DIO_value_type_getPin_value+0x9a>
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5a:	83 30       	cpi	r24, 0x03	; 3
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	b9 f1       	breq	.+110    	; 0x1cce <DIO_value_type_getPin_value+0xbe>
    1c60:	47 c0       	rjmp	.+142    	; 0x1cf0 <DIO_value_type_getPin_value+0xe0>
	{
	case PORTA_ID:
		ret_val = GETBIT(PINA, pin);
    1c62:	e9 e3       	ldi	r30, 0x39	; 57
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a9 01       	movw	r20, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <DIO_value_type_getPin_value+0x6a>
    1c76:	55 95       	asr	r21
    1c78:	47 95       	ror	r20
    1c7a:	8a 95       	dec	r24
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <DIO_value_type_getPin_value+0x66>
    1c7e:	ca 01       	movw	r24, r20
    1c80:	81 70       	andi	r24, 0x01	; 1
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	35 c0       	rjmp	.+106    	; 0x1cf0 <DIO_value_type_getPin_value+0xe0>
		break;
	case PORTB_ID:
		ret_val = GETBIT(PINB, pin);
    1c86:	e6 e3       	ldi	r30, 0x36	; 54
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a9 01       	movw	r20, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_value_type_getPin_value+0x8e>
    1c9a:	55 95       	asr	r21
    1c9c:	47 95       	ror	r20
    1c9e:	8a 95       	dec	r24
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_value_type_getPin_value+0x8a>
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	81 70       	andi	r24, 0x01	; 1
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	23 c0       	rjmp	.+70     	; 0x1cf0 <DIO_value_type_getPin_value+0xe0>
		break;
	case PORTC_ID:
		ret_val = GETBIT(PINC, pin);
    1caa:	e3 e3       	ldi	r30, 0x33	; 51
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a9 01       	movw	r20, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <DIO_value_type_getPin_value+0xb2>
    1cbe:	55 95       	asr	r21
    1cc0:	47 95       	ror	r20
    1cc2:	8a 95       	dec	r24
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <DIO_value_type_getPin_value+0xae>
    1cc6:	ca 01       	movw	r24, r20
    1cc8:	81 70       	andi	r24, 0x01	; 1
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	11 c0       	rjmp	.+34     	; 0x1cf0 <DIO_value_type_getPin_value+0xe0>
		break;
	case PORTD_ID:
		ret_val = GETBIT(PIND, pin);
    1cce:	e0 e3       	ldi	r30, 0x30	; 48
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a9 01       	movw	r20, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <DIO_value_type_getPin_value+0xd6>
    1ce2:	55 95       	asr	r21
    1ce4:	47 95       	ror	r20
    1ce6:	8a 95       	dec	r24
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <DIO_value_type_getPin_value+0xd2>
    1cea:	ca 01       	movw	r24, r20
    1cec:	81 70       	andi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
		break;
	}//end switch

	return ret_val;
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
}//end DIO_value_type_getPin_value
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <DIO_void_setPort_direction>:
void DIO_void_setPort_direction(port_type port, u8 direction)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <DIO_void_setPort_direction+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <DIO_void_setPort_direction+0x8>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	3c 83       	std	Y+4, r19	; 0x04
    1d1a:	2b 83       	std	Y+3, r18	; 0x03
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	91 05       	cpc	r25, r1
    1d24:	d1 f0       	breq	.+52     	; 0x1d5a <DIO_void_setPort_direction+0x58>
    1d26:	2b 81       	ldd	r18, Y+3	; 0x03
    1d28:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <DIO_void_setPort_direction+0x38>
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	61 f0       	breq	.+24     	; 0x1d50 <DIO_void_setPort_direction+0x4e>
    1d38:	1e c0       	rjmp	.+60     	; 0x1d76 <DIO_void_setPort_direction+0x74>
    1d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3e:	22 30       	cpi	r18, 0x02	; 2
    1d40:	31 05       	cpc	r19, r1
    1d42:	81 f0       	breq	.+32     	; 0x1d64 <DIO_void_setPort_direction+0x62>
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	81 f0       	breq	.+32     	; 0x1d6e <DIO_void_setPort_direction+0x6c>
    1d4e:	13 c0       	rjmp	.+38     	; 0x1d76 <DIO_void_setPort_direction+0x74>
	{
	case PORTA_ID:
		DDRA = direction;
    1d50:	ea e3       	ldi	r30, 0x3A	; 58
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	80 83       	st	Z, r24
    1d58:	0e c0       	rjmp	.+28     	; 0x1d76 <DIO_void_setPort_direction+0x74>
		break;
	case PORTB_ID:
		DDRB = direction;
    1d5a:	e7 e3       	ldi	r30, 0x37	; 55
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	80 83       	st	Z, r24
    1d62:	09 c0       	rjmp	.+18     	; 0x1d76 <DIO_void_setPort_direction+0x74>
		break;
	case PORTC_ID:
		DDRC = direction;
    1d64:	e4 e3       	ldi	r30, 0x34	; 52
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	80 83       	st	Z, r24
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <DIO_void_setPort_direction+0x74>
		break;
	case PORTD_ID:
		DDRD = direction;
    1d6e:	e1 e3       	ldi	r30, 0x31	; 49
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	80 83       	st	Z, r24
		break;
	}//end switch

}//end DIO_void_setPort_direction
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <DIO_void_setPort_value>:
void DIO_void_setPort_value(port_type port, u8 value)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <DIO_void_setPort_value+0x6>
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <DIO_void_setPort_value+0x8>
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	3c 83       	std	Y+4, r19	; 0x04
    1d9c:	2b 83       	std	Y+3, r18	; 0x03
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	91 05       	cpc	r25, r1
    1da6:	d1 f0       	breq	.+52     	; 0x1ddc <DIO_void_setPort_value+0x58>
    1da8:	2b 81       	ldd	r18, Y+3	; 0x03
    1daa:	3c 81       	ldd	r19, Y+4	; 0x04
    1dac:	22 30       	cpi	r18, 0x02	; 2
    1dae:	31 05       	cpc	r19, r1
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <DIO_void_setPort_value+0x38>
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	61 f0       	breq	.+24     	; 0x1dd2 <DIO_void_setPort_value+0x4e>
    1dba:	1e c0       	rjmp	.+60     	; 0x1df8 <DIO_void_setPort_value+0x74>
    1dbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc0:	22 30       	cpi	r18, 0x02	; 2
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	81 f0       	breq	.+32     	; 0x1de6 <DIO_void_setPort_value+0x62>
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dca:	83 30       	cpi	r24, 0x03	; 3
    1dcc:	91 05       	cpc	r25, r1
    1dce:	81 f0       	breq	.+32     	; 0x1df0 <DIO_void_setPort_value+0x6c>
    1dd0:	13 c0       	rjmp	.+38     	; 0x1df8 <DIO_void_setPort_value+0x74>
	{
	case PORTA_ID:
		PORTA = value;
    1dd2:	eb e3       	ldi	r30, 0x3B	; 59
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	80 83       	st	Z, r24
    1dda:	0e c0       	rjmp	.+28     	; 0x1df8 <DIO_void_setPort_value+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    1ddc:	e8 e3       	ldi	r30, 0x38	; 56
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	80 83       	st	Z, r24
    1de4:	09 c0       	rjmp	.+18     	; 0x1df8 <DIO_void_setPort_value+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    1de6:	e5 e3       	ldi	r30, 0x35	; 53
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	80 83       	st	Z, r24
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <DIO_void_setPort_value+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    1df0:	e2 e3       	ldi	r30, 0x32	; 50
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	80 83       	st	Z, r24
		break;
	}//end switch
}//end DIO_void_setPort_value
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <LED_void_LED_Direction>:
#include "LED_interface.h"



void LED_void_LED_Direction(port_type LED_Port, pin_type LED_Pin)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <LED_void_LED_Direction+0x6>
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	6a 83       	std	Y+2, r22	; 0x02
	DIO_void_setPin_direction(LED_Port, LED_Pin, OUTPUT);
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	6a 81       	ldd	r22, Y+2	; 0x02
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <LED_void_LEDOn>:


void LED_void_LEDOn(port_type LED_Port, pin_type LED_Pin, led_connection con)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <LED_void_LEDOn+0x6>
    1e2e:	0f 92       	push	r0
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	6a 83       	std	Y+2, r22	; 0x02
    1e38:	4b 83       	std	Y+3, r20	; 0x03
    if (con == FORWARD)
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	88 23       	and	r24, r24
    1e3e:	31 f4       	brne	.+12     	; 0x1e4c <LED_void_LEDOn+0x24>
    {
        DIO_void_setPin_value(LED_Port, LED_Pin, HIGH);
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	6a 81       	ldd	r22, Y+2	; 0x02
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>
    1e4a:	05 c0       	rjmp	.+10     	; 0x1e56 <LED_void_LEDOn+0x2e>
    }
    else
    {
        DIO_void_setPin_value(LED_Port, LED_Pin, LOW);   
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>
    }
    
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <LED_void_LEDOff>:

void LED_void_LEDOff(port_type LED_Port, pin_type LED_Pin, led_connection con)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <LED_void_LEDOff+0x6>
    1e68:	0f 92       	push	r0
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	6a 83       	std	Y+2, r22	; 0x02
    1e72:	4b 83       	std	Y+3, r20	; 0x03
    if (con == FORWARD)
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	88 23       	and	r24, r24
    1e78:	31 f4       	brne	.+12     	; 0x1e86 <LED_void_LEDOff+0x24>
    {
        DIO_void_setPin_value(LED_Port, LED_Pin, LOW);
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	6a 81       	ldd	r22, Y+2	; 0x02
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>
    1e84:	05 c0       	rjmp	.+10     	; 0x1e90 <LED_void_LEDOff+0x2e>
    }
    else
    {
        DIO_void_setPin_value(LED_Port, LED_Pin, HIGH);   
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	6a 81       	ldd	r22, Y+2	; 0x02
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>
    }
}
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <LED_void_LEDToggle>:

void LED_void_LEDToggle(port_type LED_Port, pin_type LED_Pin)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <LED_void_LEDToggle+0x6>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	6a 83       	std	Y+2, r22	; 0x02
    
   // DIO_void_TogPin(LED_Port, LED_Pin);
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <LED_void_LEDINT>:
void LED_void_LEDINT(u8 Duty_Cycle)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	0f 92       	push	r0
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_voidPhasePWM(Duty_Cycle);
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <TIMER0_voidPhasePWM>
}
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <LCD_void_init>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "../../LIB/BIT_Math.h"
#include <avr/delay.h>

void LCD_void_init(lcd_mode mode)
{
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	cd 58       	subi	r28, 0x8D	; 141
    1edc:	d0 40       	sbci	r29, 0x00	; 0
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e3 57       	subi	r30, 0x73	; 115
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 83       	st	Z, r24
	DIO_void_setPin_direction(PORTA_ID, LCD_RS_PIN , OUTPUT);
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
	DIO_void_setPin_direction(PORTA_ID, LCD_E_PIN , OUTPUT);
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	62 e0       	ldi	r22, 0x02	; 2
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
if(mode == LCD_enum_8BITS_MODE)
    1f04:	fe 01       	movw	r30, r28
    1f06:	e3 57       	subi	r30, 0x73	; 115
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 81       	ld	r24, Z
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <LCD_void_init+0x44>
    1f10:	db c2       	rjmp	.+1462   	; 0x24c8 <LCD_void_init+0x5fa>
	{
		// port pins direction = output
		DIO_void_setPort_direction(LCD_8BITS_DATA_PORT,0xff);
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	6f ef       	ldi	r22, 0xFF	; 255
    1f16:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <DIO_void_setPort_direction>
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e7 57       	subi	r30, 0x77	; 119
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	a0 ef       	ldi	r26, 0xF0	; 240
    1f26:	b1 e4       	ldi	r27, 0x41	; 65
    1f28:	80 83       	st	Z, r24
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    1f2c:	a2 83       	std	Z+2, r26	; 0x02
    1f2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f30:	8e 01       	movw	r16, r28
    1f32:	0b 57       	subi	r16, 0x7B	; 123
    1f34:	1f 4f       	sbci	r17, 0xFF	; 255
    1f36:	fe 01       	movw	r30, r28
    1f38:	e7 57       	subi	r30, 0x77	; 119
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4a ef       	ldi	r20, 0xFA	; 250
    1f4a:	54 e4       	ldi	r21, 0x44	; 68
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	f8 01       	movw	r30, r16
    1f56:	80 83       	st	Z, r24
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	a2 83       	std	Z+2, r26	; 0x02
    1f5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5e:	fe 01       	movw	r30, r28
    1f60:	eb 57       	subi	r30, 0x7B	; 123
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e8       	ldi	r20, 0x80	; 128
    1f72:	5f e3       	ldi	r21, 0x3F	; 63
    1f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f78:	88 23       	and	r24, r24
    1f7a:	44 f4       	brge	.+16     	; 0x1f8c <LCD_void_init+0xbe>
		__ticks = 1;
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ed 57       	subi	r30, 0x7D	; 125
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
    1f8a:	64 c0       	rjmp	.+200    	; 0x2054 <LCD_void_init+0x186>
	else if (__tmp > 65535)
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	eb 57       	subi	r30, 0x7B	; 123
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	0c f0       	brlt	.+2      	; 0x1fac <LCD_void_init+0xde>
    1faa:	43 c0       	rjmp	.+134    	; 0x2032 <LCD_void_init+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fac:	fe 01       	movw	r30, r28
    1fae:	e7 57       	subi	r30, 0x77	; 119
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	60 81       	ld	r22, Z
    1fb4:	71 81       	ldd	r23, Z+1	; 0x01
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	8e 01       	movw	r16, r28
    1fcc:	0d 57       	subi	r16, 0x7D	; 125
    1fce:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	f8 01       	movw	r30, r16
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24
    1fe2:	1f c0       	rjmp	.+62     	; 0x2022 <LCD_void_init+0x154>
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ef 57       	subi	r30, 0x7F	; 127
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	88 ec       	ldi	r24, 0xC8	; 200
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ef 57       	subi	r30, 0x7F	; 127
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <LCD_void_init+0x12e>
    2000:	fe 01       	movw	r30, r28
    2002:	ef 57       	subi	r30, 0x7F	; 127
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200a:	de 01       	movw	r26, r28
    200c:	ad 57       	subi	r26, 0x7D	; 125
    200e:	bf 4f       	sbci	r27, 0xFF	; 255
    2010:	fe 01       	movw	r30, r28
    2012:	ed 57       	subi	r30, 0x7D	; 125
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	11 96       	adiw	r26, 0x01	; 1
    201e:	9c 93       	st	X, r25
    2020:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	fe 01       	movw	r30, r28
    2024:	ed 57       	subi	r30, 0x7D	; 125
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	d1 f6       	brne	.-76     	; 0x1fe4 <LCD_void_init+0x116>
    2030:	27 c0       	rjmp	.+78     	; 0x2080 <LCD_void_init+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2032:	8e 01       	movw	r16, r28
    2034:	0d 57       	subi	r16, 0x7D	; 125
    2036:	1f 4f       	sbci	r17, 0xFF	; 255
    2038:	fe 01       	movw	r30, r28
    203a:	eb 57       	subi	r30, 0x7B	; 123
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	f8 01       	movw	r30, r16
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	de 01       	movw	r26, r28
    2056:	a1 58       	subi	r26, 0x81	; 129
    2058:	bf 4f       	sbci	r27, 0xFF	; 255
    205a:	fe 01       	movw	r30, r28
    205c:	ed 57       	subi	r30, 0x7D	; 125
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 81       	ld	r24, Z
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	8d 93       	st	X+, r24
    2066:	9c 93       	st	X, r25
    2068:	fe 01       	movw	r30, r28
    206a:	e1 58       	subi	r30, 0x81	; 129
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_void_init+0x1a4>
    2076:	fe 01       	movw	r30, r28
    2078:	e1 58       	subi	r30, 0x81	; 129
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	80 83       	st	Z, r24
		//lcd init commands

		_delay_ms(30);
		LCD_void_send_command(0x38);
    2080:	88 e3       	ldi	r24, 0x38	; 56
    2082:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
    2086:	fe 01       	movw	r30, r28
    2088:	e5 58       	subi	r30, 0x85	; 133
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a0 e8       	ldi	r26, 0x80	; 128
    2092:	bf e3       	ldi	r27, 0x3F	; 63
    2094:	80 83       	st	Z, r24
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	a2 83       	std	Z+2, r26	; 0x02
    209a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209c:	8e 01       	movw	r16, r28
    209e:	09 58       	subi	r16, 0x89	; 137
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	fe 01       	movw	r30, r28
    20a4:	e5 58       	subi	r30, 0x85	; 133
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	4a ef       	ldi	r20, 0xFA	; 250
    20b6:	54 e4       	ldi	r21, 0x44	; 68
    20b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	f8 01       	movw	r30, r16
    20c2:	80 83       	st	Z, r24
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	a2 83       	std	Z+2, r26	; 0x02
    20c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ca:	fe 01       	movw	r30, r28
    20cc:	e9 58       	subi	r30, 0x89	; 137
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	60 81       	ld	r22, Z
    20d2:	71 81       	ldd	r23, Z+1	; 0x01
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	44 f4       	brge	.+16     	; 0x20f8 <LCD_void_init+0x22a>
		__ticks = 1;
    20e8:	fe 01       	movw	r30, r28
    20ea:	eb 58       	subi	r30, 0x8B	; 139
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	80 83       	st	Z, r24
    20f6:	64 c0       	rjmp	.+200    	; 0x21c0 <LCD_void_init+0x2f2>
	else if (__tmp > 65535)
    20f8:	fe 01       	movw	r30, r28
    20fa:	e9 58       	subi	r30, 0x89	; 137
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	0c f0       	brlt	.+2      	; 0x2118 <LCD_void_init+0x24a>
    2116:	43 c0       	rjmp	.+134    	; 0x219e <LCD_void_init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2118:	fe 01       	movw	r30, r28
    211a:	e5 58       	subi	r30, 0x85	; 133
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e2       	ldi	r20, 0x20	; 32
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	8e 01       	movw	r16, r28
    2138:	0b 58       	subi	r16, 0x8B	; 139
    213a:	1f 4f       	sbci	r17, 0xFF	; 255
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	f8 01       	movw	r30, r16
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
    214e:	1f c0       	rjmp	.+62     	; 0x218e <LCD_void_init+0x2c0>
    2150:	fe 01       	movw	r30, r28
    2152:	ed 58       	subi	r30, 0x8D	; 141
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	88 ec       	ldi	r24, 0xC8	; 200
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
    215e:	fe 01       	movw	r30, r28
    2160:	ed 58       	subi	r30, 0x8D	; 141
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <LCD_void_init+0x29a>
    216c:	fe 01       	movw	r30, r28
    216e:	ed 58       	subi	r30, 0x8D	; 141
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2176:	de 01       	movw	r26, r28
    2178:	ab 58       	subi	r26, 0x8B	; 139
    217a:	bf 4f       	sbci	r27, 0xFF	; 255
    217c:	fe 01       	movw	r30, r28
    217e:	eb 58       	subi	r30, 0x8B	; 139
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 81       	ld	r24, Z
    2184:	91 81       	ldd	r25, Z+1	; 0x01
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	11 96       	adiw	r26, 0x01	; 1
    218a:	9c 93       	st	X, r25
    218c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	fe 01       	movw	r30, r28
    2190:	eb 58       	subi	r30, 0x8B	; 139
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	80 81       	ld	r24, Z
    2196:	91 81       	ldd	r25, Z+1	; 0x01
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	d1 f6       	brne	.-76     	; 0x2150 <LCD_void_init+0x282>
    219c:	27 c0       	rjmp	.+78     	; 0x21ec <LCD_void_init+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	8e 01       	movw	r16, r28
    21a0:	0b 58       	subi	r16, 0x8B	; 139
    21a2:	1f 4f       	sbci	r17, 0xFF	; 255
    21a4:	fe 01       	movw	r30, r28
    21a6:	e9 58       	subi	r30, 0x89	; 137
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	60 81       	ld	r22, Z
    21ac:	71 81       	ldd	r23, Z+1	; 0x01
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	f8 01       	movw	r30, r16
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	80 83       	st	Z, r24
    21c0:	de 01       	movw	r26, r28
    21c2:	af 58       	subi	r26, 0x8F	; 143
    21c4:	bf 4f       	sbci	r27, 0xFF	; 255
    21c6:	fe 01       	movw	r30, r28
    21c8:	eb 58       	subi	r30, 0x8B	; 139
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 81       	ld	r24, Z
    21ce:	91 81       	ldd	r25, Z+1	; 0x01
    21d0:	8d 93       	st	X+, r24
    21d2:	9c 93       	st	X, r25
    21d4:	fe 01       	movw	r30, r28
    21d6:	ef 58       	subi	r30, 0x8F	; 143
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_void_init+0x310>
    21e2:	fe 01       	movw	r30, r28
    21e4:	ef 58       	subi	r30, 0x8F	; 143
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
		_delay_ms(1);
		LCD_void_send_command(0x0E);
    21ec:	8e e0       	ldi	r24, 0x0E	; 14
    21ee:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
    21f2:	fe 01       	movw	r30, r28
    21f4:	e3 59       	subi	r30, 0x93	; 147
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a0 e8       	ldi	r26, 0x80	; 128
    21fe:	bf e3       	ldi	r27, 0x3F	; 63
    2200:	80 83       	st	Z, r24
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	a2 83       	std	Z+2, r26	; 0x02
    2206:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2208:	8e 01       	movw	r16, r28
    220a:	07 59       	subi	r16, 0x97	; 151
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	fe 01       	movw	r30, r28
    2210:	e3 59       	subi	r30, 0x93	; 147
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	4a ef       	ldi	r20, 0xFA	; 250
    2222:	54 e4       	ldi	r21, 0x44	; 68
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	f8 01       	movw	r30, r16
    222e:	80 83       	st	Z, r24
    2230:	91 83       	std	Z+1, r25	; 0x01
    2232:	a2 83       	std	Z+2, r26	; 0x02
    2234:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2236:	fe 01       	movw	r30, r28
    2238:	e7 59       	subi	r30, 0x97	; 151
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	60 81       	ld	r22, Z
    223e:	71 81       	ldd	r23, Z+1	; 0x01
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e8       	ldi	r20, 0x80	; 128
    224a:	5f e3       	ldi	r21, 0x3F	; 63
    224c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2250:	88 23       	and	r24, r24
    2252:	44 f4       	brge	.+16     	; 0x2264 <LCD_void_init+0x396>
		__ticks = 1;
    2254:	fe 01       	movw	r30, r28
    2256:	e9 59       	subi	r30, 0x99	; 153
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
    2262:	64 c0       	rjmp	.+200    	; 0x232c <LCD_void_init+0x45e>
	else if (__tmp > 65535)
    2264:	fe 01       	movw	r30, r28
    2266:	e7 59       	subi	r30, 0x97	; 151
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	0c f0       	brlt	.+2      	; 0x2284 <LCD_void_init+0x3b6>
    2282:	43 c0       	rjmp	.+134    	; 0x230a <LCD_void_init+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2284:	fe 01       	movw	r30, r28
    2286:	e3 59       	subi	r30, 0x93	; 147
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	60 81       	ld	r22, Z
    228c:	71 81       	ldd	r23, Z+1	; 0x01
    228e:	82 81       	ldd	r24, Z+2	; 0x02
    2290:	93 81       	ldd	r25, Z+3	; 0x03
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	8e 01       	movw	r16, r28
    22a4:	09 59       	subi	r16, 0x99	; 153
    22a6:	1f 4f       	sbci	r17, 0xFF	; 255
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	f8 01       	movw	r30, r16
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	80 83       	st	Z, r24
    22ba:	1f c0       	rjmp	.+62     	; 0x22fa <LCD_void_init+0x42c>
    22bc:	fe 01       	movw	r30, r28
    22be:	eb 59       	subi	r30, 0x9B	; 155
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	88 ec       	ldi	r24, 0xC8	; 200
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	80 83       	st	Z, r24
    22ca:	fe 01       	movw	r30, r28
    22cc:	eb 59       	subi	r30, 0x9B	; 155
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_void_init+0x406>
    22d8:	fe 01       	movw	r30, r28
    22da:	eb 59       	subi	r30, 0x9B	; 155
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	de 01       	movw	r26, r28
    22e4:	a9 59       	subi	r26, 0x99	; 153
    22e6:	bf 4f       	sbci	r27, 0xFF	; 255
    22e8:	fe 01       	movw	r30, r28
    22ea:	e9 59       	subi	r30, 0x99	; 153
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	80 81       	ld	r24, Z
    22f0:	91 81       	ldd	r25, Z+1	; 0x01
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	11 96       	adiw	r26, 0x01	; 1
    22f6:	9c 93       	st	X, r25
    22f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fa:	fe 01       	movw	r30, r28
    22fc:	e9 59       	subi	r30, 0x99	; 153
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	d1 f6       	brne	.-76     	; 0x22bc <LCD_void_init+0x3ee>
    2308:	27 c0       	rjmp	.+78     	; 0x2358 <LCD_void_init+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230a:	8e 01       	movw	r16, r28
    230c:	09 59       	subi	r16, 0x99	; 153
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	fe 01       	movw	r30, r28
    2312:	e7 59       	subi	r30, 0x97	; 151
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
    232c:	de 01       	movw	r26, r28
    232e:	ad 59       	subi	r26, 0x9D	; 157
    2330:	bf 4f       	sbci	r27, 0xFF	; 255
    2332:	fe 01       	movw	r30, r28
    2334:	e9 59       	subi	r30, 0x99	; 153
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	8d 93       	st	X+, r24
    233e:	9c 93       	st	X, r25
    2340:	fe 01       	movw	r30, r28
    2342:	ed 59       	subi	r30, 0x9D	; 157
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <LCD_void_init+0x47c>
    234e:	fe 01       	movw	r30, r28
    2350:	ed 59       	subi	r30, 0x9D	; 157
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	80 83       	st	Z, r24
		_delay_ms(1);
		LCD_void_send_command(0x01);
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
    235e:	fe 01       	movw	r30, r28
    2360:	e1 5a       	subi	r30, 0xA1	; 161
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a0 e4       	ldi	r26, 0x40	; 64
    236a:	b0 e4       	ldi	r27, 0x40	; 64
    236c:	80 83       	st	Z, r24
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	a2 83       	std	Z+2, r26	; 0x02
    2372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	8e 01       	movw	r16, r28
    2376:	05 5a       	subi	r16, 0xA5	; 165
    2378:	1f 4f       	sbci	r17, 0xFF	; 255
    237a:	fe 01       	movw	r30, r28
    237c:	e1 5a       	subi	r30, 0xA1	; 161
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a ef       	ldi	r20, 0xFA	; 250
    238e:	54 e4       	ldi	r21, 0x44	; 68
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	f8 01       	movw	r30, r16
    239a:	80 83       	st	Z, r24
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	a2 83       	std	Z+2, r26	; 0x02
    23a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23a2:	fe 01       	movw	r30, r28
    23a4:	e5 5a       	subi	r30, 0xA5	; 165
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e8       	ldi	r20, 0x80	; 128
    23b6:	5f e3       	ldi	r21, 0x3F	; 63
    23b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23bc:	88 23       	and	r24, r24
    23be:	44 f4       	brge	.+16     	; 0x23d0 <LCD_void_init+0x502>
		__ticks = 1;
    23c0:	fe 01       	movw	r30, r28
    23c2:	e7 5a       	subi	r30, 0xA7	; 167
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	80 83       	st	Z, r24
    23ce:	64 c0       	rjmp	.+200    	; 0x2498 <LCD_void_init+0x5ca>
	else if (__tmp > 65535)
    23d0:	fe 01       	movw	r30, r28
    23d2:	e5 5a       	subi	r30, 0xA5	; 165
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	0c f0       	brlt	.+2      	; 0x23f0 <LCD_void_init+0x522>
    23ee:	43 c0       	rjmp	.+134    	; 0x2476 <LCD_void_init+0x5a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	fe 01       	movw	r30, r28
    23f2:	e1 5a       	subi	r30, 0xA1	; 161
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	60 81       	ld	r22, Z
    23f8:	71 81       	ldd	r23, Z+1	; 0x01
    23fa:	82 81       	ldd	r24, Z+2	; 0x02
    23fc:	93 81       	ldd	r25, Z+3	; 0x03
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	8e 01       	movw	r16, r28
    2410:	07 5a       	subi	r16, 0xA7	; 167
    2412:	1f 4f       	sbci	r17, 0xFF	; 255
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	f8 01       	movw	r30, r16
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
    2426:	1f c0       	rjmp	.+62     	; 0x2466 <LCD_void_init+0x598>
    2428:	fe 01       	movw	r30, r28
    242a:	e9 5a       	subi	r30, 0xA9	; 169
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	88 ec       	ldi	r24, 0xC8	; 200
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	fe 01       	movw	r30, r28
    2438:	e9 5a       	subi	r30, 0xA9	; 169
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_void_init+0x572>
    2444:	fe 01       	movw	r30, r28
    2446:	e9 5a       	subi	r30, 0xA9	; 169
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	de 01       	movw	r26, r28
    2450:	a7 5a       	subi	r26, 0xA7	; 167
    2452:	bf 4f       	sbci	r27, 0xFF	; 255
    2454:	fe 01       	movw	r30, r28
    2456:	e7 5a       	subi	r30, 0xA7	; 167
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	80 81       	ld	r24, Z
    245c:	91 81       	ldd	r25, Z+1	; 0x01
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	11 96       	adiw	r26, 0x01	; 1
    2462:	9c 93       	st	X, r25
    2464:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2466:	fe 01       	movw	r30, r28
    2468:	e7 5a       	subi	r30, 0xA7	; 167
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	d1 f6       	brne	.-76     	; 0x2428 <LCD_void_init+0x55a>
    2474:	53 c3       	rjmp	.+1702   	; 0x2b1c <LCD_void_init+0xc4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2476:	8e 01       	movw	r16, r28
    2478:	07 5a       	subi	r16, 0xA7	; 167
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	fe 01       	movw	r30, r28
    247e:	e5 5a       	subi	r30, 0xA5	; 165
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	f8 01       	movw	r30, r16
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
    2498:	de 01       	movw	r26, r28
    249a:	ab 5a       	subi	r26, 0xAB	; 171
    249c:	bf 4f       	sbci	r27, 0xFF	; 255
    249e:	fe 01       	movw	r30, r28
    24a0:	e7 5a       	subi	r30, 0xA7	; 167
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	80 81       	ld	r24, Z
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	11 96       	adiw	r26, 0x01	; 1
    24aa:	9c 93       	st	X, r25
    24ac:	8e 93       	st	-X, r24
    24ae:	fe 01       	movw	r30, r28
    24b0:	eb 5a       	subi	r30, 0xAB	; 171
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_void_init+0x5ea>
    24bc:	fe 01       	movw	r30, r28
    24be:	eb 5a       	subi	r30, 0xAB	; 171
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	2a c3       	rjmp	.+1620   	; 0x2b1c <LCD_void_init+0xc4e>
		_delay_ms(3);
	}
else if(mode == LCD_enum_4BITS_MODE)
    24c8:	fe 01       	movw	r30, r28
    24ca:	e3 57       	subi	r30, 0x73	; 115
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	88 23       	and	r24, r24
    24d2:	09 f0       	breq	.+2      	; 0x24d6 <LCD_void_init+0x608>
    24d4:	23 c3       	rjmp	.+1606   	; 0x2b1c <LCD_void_init+0xc4e>
	{
		DIO_void_setPin_direction(LCD_4BITS_PORT , LCD_4BITS_PIN1 , OUTPUT);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	63 e0       	ldi	r22, 0x03	; 3
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
		DIO_void_setPin_direction(LCD_4BITS_PORT , LCD_4BITS_PIN2 , OUTPUT);
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	64 e0       	ldi	r22, 0x04	; 4
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
		DIO_void_setPin_direction(LCD_4BITS_PORT , LCD_4BITS_PIN3 , OUTPUT);
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	65 e0       	ldi	r22, 0x05	; 5
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
		DIO_void_setPin_direction(LCD_4BITS_PORT , LCD_4BITS_PIN4 , OUTPUT);
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	66 e0       	ldi	r22, 0x06	; 6
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
    24fe:	fe 01       	movw	r30, r28
    2500:	ef 5a       	subi	r30, 0xAF	; 175
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	ac e0       	ldi	r26, 0x0C	; 12
    250a:	b2 e4       	ldi	r27, 0x42	; 66
    250c:	80 83       	st	Z, r24
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	a2 83       	std	Z+2, r26	; 0x02
    2512:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2514:	8e 01       	movw	r16, r28
    2516:	03 5b       	subi	r16, 0xB3	; 179
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	fe 01       	movw	r30, r28
    251c:	ef 5a       	subi	r30, 0xAF	; 175
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	60 81       	ld	r22, Z
    2522:	71 81       	ldd	r23, Z+1	; 0x01
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a ef       	ldi	r20, 0xFA	; 250
    252e:	54 e4       	ldi	r21, 0x44	; 68
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	f8 01       	movw	r30, r16
    253a:	80 83       	st	Z, r24
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	a2 83       	std	Z+2, r26	; 0x02
    2540:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2542:	fe 01       	movw	r30, r28
    2544:	e3 5b       	subi	r30, 0xB3	; 179
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	44 f4       	brge	.+16     	; 0x2570 <LCD_void_init+0x6a2>
		__ticks = 1;
    2560:	fe 01       	movw	r30, r28
    2562:	e5 5b       	subi	r30, 0xB5	; 181
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	64 c0       	rjmp	.+200    	; 0x2638 <LCD_void_init+0x76a>
	else if (__tmp > 65535)
    2570:	fe 01       	movw	r30, r28
    2572:	e3 5b       	subi	r30, 0xB3	; 179
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	0c f0       	brlt	.+2      	; 0x2590 <LCD_void_init+0x6c2>
    258e:	43 c0       	rjmp	.+134    	; 0x2616 <LCD_void_init+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	fe 01       	movw	r30, r28
    2592:	ef 5a       	subi	r30, 0xAF	; 175
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	8e 01       	movw	r16, r28
    25b0:	05 5b       	subi	r16, 0xB5	; 181
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	f8 01       	movw	r30, r16
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
    25c6:	1f c0       	rjmp	.+62     	; 0x2606 <LCD_void_init+0x738>
    25c8:	fe 01       	movw	r30, r28
    25ca:	e7 5b       	subi	r30, 0xB7	; 183
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	88 ec       	ldi	r24, 0xC8	; 200
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	80 83       	st	Z, r24
    25d6:	fe 01       	movw	r30, r28
    25d8:	e7 5b       	subi	r30, 0xB7	; 183
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <LCD_void_init+0x712>
    25e4:	fe 01       	movw	r30, r28
    25e6:	e7 5b       	subi	r30, 0xB7	; 183
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	de 01       	movw	r26, r28
    25f0:	a5 5b       	subi	r26, 0xB5	; 181
    25f2:	bf 4f       	sbci	r27, 0xFF	; 255
    25f4:	fe 01       	movw	r30, r28
    25f6:	e5 5b       	subi	r30, 0xB5	; 181
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	11 96       	adiw	r26, 0x01	; 1
    2602:	9c 93       	st	X, r25
    2604:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	fe 01       	movw	r30, r28
    2608:	e5 5b       	subi	r30, 0xB5	; 181
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	d1 f6       	brne	.-76     	; 0x25c8 <LCD_void_init+0x6fa>
    2614:	27 c0       	rjmp	.+78     	; 0x2664 <LCD_void_init+0x796>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2616:	8e 01       	movw	r16, r28
    2618:	05 5b       	subi	r16, 0xB5	; 181
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
    261c:	fe 01       	movw	r30, r28
    261e:	e3 5b       	subi	r30, 0xB3	; 179
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	f8 01       	movw	r30, r16
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    2638:	de 01       	movw	r26, r28
    263a:	a9 5b       	subi	r26, 0xB9	; 185
    263c:	bf 4f       	sbci	r27, 0xFF	; 255
    263e:	fe 01       	movw	r30, r28
    2640:	e5 5b       	subi	r30, 0xB5	; 181
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	8d 93       	st	X+, r24
    264a:	9c 93       	st	X, r25
    264c:	fe 01       	movw	r30, r28
    264e:	e9 5b       	subi	r30, 0xB9	; 185
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	80 81       	ld	r24, Z
    2654:	91 81       	ldd	r25, Z+1	; 0x01
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <LCD_void_init+0x788>
    265a:	fe 01       	movw	r30, r28
    265c:	e9 5b       	subi	r30, 0xB9	; 185
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	80 83       	st	Z, r24

		_delay_ms(35);
		LCD_void_send_command(0x02);
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
    266a:	fe 01       	movw	r30, r28
    266c:	ed 5b       	subi	r30, 0xBD	; 189
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	a0 e8       	ldi	r26, 0x80	; 128
    2676:	bf e3       	ldi	r27, 0x3F	; 63
    2678:	80 83       	st	Z, r24
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	a2 83       	std	Z+2, r26	; 0x02
    267e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2680:	8e 01       	movw	r16, r28
    2682:	01 5c       	subi	r16, 0xC1	; 193
    2684:	1f 4f       	sbci	r17, 0xFF	; 255
    2686:	fe 01       	movw	r30, r28
    2688:	ed 5b       	subi	r30, 0xBD	; 189
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	60 81       	ld	r22, Z
    268e:	71 81       	ldd	r23, Z+1	; 0x01
    2690:	82 81       	ldd	r24, Z+2	; 0x02
    2692:	93 81       	ldd	r25, Z+3	; 0x03
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	4a ef       	ldi	r20, 0xFA	; 250
    269a:	54 e4       	ldi	r21, 0x44	; 68
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	f8 01       	movw	r30, r16
    26a6:	80 83       	st	Z, r24
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	a2 83       	std	Z+2, r26	; 0x02
    26ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ae:	fe 01       	movw	r30, r28
    26b0:	ff 96       	adiw	r30, 0x3f	; 63
    26b2:	60 81       	ld	r22, Z
    26b4:	71 81       	ldd	r23, Z+1	; 0x01
    26b6:	82 81       	ldd	r24, Z+2	; 0x02
    26b8:	93 81       	ldd	r25, Z+3	; 0x03
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e8       	ldi	r20, 0x80	; 128
    26c0:	5f e3       	ldi	r21, 0x3F	; 63
    26c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26c6:	88 23       	and	r24, r24
    26c8:	2c f4       	brge	.+10     	; 0x26d4 <LCD_void_init+0x806>
		__ticks = 1;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9e af       	std	Y+62, r25	; 0x3e
    26d0:	8d af       	std	Y+61, r24	; 0x3d
    26d2:	46 c0       	rjmp	.+140    	; 0x2760 <LCD_void_init+0x892>
	else if (__tmp > 65535)
    26d4:	fe 01       	movw	r30, r28
    26d6:	ff 96       	adiw	r30, 0x3f	; 63
    26d8:	60 81       	ld	r22, Z
    26da:	71 81       	ldd	r23, Z+1	; 0x01
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	93 81       	ldd	r25, Z+3	; 0x03
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	64 f5       	brge	.+88     	; 0x2748 <LCD_void_init+0x87a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f0:	fe 01       	movw	r30, r28
    26f2:	ed 5b       	subi	r30, 0xBD	; 189
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	60 81       	ld	r22, Z
    26f8:	71 81       	ldd	r23, Z+1	; 0x01
    26fa:	82 81       	ldd	r24, Z+2	; 0x02
    26fc:	93 81       	ldd	r25, Z+3	; 0x03
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e af       	std	Y+62, r25	; 0x3e
    271c:	8d af       	std	Y+61, r24	; 0x3d
    271e:	0f c0       	rjmp	.+30     	; 0x273e <LCD_void_init+0x870>
    2720:	88 ec       	ldi	r24, 0xC8	; 200
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9c af       	std	Y+60, r25	; 0x3c
    2726:	8b af       	std	Y+59, r24	; 0x3b
    2728:	8b ad       	ldd	r24, Y+59	; 0x3b
    272a:	9c ad       	ldd	r25, Y+60	; 0x3c
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_void_init+0x85e>
    2730:	9c af       	std	Y+60, r25	; 0x3c
    2732:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8d ad       	ldd	r24, Y+61	; 0x3d
    2736:	9e ad       	ldd	r25, Y+62	; 0x3e
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9e af       	std	Y+62, r25	; 0x3e
    273c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2740:	9e ad       	ldd	r25, Y+62	; 0x3e
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <LCD_void_init+0x852>
    2746:	16 c0       	rjmp	.+44     	; 0x2774 <LCD_void_init+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	fe 01       	movw	r30, r28
    274a:	ff 96       	adiw	r30, 0x3f	; 63
    274c:	60 81       	ld	r22, Z
    274e:	71 81       	ldd	r23, Z+1	; 0x01
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	93 81       	ldd	r25, Z+3	; 0x03
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9e af       	std	Y+62, r25	; 0x3e
    275e:	8d af       	std	Y+61, r24	; 0x3d
    2760:	8d ad       	ldd	r24, Y+61	; 0x3d
    2762:	9e ad       	ldd	r25, Y+62	; 0x3e
    2764:	9a af       	std	Y+58, r25	; 0x3a
    2766:	89 af       	std	Y+57, r24	; 0x39
    2768:	89 ad       	ldd	r24, Y+57	; 0x39
    276a:	9a ad       	ldd	r25, Y+58	; 0x3a
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <LCD_void_init+0x89e>
    2770:	9a af       	std	Y+58, r25	; 0x3a
    2772:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		LCD_void_send_command(0x28);
    2774:	88 e2       	ldi	r24, 0x28	; 40
    2776:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a0 e8       	ldi	r26, 0x80	; 128
    2780:	bf e3       	ldi	r27, 0x3F	; 63
    2782:	8d ab       	std	Y+53, r24	; 0x35
    2784:	9e ab       	std	Y+54, r25	; 0x36
    2786:	af ab       	std	Y+55, r26	; 0x37
    2788:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278a:	6d a9       	ldd	r22, Y+53	; 0x35
    278c:	7e a9       	ldd	r23, Y+54	; 0x36
    278e:	8f a9       	ldd	r24, Y+55	; 0x37
    2790:	98 ad       	ldd	r25, Y+56	; 0x38
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	4a ef       	ldi	r20, 0xFA	; 250
    2798:	54 e4       	ldi	r21, 0x44	; 68
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	89 ab       	std	Y+49, r24	; 0x31
    27a4:	9a ab       	std	Y+50, r25	; 0x32
    27a6:	ab ab       	std	Y+51, r26	; 0x33
    27a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27aa:	69 a9       	ldd	r22, Y+49	; 0x31
    27ac:	7a a9       	ldd	r23, Y+50	; 0x32
    27ae:	8b a9       	ldd	r24, Y+51	; 0x33
    27b0:	9c a9       	ldd	r25, Y+52	; 0x34
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	2c f4       	brge	.+10     	; 0x27cc <LCD_void_init+0x8fe>
		__ticks = 1;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	98 ab       	std	Y+48, r25	; 0x30
    27c8:	8f a7       	std	Y+47, r24	; 0x2f
    27ca:	3f c0       	rjmp	.+126    	; 0x284a <LCD_void_init+0x97c>
	else if (__tmp > 65535)
    27cc:	69 a9       	ldd	r22, Y+49	; 0x31
    27ce:	7a a9       	ldd	r23, Y+50	; 0x32
    27d0:	8b a9       	ldd	r24, Y+51	; 0x33
    27d2:	9c a9       	ldd	r25, Y+52	; 0x34
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	3f ef       	ldi	r19, 0xFF	; 255
    27d8:	4f e7       	ldi	r20, 0x7F	; 127
    27da:	57 e4       	ldi	r21, 0x47	; 71
    27dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e0:	18 16       	cp	r1, r24
    27e2:	4c f5       	brge	.+82     	; 0x2836 <LCD_void_init+0x968>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e4:	6d a9       	ldd	r22, Y+53	; 0x35
    27e6:	7e a9       	ldd	r23, Y+54	; 0x36
    27e8:	8f a9       	ldd	r24, Y+55	; 0x37
    27ea:	98 ad       	ldd	r25, Y+56	; 0x38
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	98 ab       	std	Y+48, r25	; 0x30
    280a:	8f a7       	std	Y+47, r24	; 0x2f
    280c:	0f c0       	rjmp	.+30     	; 0x282c <LCD_void_init+0x95e>
    280e:	88 ec       	ldi	r24, 0xC8	; 200
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9e a7       	std	Y+46, r25	; 0x2e
    2814:	8d a7       	std	Y+45, r24	; 0x2d
    2816:	8d a5       	ldd	r24, Y+45	; 0x2d
    2818:	9e a5       	ldd	r25, Y+46	; 0x2e
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <LCD_void_init+0x94c>
    281e:	9e a7       	std	Y+46, r25	; 0x2e
    2820:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2822:	8f a5       	ldd	r24, Y+47	; 0x2f
    2824:	98 a9       	ldd	r25, Y+48	; 0x30
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	98 ab       	std	Y+48, r25	; 0x30
    282a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282c:	8f a5       	ldd	r24, Y+47	; 0x2f
    282e:	98 a9       	ldd	r25, Y+48	; 0x30
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	69 f7       	brne	.-38     	; 0x280e <LCD_void_init+0x940>
    2834:	14 c0       	rjmp	.+40     	; 0x285e <LCD_void_init+0x990>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	69 a9       	ldd	r22, Y+49	; 0x31
    2838:	7a a9       	ldd	r23, Y+50	; 0x32
    283a:	8b a9       	ldd	r24, Y+51	; 0x33
    283c:	9c a9       	ldd	r25, Y+52	; 0x34
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	98 ab       	std	Y+48, r25	; 0x30
    2848:	8f a7       	std	Y+47, r24	; 0x2f
    284a:	8f a5       	ldd	r24, Y+47	; 0x2f
    284c:	98 a9       	ldd	r25, Y+48	; 0x30
    284e:	9c a7       	std	Y+44, r25	; 0x2c
    2850:	8b a7       	std	Y+43, r24	; 0x2b
    2852:	8b a5       	ldd	r24, Y+43	; 0x2b
    2854:	9c a5       	ldd	r25, Y+44	; 0x2c
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_void_init+0x988>
    285a:	9c a7       	std	Y+44, r25	; 0x2c
    285c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		LCD_void_send_command(0x0E);
    285e:	8e e0       	ldi	r24, 0x0E	; 14
    2860:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a0 e8       	ldi	r26, 0x80	; 128
    286a:	bf e3       	ldi	r27, 0x3F	; 63
    286c:	8f a3       	std	Y+39, r24	; 0x27
    286e:	98 a7       	std	Y+40, r25	; 0x28
    2870:	a9 a7       	std	Y+41, r26	; 0x29
    2872:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	6f a1       	ldd	r22, Y+39	; 0x27
    2876:	78 a5       	ldd	r23, Y+40	; 0x28
    2878:	89 a5       	ldd	r24, Y+41	; 0x29
    287a:	9a a5       	ldd	r25, Y+42	; 0x2a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a ef       	ldi	r20, 0xFA	; 250
    2882:	54 e4       	ldi	r21, 0x44	; 68
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	8b a3       	std	Y+35, r24	; 0x23
    288e:	9c a3       	std	Y+36, r25	; 0x24
    2890:	ad a3       	std	Y+37, r26	; 0x25
    2892:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2894:	6b a1       	ldd	r22, Y+35	; 0x23
    2896:	7c a1       	ldd	r23, Y+36	; 0x24
    2898:	8d a1       	ldd	r24, Y+37	; 0x25
    289a:	9e a1       	ldd	r25, Y+38	; 0x26
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e8       	ldi	r20, 0x80	; 128
    28a2:	5f e3       	ldi	r21, 0x3F	; 63
    28a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28a8:	88 23       	and	r24, r24
    28aa:	2c f4       	brge	.+10     	; 0x28b6 <LCD_void_init+0x9e8>
		__ticks = 1;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9a a3       	std	Y+34, r25	; 0x22
    28b2:	89 a3       	std	Y+33, r24	; 0x21
    28b4:	3f c0       	rjmp	.+126    	; 0x2934 <LCD_void_init+0xa66>
	else if (__tmp > 65535)
    28b6:	6b a1       	ldd	r22, Y+35	; 0x23
    28b8:	7c a1       	ldd	r23, Y+36	; 0x24
    28ba:	8d a1       	ldd	r24, Y+37	; 0x25
    28bc:	9e a1       	ldd	r25, Y+38	; 0x26
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	3f ef       	ldi	r19, 0xFF	; 255
    28c2:	4f e7       	ldi	r20, 0x7F	; 127
    28c4:	57 e4       	ldi	r21, 0x47	; 71
    28c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ca:	18 16       	cp	r1, r24
    28cc:	4c f5       	brge	.+82     	; 0x2920 <LCD_void_init+0xa52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ce:	6f a1       	ldd	r22, Y+39	; 0x27
    28d0:	78 a5       	ldd	r23, Y+40	; 0x28
    28d2:	89 a5       	ldd	r24, Y+41	; 0x29
    28d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e2       	ldi	r20, 0x20	; 32
    28dc:	51 e4       	ldi	r21, 0x41	; 65
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9a a3       	std	Y+34, r25	; 0x22
    28f4:	89 a3       	std	Y+33, r24	; 0x21
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <LCD_void_init+0xa48>
    28f8:	88 ec       	ldi	r24, 0xC8	; 200
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	98 a3       	std	Y+32, r25	; 0x20
    28fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2900:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2902:	98 a1       	ldd	r25, Y+32	; 0x20
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_void_init+0xa36>
    2908:	98 a3       	std	Y+32, r25	; 0x20
    290a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290c:	89 a1       	ldd	r24, Y+33	; 0x21
    290e:	9a a1       	ldd	r25, Y+34	; 0x22
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	9a a3       	std	Y+34, r25	; 0x22
    2914:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2916:	89 a1       	ldd	r24, Y+33	; 0x21
    2918:	9a a1       	ldd	r25, Y+34	; 0x22
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	69 f7       	brne	.-38     	; 0x28f8 <LCD_void_init+0xa2a>
    291e:	14 c0       	rjmp	.+40     	; 0x2948 <LCD_void_init+0xa7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2920:	6b a1       	ldd	r22, Y+35	; 0x23
    2922:	7c a1       	ldd	r23, Y+36	; 0x24
    2924:	8d a1       	ldd	r24, Y+37	; 0x25
    2926:	9e a1       	ldd	r25, Y+38	; 0x26
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9a a3       	std	Y+34, r25	; 0x22
    2932:	89 a3       	std	Y+33, r24	; 0x21
    2934:	89 a1       	ldd	r24, Y+33	; 0x21
    2936:	9a a1       	ldd	r25, Y+34	; 0x22
    2938:	9e 8f       	std	Y+30, r25	; 0x1e
    293a:	8d 8f       	std	Y+29, r24	; 0x1d
    293c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    293e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <LCD_void_init+0xa72>
    2944:	9e 8f       	std	Y+30, r25	; 0x1e
    2946:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		LCD_void_send_command(0x01);
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e8       	ldi	r26, 0x80	; 128
    2954:	bf e3       	ldi	r27, 0x3F	; 63
    2956:	89 8f       	std	Y+25, r24	; 0x19
    2958:	9a 8f       	std	Y+26, r25	; 0x1a
    295a:	ab 8f       	std	Y+27, r26	; 0x1b
    295c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295e:	69 8d       	ldd	r22, Y+25	; 0x19
    2960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4a ef       	ldi	r20, 0xFA	; 250
    296c:	54 e4       	ldi	r21, 0x44	; 68
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	8d 8b       	std	Y+21, r24	; 0x15
    2978:	9e 8b       	std	Y+22, r25	; 0x16
    297a:	af 8b       	std	Y+23, r26	; 0x17
    297c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    297e:	6d 89       	ldd	r22, Y+21	; 0x15
    2980:	7e 89       	ldd	r23, Y+22	; 0x16
    2982:	8f 89       	ldd	r24, Y+23	; 0x17
    2984:	98 8d       	ldd	r25, Y+24	; 0x18
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	2c f4       	brge	.+10     	; 0x29a0 <LCD_void_init+0xad2>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9c 8b       	std	Y+20, r25	; 0x14
    299c:	8b 8b       	std	Y+19, r24	; 0x13
    299e:	3f c0       	rjmp	.+126    	; 0x2a1e <LCD_void_init+0xb50>
	else if (__tmp > 65535)
    29a0:	6d 89       	ldd	r22, Y+21	; 0x15
    29a2:	7e 89       	ldd	r23, Y+22	; 0x16
    29a4:	8f 89       	ldd	r24, Y+23	; 0x17
    29a6:	98 8d       	ldd	r25, Y+24	; 0x18
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	4c f5       	brge	.+82     	; 0x2a0a <LCD_void_init+0xb3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b8:	69 8d       	ldd	r22, Y+25	; 0x19
    29ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9c 8b       	std	Y+20, r25	; 0x14
    29de:	8b 8b       	std	Y+19, r24	; 0x13
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <LCD_void_init+0xb32>
    29e2:	88 ec       	ldi	r24, 0xC8	; 200
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9a 8b       	std	Y+18, r25	; 0x12
    29e8:	89 8b       	std	Y+17, r24	; 0x11
    29ea:	89 89       	ldd	r24, Y+17	; 0x11
    29ec:	9a 89       	ldd	r25, Y+18	; 0x12
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <LCD_void_init+0xb20>
    29f2:	9a 8b       	std	Y+18, r25	; 0x12
    29f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	8b 89       	ldd	r24, Y+19	; 0x13
    29f8:	9c 89       	ldd	r25, Y+20	; 0x14
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9c 8b       	std	Y+20, r25	; 0x14
    29fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a00:	8b 89       	ldd	r24, Y+19	; 0x13
    2a02:	9c 89       	ldd	r25, Y+20	; 0x14
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <LCD_void_init+0xb14>
    2a08:	14 c0       	rjmp	.+40     	; 0x2a32 <LCD_void_init+0xb64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a10:	98 8d       	ldd	r25, Y+24	; 0x18
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9c 8b       	std	Y+20, r25	; 0x14
    2a1c:	8b 8b       	std	Y+19, r24	; 0x13
    2a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a20:	9c 89       	ldd	r25, Y+20	; 0x14
    2a22:	98 8b       	std	Y+16, r25	; 0x10
    2a24:	8f 87       	std	Y+15, r24	; 0x0f
    2a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a28:	98 89       	ldd	r25, Y+16	; 0x10
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <LCD_void_init+0xb5c>
    2a2e:	98 8b       	std	Y+16, r25	; 0x10
    2a30:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCD_void_send_command(0x06);
    2a32:	86 e0       	ldi	r24, 0x06	; 6
    2a34:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e4       	ldi	r26, 0x40	; 64
    2a3e:	b0 e4       	ldi	r27, 0x40	; 64
    2a40:	8b 87       	std	Y+11, r24	; 0x0b
    2a42:	9c 87       	std	Y+12, r25	; 0x0c
    2a44:	ad 87       	std	Y+13, r26	; 0x0d
    2a46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	4a ef       	ldi	r20, 0xFA	; 250
    2a56:	54 e4       	ldi	r21, 0x44	; 68
    2a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	8f 83       	std	Y+7, r24	; 0x07
    2a62:	98 87       	std	Y+8, r25	; 0x08
    2a64:	a9 87       	std	Y+9, r26	; 0x09
    2a66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a68:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6a:	78 85       	ldd	r23, Y+8	; 0x08
    2a6c:	89 85       	ldd	r24, Y+9	; 0x09
    2a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e8       	ldi	r20, 0x80	; 128
    2a76:	5f e3       	ldi	r21, 0x3F	; 63
    2a78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a7c:	88 23       	and	r24, r24
    2a7e:	2c f4       	brge	.+10     	; 0x2a8a <LCD_void_init+0xbbc>
		__ticks = 1;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
    2a88:	3f c0       	rjmp	.+126    	; 0x2b08 <LCD_void_init+0xc3a>
	else if (__tmp > 65535)
    2a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8c:	78 85       	ldd	r23, Y+8	; 0x08
    2a8e:	89 85       	ldd	r24, Y+9	; 0x09
    2a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	3f ef       	ldi	r19, 0xFF	; 255
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	57 e4       	ldi	r21, 0x47	; 71
    2a9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	4c f5       	brge	.+82     	; 0x2af4 <LCD_void_init+0xc26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e2       	ldi	r20, 0x20	; 32
    2ab0:	51 e4       	ldi	r21, 0x41	; 65
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	0f c0       	rjmp	.+30     	; 0x2aea <LCD_void_init+0xc1c>
    2acc:	88 ec       	ldi	r24, 0xC8	; 200
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	9c 83       	std	Y+4, r25	; 0x04
    2ad2:	8b 83       	std	Y+3, r24	; 0x03
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <LCD_void_init+0xc0a>
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	69 f7       	brne	.-38     	; 0x2acc <LCD_void_init+0xbfe>
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <LCD_void_init+0xc4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9e 83       	std	Y+6, r25	; 0x06
    2b06:	8d 83       	std	Y+5, r24	; 0x05
    2b08:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0c:	9a 83       	std	Y+2, r25	; 0x02
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	9a 81       	ldd	r25, Y+2	; 0x02
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <LCD_void_init+0xc46>
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3);
	}

}
    2b1c:	c3 57       	subi	r28, 0x73	; 115
    2b1e:	df 4f       	sbci	r29, 0xFF	; 255
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	1f 91       	pop	r17
    2b30:	0f 91       	pop	r16
    2b32:	08 95       	ret

00002b34 <LCD_void_send_command>:
void LCD_void_send_command(u8 command)
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	ea 97       	sbiw	r28, 0x3a	; 58
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	8a af       	std	Y+58, r24	; 0x3a
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a0 ea       	ldi	r26, 0xA0	; 160
    2b50:	b0 e4       	ldi	r27, 0x40	; 64
    2b52:	8d ab       	std	Y+53, r24	; 0x35
    2b54:	9e ab       	std	Y+54, r25	; 0x36
    2b56:	af ab       	std	Y+55, r26	; 0x37
    2b58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b60:	98 ad       	ldd	r25, Y+56	; 0x38
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	4a ef       	ldi	r20, 0xFA	; 250
    2b68:	54 e4       	ldi	r21, 0x44	; 68
    2b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	89 ab       	std	Y+49, r24	; 0x31
    2b74:	9a ab       	std	Y+50, r25	; 0x32
    2b76:	ab ab       	std	Y+51, r26	; 0x33
    2b78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b80:	9c a9       	ldd	r25, Y+52	; 0x34
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	5f e3       	ldi	r21, 0x3F	; 63
    2b8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8e:	88 23       	and	r24, r24
    2b90:	2c f4       	brge	.+10     	; 0x2b9c <LCD_void_send_command+0x68>
		__ticks = 1;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	98 ab       	std	Y+48, r25	; 0x30
    2b98:	8f a7       	std	Y+47, r24	; 0x2f
    2b9a:	3f c0       	rjmp	.+126    	; 0x2c1a <LCD_void_send_command+0xe6>
	else if (__tmp > 65535)
    2b9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ba2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	3f ef       	ldi	r19, 0xFF	; 255
    2ba8:	4f e7       	ldi	r20, 0x7F	; 127
    2baa:	57 e4       	ldi	r21, 0x47	; 71
    2bac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb0:	18 16       	cp	r1, r24
    2bb2:	4c f5       	brge	.+82     	; 0x2c06 <LCD_void_send_command+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb4:	6d a9       	ldd	r22, Y+53	; 0x35
    2bb6:	7e a9       	ldd	r23, Y+54	; 0x36
    2bb8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bba:	98 ad       	ldd	r25, Y+56	; 0x38
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	40 e2       	ldi	r20, 0x20	; 32
    2bc2:	51 e4       	ldi	r21, 0x41	; 65
    2bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	bc 01       	movw	r22, r24
    2bce:	cd 01       	movw	r24, r26
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	98 ab       	std	Y+48, r25	; 0x30
    2bda:	8f a7       	std	Y+47, r24	; 0x2f
    2bdc:	0f c0       	rjmp	.+30     	; 0x2bfc <LCD_void_send_command+0xc8>
    2bde:	88 ec       	ldi	r24, 0xC8	; 200
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	9e a7       	std	Y+46, r25	; 0x2e
    2be4:	8d a7       	std	Y+45, r24	; 0x2d
    2be6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2be8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <LCD_void_send_command+0xb6>
    2bee:	9e a7       	std	Y+46, r25	; 0x2e
    2bf0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	98 ab       	std	Y+48, r25	; 0x30
    2bfa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bfe:	98 a9       	ldd	r25, Y+48	; 0x30
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	69 f7       	brne	.-38     	; 0x2bde <LCD_void_send_command+0xaa>
    2c04:	14 c0       	rjmp	.+40     	; 0x2c2e <LCD_void_send_command+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c06:	69 a9       	ldd	r22, Y+49	; 0x31
    2c08:	7a a9       	ldd	r23, Y+50	; 0x32
    2c0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	98 ab       	std	Y+48, r25	; 0x30
    2c18:	8f a7       	std	Y+47, r24	; 0x2f
    2c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c1e:	9c a7       	std	Y+44, r25	; 0x2c
    2c20:	8b a7       	std	Y+43, r24	; 0x2b
    2c22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c24:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <LCD_void_send_command+0xf2>
    2c2a:	9c a7       	std	Y+44, r25	; 0x2c
    2c2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_void_setPin_value(PORTA_ID , LCD_RS_PIN ,LOW);
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	61 e0       	ldi	r22, 0x01	; 1
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>

//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN1 , GETBIT(command,4));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN2 , GETBIT(command,5));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN3 , GETBIT(command,6));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN4 , GETBIT(command,7));
	 u8 porta_val = ((PORTA & 0x87) | ((command &0xf0) >> 1));
    2c38:	eb e3       	ldi	r30, 0x3B	; 59
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	28 2f       	mov	r18, r24
    2c40:	27 78       	andi	r18, 0x87	; 135
    2c42:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c44:	88 2f       	mov	r24, r24
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	80 7f       	andi	r24, 0xF0	; 240
    2c4a:	90 70       	andi	r25, 0x00	; 0
    2c4c:	95 95       	asr	r25
    2c4e:	87 95       	ror	r24
    2c50:	82 2b       	or	r24, r18
    2c52:	89 af       	std	Y+57, r24	; 0x39
	 DIO_void_setPort_value(LCD_4BITS_PORT , porta_val);
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	69 ad       	ldd	r22, Y+57	; 0x39
    2c58:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_void_setPort_value>
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , HIGH);
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	62 e0       	ldi	r22, 0x02	; 2
    2c60:	41 e0       	ldi	r20, 0x01	; 1
    2c62:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a0 e8       	ldi	r26, 0x80	; 128
    2c6c:	bf e3       	ldi	r27, 0x3F	; 63
    2c6e:	8f a3       	std	Y+39, r24	; 0x27
    2c70:	98 a7       	std	Y+40, r25	; 0x28
    2c72:	a9 a7       	std	Y+41, r26	; 0x29
    2c74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c76:	6f a1       	ldd	r22, Y+39	; 0x27
    2c78:	78 a5       	ldd	r23, Y+40	; 0x28
    2c7a:	89 a5       	ldd	r24, Y+41	; 0x29
    2c7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	4a ef       	ldi	r20, 0xFA	; 250
    2c84:	54 e4       	ldi	r21, 0x44	; 68
    2c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	8b a3       	std	Y+35, r24	; 0x23
    2c90:	9c a3       	std	Y+36, r25	; 0x24
    2c92:	ad a3       	std	Y+37, r26	; 0x25
    2c94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c96:	6b a1       	ldd	r22, Y+35	; 0x23
    2c98:	7c a1       	ldd	r23, Y+36	; 0x24
    2c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e8       	ldi	r20, 0x80	; 128
    2ca4:	5f e3       	ldi	r21, 0x3F	; 63
    2ca6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2caa:	88 23       	and	r24, r24
    2cac:	2c f4       	brge	.+10     	; 0x2cb8 <LCD_void_send_command+0x184>
		__ticks = 1;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	9a a3       	std	Y+34, r25	; 0x22
    2cb4:	89 a3       	std	Y+33, r24	; 0x21
    2cb6:	3f c0       	rjmp	.+126    	; 0x2d36 <LCD_void_send_command+0x202>
	else if (__tmp > 65535)
    2cb8:	6b a1       	ldd	r22, Y+35	; 0x23
    2cba:	7c a1       	ldd	r23, Y+36	; 0x24
    2cbc:	8d a1       	ldd	r24, Y+37	; 0x25
    2cbe:	9e a1       	ldd	r25, Y+38	; 0x26
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	3f ef       	ldi	r19, 0xFF	; 255
    2cc4:	4f e7       	ldi	r20, 0x7F	; 127
    2cc6:	57 e4       	ldi	r21, 0x47	; 71
    2cc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ccc:	18 16       	cp	r1, r24
    2cce:	4c f5       	brge	.+82     	; 0x2d22 <LCD_void_send_command+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd0:	6f a1       	ldd	r22, Y+39	; 0x27
    2cd2:	78 a5       	ldd	r23, Y+40	; 0x28
    2cd4:	89 a5       	ldd	r24, Y+41	; 0x29
    2cd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e2       	ldi	r20, 0x20	; 32
    2cde:	51 e4       	ldi	r21, 0x41	; 65
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9a a3       	std	Y+34, r25	; 0x22
    2cf6:	89 a3       	std	Y+33, r24	; 0x21
    2cf8:	0f c0       	rjmp	.+30     	; 0x2d18 <LCD_void_send_command+0x1e4>
    2cfa:	88 ec       	ldi	r24, 0xC8	; 200
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	98 a3       	std	Y+32, r25	; 0x20
    2d00:	8f 8f       	std	Y+31, r24	; 0x1f
    2d02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d04:	98 a1       	ldd	r25, Y+32	; 0x20
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <LCD_void_send_command+0x1d2>
    2d0a:	98 a3       	std	Y+32, r25	; 0x20
    2d0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d10:	9a a1       	ldd	r25, Y+34	; 0x22
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	9a a3       	std	Y+34, r25	; 0x22
    2d16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d18:	89 a1       	ldd	r24, Y+33	; 0x21
    2d1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	69 f7       	brne	.-38     	; 0x2cfa <LCD_void_send_command+0x1c6>
    2d20:	14 c0       	rjmp	.+40     	; 0x2d4a <LCD_void_send_command+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d22:	6b a1       	ldd	r22, Y+35	; 0x23
    2d24:	7c a1       	ldd	r23, Y+36	; 0x24
    2d26:	8d a1       	ldd	r24, Y+37	; 0x25
    2d28:	9e a1       	ldd	r25, Y+38	; 0x26
    2d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	9a a3       	std	Y+34, r25	; 0x22
    2d34:	89 a3       	std	Y+33, r24	; 0x21
    2d36:	89 a1       	ldd	r24, Y+33	; 0x21
    2d38:	9a a1       	ldd	r25, Y+34	; 0x22
    2d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d3c:	8d 8f       	std	Y+29, r24	; 0x1d
    2d3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <LCD_void_send_command+0x20e>
    2d46:	9e 8f       	std	Y+30, r25	; 0x1e
    2d48:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1);
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , LOW);
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	62 e0       	ldi	r22, 0x02	; 2
    2d4e:	40 e0       	ldi	r20, 0x00	; 0
    2d50:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	a0 e8       	ldi	r26, 0x80	; 128
    2d5a:	bf e3       	ldi	r27, 0x3F	; 63
    2d5c:	89 8f       	std	Y+25, r24	; 0x19
    2d5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2d60:	ab 8f       	std	Y+27, r26	; 0x1b
    2d62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d64:	69 8d       	ldd	r22, Y+25	; 0x19
    2d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	4a ef       	ldi	r20, 0xFA	; 250
    2d72:	54 e4       	ldi	r21, 0x44	; 68
    2d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	8d 8b       	std	Y+21, r24	; 0x15
    2d7e:	9e 8b       	std	Y+22, r25	; 0x16
    2d80:	af 8b       	std	Y+23, r26	; 0x17
    2d82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d84:	6d 89       	ldd	r22, Y+21	; 0x15
    2d86:	7e 89       	ldd	r23, Y+22	; 0x16
    2d88:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e8       	ldi	r20, 0x80	; 128
    2d92:	5f e3       	ldi	r21, 0x3F	; 63
    2d94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d98:	88 23       	and	r24, r24
    2d9a:	2c f4       	brge	.+10     	; 0x2da6 <LCD_void_send_command+0x272>
		__ticks = 1;
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9c 8b       	std	Y+20, r25	; 0x14
    2da2:	8b 8b       	std	Y+19, r24	; 0x13
    2da4:	3f c0       	rjmp	.+126    	; 0x2e24 <LCD_void_send_command+0x2f0>
	else if (__tmp > 65535)
    2da6:	6d 89       	ldd	r22, Y+21	; 0x15
    2da8:	7e 89       	ldd	r23, Y+22	; 0x16
    2daa:	8f 89       	ldd	r24, Y+23	; 0x17
    2dac:	98 8d       	ldd	r25, Y+24	; 0x18
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	3f ef       	ldi	r19, 0xFF	; 255
    2db2:	4f e7       	ldi	r20, 0x7F	; 127
    2db4:	57 e4       	ldi	r21, 0x47	; 71
    2db6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dba:	18 16       	cp	r1, r24
    2dbc:	4c f5       	brge	.+82     	; 0x2e10 <LCD_void_send_command+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbe:	69 8d       	ldd	r22, Y+25	; 0x19
    2dc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e2       	ldi	r20, 0x20	; 32
    2dcc:	51 e4       	ldi	r21, 0x41	; 65
    2dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	9c 8b       	std	Y+20, r25	; 0x14
    2de4:	8b 8b       	std	Y+19, r24	; 0x13
    2de6:	0f c0       	rjmp	.+30     	; 0x2e06 <LCD_void_send_command+0x2d2>
    2de8:	88 ec       	ldi	r24, 0xC8	; 200
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	9a 8b       	std	Y+18, r25	; 0x12
    2dee:	89 8b       	std	Y+17, r24	; 0x11
    2df0:	89 89       	ldd	r24, Y+17	; 0x11
    2df2:	9a 89       	ldd	r25, Y+18	; 0x12
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <LCD_void_send_command+0x2c0>
    2df8:	9a 8b       	std	Y+18, r25	; 0x12
    2dfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	9c 8b       	std	Y+20, r25	; 0x14
    2e04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e06:	8b 89       	ldd	r24, Y+19	; 0x13
    2e08:	9c 89       	ldd	r25, Y+20	; 0x14
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	69 f7       	brne	.-38     	; 0x2de8 <LCD_void_send_command+0x2b4>
    2e0e:	14 c0       	rjmp	.+40     	; 0x2e38 <LCD_void_send_command+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e10:	6d 89       	ldd	r22, Y+21	; 0x15
    2e12:	7e 89       	ldd	r23, Y+22	; 0x16
    2e14:	8f 89       	ldd	r24, Y+23	; 0x17
    2e16:	98 8d       	ldd	r25, Y+24	; 0x18
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9c 8b       	std	Y+20, r25	; 0x14
    2e22:	8b 8b       	std	Y+19, r24	; 0x13
    2e24:	8b 89       	ldd	r24, Y+19	; 0x13
    2e26:	9c 89       	ldd	r25, Y+20	; 0x14
    2e28:	98 8b       	std	Y+16, r25	; 0x10
    2e2a:	8f 87       	std	Y+15, r24	; 0x0f
    2e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e2e:	98 89       	ldd	r25, Y+16	; 0x10
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <LCD_void_send_command+0x2fc>
    2e34:	98 8b       	std	Y+16, r25	; 0x10
    2e36:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1);
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN1 , GETBIT(command,0));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN2 , GETBIT(command,1));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN3 , GETBIT(command,2));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN4 , GETBIT(command,3));
	 porta_val = ((PORTA & 0x87)|(command << 3));
    2e38:	eb e3       	ldi	r30, 0x3B	; 59
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	28 2f       	mov	r18, r24
    2e40:	27 78       	andi	r18, 0x87	; 135
    2e42:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	82 2b       	or	r24, r18
    2e56:	89 af       	std	Y+57, r24	; 0x39
	 DIO_void_setPort_value(LCD_4BITS_PORT , porta_val );
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	69 ad       	ldd	r22, Y+57	; 0x39
    2e5c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_void_setPort_value>
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , HIGH);
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	62 e0       	ldi	r22, 0x02	; 2
    2e64:	41 e0       	ldi	r20, 0x01	; 1
    2e66:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	a0 e8       	ldi	r26, 0x80	; 128
    2e70:	bf e3       	ldi	r27, 0x3F	; 63
    2e72:	8b 87       	std	Y+11, r24	; 0x0b
    2e74:	9c 87       	std	Y+12, r25	; 0x0c
    2e76:	ad 87       	std	Y+13, r26	; 0x0d
    2e78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	4a ef       	ldi	r20, 0xFA	; 250
    2e88:	54 e4       	ldi	r21, 0x44	; 68
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	8f 83       	std	Y+7, r24	; 0x07
    2e94:	98 87       	std	Y+8, r25	; 0x08
    2e96:	a9 87       	std	Y+9, r26	; 0x09
    2e98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9c:	78 85       	ldd	r23, Y+8	; 0x08
    2e9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e8       	ldi	r20, 0x80	; 128
    2ea8:	5f e3       	ldi	r21, 0x3F	; 63
    2eaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eae:	88 23       	and	r24, r24
    2eb0:	2c f4       	brge	.+10     	; 0x2ebc <LCD_void_send_command+0x388>
		__ticks = 1;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	9e 83       	std	Y+6, r25	; 0x06
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
    2eba:	3f c0       	rjmp	.+126    	; 0x2f3a <LCD_void_send_command+0x406>
	else if (__tmp > 65535)
    2ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebe:	78 85       	ldd	r23, Y+8	; 0x08
    2ec0:	89 85       	ldd	r24, Y+9	; 0x09
    2ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	3f ef       	ldi	r19, 0xFF	; 255
    2ec8:	4f e7       	ldi	r20, 0x7F	; 127
    2eca:	57 e4       	ldi	r21, 0x47	; 71
    2ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed0:	18 16       	cp	r1, r24
    2ed2:	4c f5       	brge	.+82     	; 0x2f26 <LCD_void_send_command+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e2       	ldi	r20, 0x20	; 32
    2ee2:	51 e4       	ldi	r21, 0x41	; 65
    2ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9e 83       	std	Y+6, r25	; 0x06
    2efa:	8d 83       	std	Y+5, r24	; 0x05
    2efc:	0f c0       	rjmp	.+30     	; 0x2f1c <LCD_void_send_command+0x3e8>
    2efe:	88 ec       	ldi	r24, 0xC8	; 200
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9c 83       	std	Y+4, r25	; 0x04
    2f04:	8b 83       	std	Y+3, r24	; 0x03
    2f06:	8b 81       	ldd	r24, Y+3	; 0x03
    2f08:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <LCD_void_send_command+0x3d6>
    2f0e:	9c 83       	std	Y+4, r25	; 0x04
    2f10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f12:	8d 81       	ldd	r24, Y+5	; 0x05
    2f14:	9e 81       	ldd	r25, Y+6	; 0x06
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	69 f7       	brne	.-38     	; 0x2efe <LCD_void_send_command+0x3ca>
    2f24:	14 c0       	rjmp	.+40     	; 0x2f4e <LCD_void_send_command+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f26:	6f 81       	ldd	r22, Y+7	; 0x07
    2f28:	78 85       	ldd	r23, Y+8	; 0x08
    2f2a:	89 85       	ldd	r24, Y+9	; 0x09
    2f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	9e 83       	std	Y+6, r25	; 0x06
    2f38:	8d 83       	std	Y+5, r24	; 0x05
    2f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3e:	9a 83       	std	Y+2, r25	; 0x02
    2f40:	89 83       	std	Y+1, r24	; 0x01
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	9a 81       	ldd	r25, Y+2	; 0x02
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <LCD_void_send_command+0x412>
    2f4a:	9a 83       	std	Y+2, r25	; 0x02
    2f4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , LOW);
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	62 e0       	ldi	r22, 0x02	; 2
    2f52:	40 e0       	ldi	r20, 0x00	; 0
    2f54:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>


#endif
}
    2f58:	ea 96       	adiw	r28, 0x3a	; 58
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	cf 91       	pop	r28
    2f66:	df 91       	pop	r29
    2f68:	08 95       	ret

00002f6a <LCD_void_write_char>:
void LCD_void_write_char(u8 ch)
{
    2f6a:	df 93       	push	r29
    2f6c:	cf 93       	push	r28
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	ac 97       	sbiw	r28, 0x2c	; 44
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	8c a7       	std	Y+44, r24	; 0x2c
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	a0 ea       	ldi	r26, 0xA0	; 160
    2f86:	b0 e4       	ldi	r27, 0x40	; 64
    2f88:	8f a3       	std	Y+39, r24	; 0x27
    2f8a:	98 a7       	std	Y+40, r25	; 0x28
    2f8c:	a9 a7       	std	Y+41, r26	; 0x29
    2f8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f90:	6f a1       	ldd	r22, Y+39	; 0x27
    2f92:	78 a5       	ldd	r23, Y+40	; 0x28
    2f94:	89 a5       	ldd	r24, Y+41	; 0x29
    2f96:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	4a ef       	ldi	r20, 0xFA	; 250
    2f9e:	54 e4       	ldi	r21, 0x44	; 68
    2fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	8b a3       	std	Y+35, r24	; 0x23
    2faa:	9c a3       	std	Y+36, r25	; 0x24
    2fac:	ad a3       	std	Y+37, r26	; 0x25
    2fae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fb0:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb2:	7c a1       	ldd	r23, Y+36	; 0x24
    2fb4:	8d a1       	ldd	r24, Y+37	; 0x25
    2fb6:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e8       	ldi	r20, 0x80	; 128
    2fbe:	5f e3       	ldi	r21, 0x3F	; 63
    2fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc4:	88 23       	and	r24, r24
    2fc6:	2c f4       	brge	.+10     	; 0x2fd2 <LCD_void_write_char+0x68>
		__ticks = 1;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	9a a3       	std	Y+34, r25	; 0x22
    2fce:	89 a3       	std	Y+33, r24	; 0x21
    2fd0:	3f c0       	rjmp	.+126    	; 0x3050 <LCD_void_write_char+0xe6>
	else if (__tmp > 65535)
    2fd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2fd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd6:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd8:	9e a1       	ldd	r25, Y+38	; 0x26
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	3f ef       	ldi	r19, 0xFF	; 255
    2fde:	4f e7       	ldi	r20, 0x7F	; 127
    2fe0:	57 e4       	ldi	r21, 0x47	; 71
    2fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe6:	18 16       	cp	r1, r24
    2fe8:	4c f5       	brge	.+82     	; 0x303c <LCD_void_write_char+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fea:	6f a1       	ldd	r22, Y+39	; 0x27
    2fec:	78 a5       	ldd	r23, Y+40	; 0x28
    2fee:	89 a5       	ldd	r24, Y+41	; 0x29
    2ff0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e2       	ldi	r20, 0x20	; 32
    2ff8:	51 e4       	ldi	r21, 0x41	; 65
    2ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9a a3       	std	Y+34, r25	; 0x22
    3010:	89 a3       	std	Y+33, r24	; 0x21
    3012:	0f c0       	rjmp	.+30     	; 0x3032 <LCD_void_write_char+0xc8>
    3014:	88 ec       	ldi	r24, 0xC8	; 200
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	98 a3       	std	Y+32, r25	; 0x20
    301a:	8f 8f       	std	Y+31, r24	; 0x1f
    301c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    301e:	98 a1       	ldd	r25, Y+32	; 0x20
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <LCD_void_write_char+0xb6>
    3024:	98 a3       	std	Y+32, r25	; 0x20
    3026:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3028:	89 a1       	ldd	r24, Y+33	; 0x21
    302a:	9a a1       	ldd	r25, Y+34	; 0x22
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	9a a3       	std	Y+34, r25	; 0x22
    3030:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3032:	89 a1       	ldd	r24, Y+33	; 0x21
    3034:	9a a1       	ldd	r25, Y+34	; 0x22
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	69 f7       	brne	.-38     	; 0x3014 <LCD_void_write_char+0xaa>
    303a:	14 c0       	rjmp	.+40     	; 0x3064 <LCD_void_write_char+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303c:	6b a1       	ldd	r22, Y+35	; 0x23
    303e:	7c a1       	ldd	r23, Y+36	; 0x24
    3040:	8d a1       	ldd	r24, Y+37	; 0x25
    3042:	9e a1       	ldd	r25, Y+38	; 0x26
    3044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9a a3       	std	Y+34, r25	; 0x22
    304e:	89 a3       	std	Y+33, r24	; 0x21
    3050:	89 a1       	ldd	r24, Y+33	; 0x21
    3052:	9a a1       	ldd	r25, Y+34	; 0x22
    3054:	9e 8f       	std	Y+30, r25	; 0x1e
    3056:	8d 8f       	std	Y+29, r24	; 0x1d
    3058:	8d 8d       	ldd	r24, Y+29	; 0x1d
    305a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	f1 f7       	brne	.-4      	; 0x305c <LCD_void_write_char+0xf2>
    3060:	9e 8f       	std	Y+30, r25	; 0x1e
    3062:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DIO_void_setPin_value(PORTA_ID , LCD_RS_PIN ,HIGH);
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	61 e0       	ldi	r22, 0x01	; 1
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>
#elif LCD_CURRENT_MODE == LCD_4BITS_MODE
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN1 , GETBIT(ch,4));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN2 , GETBIT(ch,5));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN3 , GETBIT(ch,6));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN4 , GETBIT(ch,7));
	 u8 porta_val = ((PORTA & 0x87) | ((ch &0xf0) >> 1));
    306e:	eb e3       	ldi	r30, 0x3B	; 59
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	28 2f       	mov	r18, r24
    3076:	27 78       	andi	r18, 0x87	; 135
    3078:	8c a5       	ldd	r24, Y+44	; 0x2c
    307a:	88 2f       	mov	r24, r24
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	80 7f       	andi	r24, 0xF0	; 240
    3080:	90 70       	andi	r25, 0x00	; 0
    3082:	95 95       	asr	r25
    3084:	87 95       	ror	r24
    3086:	82 2b       	or	r24, r18
    3088:	8b a7       	std	Y+43, r24	; 0x2b
	 DIO_void_setPort_value(LCD_4BITS_PORT , porta_val);
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	6b a5       	ldd	r22, Y+43	; 0x2b
    308e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_void_setPort_value>
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , HIGH);
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	62 e0       	ldi	r22, 0x02	; 2
    3096:	41 e0       	ldi	r20, 0x01	; 1
    3098:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	a0 e8       	ldi	r26, 0x80	; 128
    30a2:	bf e3       	ldi	r27, 0x3F	; 63
    30a4:	89 8f       	std	Y+25, r24	; 0x19
    30a6:	9a 8f       	std	Y+26, r25	; 0x1a
    30a8:	ab 8f       	std	Y+27, r26	; 0x1b
    30aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ac:	69 8d       	ldd	r22, Y+25	; 0x19
    30ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	4a ef       	ldi	r20, 0xFA	; 250
    30ba:	54 e4       	ldi	r21, 0x44	; 68
    30bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	8d 8b       	std	Y+21, r24	; 0x15
    30c6:	9e 8b       	std	Y+22, r25	; 0x16
    30c8:	af 8b       	std	Y+23, r26	; 0x17
    30ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30cc:	6d 89       	ldd	r22, Y+21	; 0x15
    30ce:	7e 89       	ldd	r23, Y+22	; 0x16
    30d0:	8f 89       	ldd	r24, Y+23	; 0x17
    30d2:	98 8d       	ldd	r25, Y+24	; 0x18
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e8       	ldi	r20, 0x80	; 128
    30da:	5f e3       	ldi	r21, 0x3F	; 63
    30dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e0:	88 23       	and	r24, r24
    30e2:	2c f4       	brge	.+10     	; 0x30ee <LCD_void_write_char+0x184>
		__ticks = 1;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	9c 8b       	std	Y+20, r25	; 0x14
    30ea:	8b 8b       	std	Y+19, r24	; 0x13
    30ec:	3f c0       	rjmp	.+126    	; 0x316c <LCD_void_write_char+0x202>
	else if (__tmp > 65535)
    30ee:	6d 89       	ldd	r22, Y+21	; 0x15
    30f0:	7e 89       	ldd	r23, Y+22	; 0x16
    30f2:	8f 89       	ldd	r24, Y+23	; 0x17
    30f4:	98 8d       	ldd	r25, Y+24	; 0x18
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	3f ef       	ldi	r19, 0xFF	; 255
    30fa:	4f e7       	ldi	r20, 0x7F	; 127
    30fc:	57 e4       	ldi	r21, 0x47	; 71
    30fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3102:	18 16       	cp	r1, r24
    3104:	4c f5       	brge	.+82     	; 0x3158 <LCD_void_write_char+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3106:	69 8d       	ldd	r22, Y+25	; 0x19
    3108:	7a 8d       	ldd	r23, Y+26	; 0x1a
    310a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    310c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e2       	ldi	r20, 0x20	; 32
    3114:	51 e4       	ldi	r21, 0x41	; 65
    3116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	bc 01       	movw	r22, r24
    3120:	cd 01       	movw	r24, r26
    3122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	9c 8b       	std	Y+20, r25	; 0x14
    312c:	8b 8b       	std	Y+19, r24	; 0x13
    312e:	0f c0       	rjmp	.+30     	; 0x314e <LCD_void_write_char+0x1e4>
    3130:	88 ec       	ldi	r24, 0xC8	; 200
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	9a 8b       	std	Y+18, r25	; 0x12
    3136:	89 8b       	std	Y+17, r24	; 0x11
    3138:	89 89       	ldd	r24, Y+17	; 0x11
    313a:	9a 89       	ldd	r25, Y+18	; 0x12
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <LCD_void_write_char+0x1d2>
    3140:	9a 8b       	std	Y+18, r25	; 0x12
    3142:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3144:	8b 89       	ldd	r24, Y+19	; 0x13
    3146:	9c 89       	ldd	r25, Y+20	; 0x14
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	9c 8b       	std	Y+20, r25	; 0x14
    314c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314e:	8b 89       	ldd	r24, Y+19	; 0x13
    3150:	9c 89       	ldd	r25, Y+20	; 0x14
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	69 f7       	brne	.-38     	; 0x3130 <LCD_void_write_char+0x1c6>
    3156:	14 c0       	rjmp	.+40     	; 0x3180 <LCD_void_write_char+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3158:	6d 89       	ldd	r22, Y+21	; 0x15
    315a:	7e 89       	ldd	r23, Y+22	; 0x16
    315c:	8f 89       	ldd	r24, Y+23	; 0x17
    315e:	98 8d       	ldd	r25, Y+24	; 0x18
    3160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	9c 8b       	std	Y+20, r25	; 0x14
    316a:	8b 8b       	std	Y+19, r24	; 0x13
    316c:	8b 89       	ldd	r24, Y+19	; 0x13
    316e:	9c 89       	ldd	r25, Y+20	; 0x14
    3170:	98 8b       	std	Y+16, r25	; 0x10
    3172:	8f 87       	std	Y+15, r24	; 0x0f
    3174:	8f 85       	ldd	r24, Y+15	; 0x0f
    3176:	98 89       	ldd	r25, Y+16	; 0x10
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <LCD_void_write_char+0x20e>
    317c:	98 8b       	std	Y+16, r25	; 0x10
    317e:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1);
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , LOW);
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	62 e0       	ldi	r22, 0x02	; 2
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>

//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN1 , GETBIT(ch,0));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN2 , GETBIT(ch,1));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN3 , GETBIT(ch,2));
//	DIO_void_setPin_value(LCD_4BITS_PORT , LCD_4BITS_PIN4 , GETBIT(ch,3));
	 porta_val = ((PORTA & 0x87)|(ch << 3));
    318a:	eb e3       	ldi	r30, 0x3B	; 59
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	28 2f       	mov	r18, r24
    3192:	27 78       	andi	r18, 0x87	; 135
    3194:	8c a5       	ldd	r24, Y+44	; 0x2c
    3196:	88 2f       	mov	r24, r24
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	88 0f       	add	r24, r24
    31a0:	99 1f       	adc	r25, r25
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	82 2b       	or	r24, r18
    31a8:	8b a7       	std	Y+43, r24	; 0x2b
	 DIO_void_setPort_value(LCD_4BITS_PORT , porta_val);
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	6b a5       	ldd	r22, Y+43	; 0x2b
    31ae:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_void_setPort_value>
	 DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , HIGH);
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	62 e0       	ldi	r22, 0x02	; 2
    31b6:	41 e0       	ldi	r20, 0x01	; 1
    31b8:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	a0 e8       	ldi	r26, 0x80	; 128
    31c2:	bf e3       	ldi	r27, 0x3F	; 63
    31c4:	8b 87       	std	Y+11, r24	; 0x0b
    31c6:	9c 87       	std	Y+12, r25	; 0x0c
    31c8:	ad 87       	std	Y+13, r26	; 0x0d
    31ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	4a ef       	ldi	r20, 0xFA	; 250
    31da:	54 e4       	ldi	r21, 0x44	; 68
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	8f 83       	std	Y+7, r24	; 0x07
    31e6:	98 87       	std	Y+8, r25	; 0x08
    31e8:	a9 87       	std	Y+9, r26	; 0x09
    31ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ec:	6f 81       	ldd	r22, Y+7	; 0x07
    31ee:	78 85       	ldd	r23, Y+8	; 0x08
    31f0:	89 85       	ldd	r24, Y+9	; 0x09
    31f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e8       	ldi	r20, 0x80	; 128
    31fa:	5f e3       	ldi	r21, 0x3F	; 63
    31fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3200:	88 23       	and	r24, r24
    3202:	2c f4       	brge	.+10     	; 0x320e <LCD_void_write_char+0x2a4>
		__ticks = 1;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	9e 83       	std	Y+6, r25	; 0x06
    320a:	8d 83       	std	Y+5, r24	; 0x05
    320c:	3f c0       	rjmp	.+126    	; 0x328c <LCD_void_write_char+0x322>
	else if (__tmp > 65535)
    320e:	6f 81       	ldd	r22, Y+7	; 0x07
    3210:	78 85       	ldd	r23, Y+8	; 0x08
    3212:	89 85       	ldd	r24, Y+9	; 0x09
    3214:	9a 85       	ldd	r25, Y+10	; 0x0a
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	3f ef       	ldi	r19, 0xFF	; 255
    321a:	4f e7       	ldi	r20, 0x7F	; 127
    321c:	57 e4       	ldi	r21, 0x47	; 71
    321e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3222:	18 16       	cp	r1, r24
    3224:	4c f5       	brge	.+82     	; 0x3278 <LCD_void_write_char+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3226:	6b 85       	ldd	r22, Y+11	; 0x0b
    3228:	7c 85       	ldd	r23, Y+12	; 0x0c
    322a:	8d 85       	ldd	r24, Y+13	; 0x0d
    322c:	9e 85       	ldd	r25, Y+14	; 0x0e
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e2       	ldi	r20, 0x20	; 32
    3234:	51 e4       	ldi	r21, 0x41	; 65
    3236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	9e 83       	std	Y+6, r25	; 0x06
    324c:	8d 83       	std	Y+5, r24	; 0x05
    324e:	0f c0       	rjmp	.+30     	; 0x326e <LCD_void_write_char+0x304>
    3250:	88 ec       	ldi	r24, 0xC8	; 200
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9c 83       	std	Y+4, r25	; 0x04
    3256:	8b 83       	std	Y+3, r24	; 0x03
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	9c 81       	ldd	r25, Y+4	; 0x04
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <LCD_void_write_char+0x2f2>
    3260:	9c 83       	std	Y+4, r25	; 0x04
    3262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3264:	8d 81       	ldd	r24, Y+5	; 0x05
    3266:	9e 81       	ldd	r25, Y+6	; 0x06
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	9e 83       	std	Y+6, r25	; 0x06
    326c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326e:	8d 81       	ldd	r24, Y+5	; 0x05
    3270:	9e 81       	ldd	r25, Y+6	; 0x06
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	69 f7       	brne	.-38     	; 0x3250 <LCD_void_write_char+0x2e6>
    3276:	14 c0       	rjmp	.+40     	; 0x32a0 <LCD_void_write_char+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3278:	6f 81       	ldd	r22, Y+7	; 0x07
    327a:	78 85       	ldd	r23, Y+8	; 0x08
    327c:	89 85       	ldd	r24, Y+9	; 0x09
    327e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	9e 83       	std	Y+6, r25	; 0x06
    328a:	8d 83       	std	Y+5, r24	; 0x05
    328c:	8d 81       	ldd	r24, Y+5	; 0x05
    328e:	9e 81       	ldd	r25, Y+6	; 0x06
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	9a 81       	ldd	r25, Y+2	; 0x02
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <LCD_void_write_char+0x32e>
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_void_setPin_value(PORTA_ID , LCD_E_PIN , LOW);
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	62 e0       	ldi	r22, 0x02	; 2
    32a4:	40 e0       	ldi	r20, 0x00	; 0
    32a6:	0e 94 08 0c 	call	0x1810	; 0x1810 <DIO_void_setPin_value>


#endif
}
    32aa:	ac 96       	adiw	r28, 0x2c	; 44
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	cf 91       	pop	r28
    32b8:	df 91       	pop	r29
    32ba:	08 95       	ret

000032bc <LCD_void_write_string>:
void LCD_void_write_string(u8* str)
{
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <LCD_void_write_string+0x6>
    32c2:	0f 92       	push	r0
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	9b 83       	std	Y+3, r25	; 0x03
    32ca:	8a 83       	std	Y+2, r24	; 0x02
	   u8 counter=0;
    32cc:	19 82       	std	Y+1, r1	; 0x01
    32ce:	0e c0       	rjmp	.+28     	; 0x32ec <LCD_void_write_string+0x30>
       while(str[counter]!='\0')
       {
    	   LCD_void_write_char(str[counter]);
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	9b 81       	ldd	r25, Y+3	; 0x03
    32da:	fc 01       	movw	r30, r24
    32dc:	e2 0f       	add	r30, r18
    32de:	f3 1f       	adc	r31, r19
    32e0:	80 81       	ld	r24, Z
    32e2:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_void_write_char>
    	   counter++;
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	8f 5f       	subi	r24, 0xFF	; 255
    32ea:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void LCD_void_write_string(u8* str)
{
	   u8 counter=0;
       while(str[counter]!='\0')
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	28 2f       	mov	r18, r24
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	8a 81       	ldd	r24, Y+2	; 0x02
    32f4:	9b 81       	ldd	r25, Y+3	; 0x03
    32f6:	fc 01       	movw	r30, r24
    32f8:	e2 0f       	add	r30, r18
    32fa:	f3 1f       	adc	r31, r19
    32fc:	80 81       	ld	r24, Z
    32fe:	88 23       	and	r24, r24
    3300:	39 f7       	brne	.-50     	; 0x32d0 <LCD_void_write_string+0x14>
       {
    	   LCD_void_write_char(str[counter]);
    	   counter++;
       }
}
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <LCD_void_print_unsigned_integer>:
void LCD_void_print_unsigned_integer(u32 number)
{
    330e:	0f 93       	push	r16
    3310:	1f 93       	push	r17
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	65 97       	sbiw	r28, 0x15	; 21
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	6a 8b       	std	Y+18, r22	; 0x12
    3328:	7b 8b       	std	Y+19, r23	; 0x13
    332a:	8c 8b       	std	Y+20, r24	; 0x14
    332c:	9d 8b       	std	Y+21, r25	; 0x15
	   u8 Str[16];
		       u8 count=0;
    332e:	19 82       	std	Y+1, r1	; 0x01
		       if(number==0)
    3330:	8a 89       	ldd	r24, Y+18	; 0x12
    3332:	9b 89       	ldd	r25, Y+19	; 0x13
    3334:	ac 89       	ldd	r26, Y+20	; 0x14
    3336:	bd 89       	ldd	r27, Y+21	; 0x15
    3338:	00 97       	sbiw	r24, 0x00	; 0
    333a:	a1 05       	cpc	r26, r1
    333c:	b1 05       	cpc	r27, r1
    333e:	89 f5       	brne	.+98     	; 0x33a2 <LCD_void_print_unsigned_integer+0x94>
		       {
		    	   LCD_void_write_char('0');
    3340:	80 e3       	ldi	r24, 0x30	; 48
    3342:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_void_write_char>
    3346:	2d c0       	rjmp	.+90     	; 0x33a2 <LCD_void_print_unsigned_integer+0x94>
		       }
		       while(number && (count<16))
		       {
		    	   Str[count++]=number%10;
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	08 2f       	mov	r16, r24
    334c:	10 e0       	ldi	r17, 0x00	; 0
    334e:	8a 89       	ldd	r24, Y+18	; 0x12
    3350:	9b 89       	ldd	r25, Y+19	; 0x13
    3352:	ac 89       	ldd	r26, Y+20	; 0x14
    3354:	bd 89       	ldd	r27, Y+21	; 0x15
    3356:	2a e0       	ldi	r18, 0x0A	; 10
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e0       	ldi	r20, 0x00	; 0
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	bc 01       	movw	r22, r24
    3360:	cd 01       	movw	r24, r26
    3362:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__udivmodsi4>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	28 2f       	mov	r18, r24
    336c:	ce 01       	movw	r24, r28
    336e:	02 96       	adiw	r24, 0x02	; 2
    3370:	fc 01       	movw	r30, r24
    3372:	e0 0f       	add	r30, r16
    3374:	f1 1f       	adc	r31, r17
    3376:	20 83       	st	Z, r18
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	8f 5f       	subi	r24, 0xFF	; 255
    337c:	89 83       	std	Y+1, r24	; 0x01
		    	   number/=10;
    337e:	8a 89       	ldd	r24, Y+18	; 0x12
    3380:	9b 89       	ldd	r25, Y+19	; 0x13
    3382:	ac 89       	ldd	r26, Y+20	; 0x14
    3384:	bd 89       	ldd	r27, Y+21	; 0x15
    3386:	2a e0       	ldi	r18, 0x0A	; 10
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e0       	ldi	r20, 0x00	; 0
    338c:	50 e0       	ldi	r21, 0x00	; 0
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__udivmodsi4>
    3396:	da 01       	movw	r26, r20
    3398:	c9 01       	movw	r24, r18
    339a:	8a 8b       	std	Y+18, r24	; 0x12
    339c:	9b 8b       	std	Y+19, r25	; 0x13
    339e:	ac 8b       	std	Y+20, r26	; 0x14
    33a0:	bd 8b       	std	Y+21, r27	; 0x15
		       u8 count=0;
		       if(number==0)
		       {
		    	   LCD_void_write_char('0');
		       }
		       while(number && (count<16))
    33a2:	8a 89       	ldd	r24, Y+18	; 0x12
    33a4:	9b 89       	ldd	r25, Y+19	; 0x13
    33a6:	ac 89       	ldd	r26, Y+20	; 0x14
    33a8:	bd 89       	ldd	r27, Y+21	; 0x15
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	a1 05       	cpc	r26, r1
    33ae:	b1 05       	cpc	r27, r1
    33b0:	99 f0       	breq	.+38     	; 0x33d8 <LCD_void_print_unsigned_integer+0xca>
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	80 31       	cpi	r24, 0x10	; 16
    33b6:	40 f2       	brcs	.-112    	; 0x3348 <LCD_void_print_unsigned_integer+0x3a>
    33b8:	0f c0       	rjmp	.+30     	; 0x33d8 <LCD_void_print_unsigned_integer+0xca>
		    	   Str[count++]=number%10;
		    	   number/=10;
		       }
		       while(count)
		       {
		    	   LCD_void_write_char(Str[--count]+'0');
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	81 50       	subi	r24, 0x01	; 1
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	28 2f       	mov	r18, r24
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	ce 01       	movw	r24, r28
    33c8:	02 96       	adiw	r24, 0x02	; 2
    33ca:	fc 01       	movw	r30, r24
    33cc:	e2 0f       	add	r30, r18
    33ce:	f3 1f       	adc	r31, r19
    33d0:	80 81       	ld	r24, Z
    33d2:	80 5d       	subi	r24, 0xD0	; 208
    33d4:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_void_write_char>
		       while(number && (count<16))
		       {
		    	   Str[count++]=number%10;
		    	   number/=10;
		       }
		       while(count)
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	88 23       	and	r24, r24
    33dc:	71 f7       	brne	.-36     	; 0x33ba <LCD_void_print_unsigned_integer+0xac>
		       {
		    	   LCD_void_write_char(Str[--count]+'0');
		       }
}
    33de:	65 96       	adiw	r28, 0x15	; 21
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	de bf       	out	0x3e, r29	; 62
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	cd bf       	out	0x3d, r28	; 61
    33ea:	cf 91       	pop	r28
    33ec:	df 91       	pop	r29
    33ee:	1f 91       	pop	r17
    33f0:	0f 91       	pop	r16
    33f2:	08 95       	ret

000033f4 <LCD_void_print_signed_integer>:
void LCD_void_print_signed_integer  (s32 number)
{
    33f4:	0f 93       	push	r16
    33f6:	1f 93       	push	r17
    33f8:	df 93       	push	r29
    33fa:	cf 93       	push	r28
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
    3400:	65 97       	sbiw	r28, 0x15	; 21
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	6a 8b       	std	Y+18, r22	; 0x12
    340e:	7b 8b       	std	Y+19, r23	; 0x13
    3410:	8c 8b       	std	Y+20, r24	; 0x14
    3412:	9d 8b       	std	Y+21, r25	; 0x15
	               s8 Str[16];
			       u8 count=0;
    3414:	19 82       	std	Y+1, r1	; 0x01
			       if(number==0)
    3416:	8a 89       	ldd	r24, Y+18	; 0x12
    3418:	9b 89       	ldd	r25, Y+19	; 0x13
    341a:	ac 89       	ldd	r26, Y+20	; 0x14
    341c:	bd 89       	ldd	r27, Y+21	; 0x15
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	a1 05       	cpc	r26, r1
    3422:	b1 05       	cpc	r27, r1
    3424:	b1 f4       	brne	.+44     	; 0x3452 <LCD_void_print_signed_integer+0x5e>
					   {
						   LCD_void_write_char('0');
    3426:	80 e3       	ldi	r24, 0x30	; 48
    3428:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_void_write_char>
    342c:	12 c0       	rjmp	.+36     	; 0x3452 <LCD_void_print_signed_integer+0x5e>
					   }
			       while(number <0)
					   {
			    	   LCD_void_write_char('-');
    342e:	8d e2       	ldi	r24, 0x2D	; 45
    3430:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_void_write_char>
						   number*=-1;
    3434:	8a 89       	ldd	r24, Y+18	; 0x12
    3436:	9b 89       	ldd	r25, Y+19	; 0x13
    3438:	ac 89       	ldd	r26, Y+20	; 0x14
    343a:	bd 89       	ldd	r27, Y+21	; 0x15
    343c:	b0 95       	com	r27
    343e:	a0 95       	com	r26
    3440:	90 95       	com	r25
    3442:	81 95       	neg	r24
    3444:	9f 4f       	sbci	r25, 0xFF	; 255
    3446:	af 4f       	sbci	r26, 0xFF	; 255
    3448:	bf 4f       	sbci	r27, 0xFF	; 255
    344a:	8a 8b       	std	Y+18, r24	; 0x12
    344c:	9b 8b       	std	Y+19, r25	; 0x13
    344e:	ac 8b       	std	Y+20, r26	; 0x14
    3450:	bd 8b       	std	Y+21, r27	; 0x15
			       u8 count=0;
			       if(number==0)
					   {
						   LCD_void_write_char('0');
					   }
			       while(number <0)
    3452:	8a 89       	ldd	r24, Y+18	; 0x12
    3454:	9b 89       	ldd	r25, Y+19	; 0x13
    3456:	ac 89       	ldd	r26, Y+20	; 0x14
    3458:	bd 89       	ldd	r27, Y+21	; 0x15
    345a:	bb 23       	and	r27, r27
    345c:	44 f3       	brlt	.-48     	; 0x342e <LCD_void_print_signed_integer+0x3a>
    345e:	2d c0       	rjmp	.+90     	; 0x34ba <LCD_void_print_signed_integer+0xc6>
			    	   LCD_void_write_char('-');
						   number*=-1;
					   }
				  while(number && (count<16))
					   {
						   Str[count++]=number%10;
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	08 2f       	mov	r16, r24
    3464:	10 e0       	ldi	r17, 0x00	; 0
    3466:	8a 89       	ldd	r24, Y+18	; 0x12
    3468:	9b 89       	ldd	r25, Y+19	; 0x13
    346a:	ac 89       	ldd	r26, Y+20	; 0x14
    346c:	bd 89       	ldd	r27, Y+21	; 0x15
    346e:	2a e0       	ldi	r18, 0x0A	; 10
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e0       	ldi	r20, 0x00	; 0
    3474:	50 e0       	ldi	r21, 0x00	; 0
    3476:	bc 01       	movw	r22, r24
    3478:	cd 01       	movw	r24, r26
    347a:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__divmodsi4>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	28 2f       	mov	r18, r24
    3484:	ce 01       	movw	r24, r28
    3486:	02 96       	adiw	r24, 0x02	; 2
    3488:	fc 01       	movw	r30, r24
    348a:	e0 0f       	add	r30, r16
    348c:	f1 1f       	adc	r31, r17
    348e:	20 83       	st	Z, r18
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	8f 5f       	subi	r24, 0xFF	; 255
    3494:	89 83       	std	Y+1, r24	; 0x01
						   number/=10;
    3496:	8a 89       	ldd	r24, Y+18	; 0x12
    3498:	9b 89       	ldd	r25, Y+19	; 0x13
    349a:	ac 89       	ldd	r26, Y+20	; 0x14
    349c:	bd 89       	ldd	r27, Y+21	; 0x15
    349e:	2a e0       	ldi	r18, 0x0A	; 10
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	40 e0       	ldi	r20, 0x00	; 0
    34a4:	50 e0       	ldi	r21, 0x00	; 0
    34a6:	bc 01       	movw	r22, r24
    34a8:	cd 01       	movw	r24, r26
    34aa:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__divmodsi4>
    34ae:	da 01       	movw	r26, r20
    34b0:	c9 01       	movw	r24, r18
    34b2:	8a 8b       	std	Y+18, r24	; 0x12
    34b4:	9b 8b       	std	Y+19, r25	; 0x13
    34b6:	ac 8b       	std	Y+20, r26	; 0x14
    34b8:	bd 8b       	std	Y+21, r27	; 0x15
			       while(number <0)
					   {
			    	   LCD_void_write_char('-');
						   number*=-1;
					   }
				  while(number && (count<16))
    34ba:	8a 89       	ldd	r24, Y+18	; 0x12
    34bc:	9b 89       	ldd	r25, Y+19	; 0x13
    34be:	ac 89       	ldd	r26, Y+20	; 0x14
    34c0:	bd 89       	ldd	r27, Y+21	; 0x15
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	a1 05       	cpc	r26, r1
    34c6:	b1 05       	cpc	r27, r1
    34c8:	99 f0       	breq	.+38     	; 0x34f0 <LCD_void_print_signed_integer+0xfc>
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	80 31       	cpi	r24, 0x10	; 16
    34ce:	40 f2       	brcs	.-112    	; 0x3460 <LCD_void_print_signed_integer+0x6c>
    34d0:	0f c0       	rjmp	.+30     	; 0x34f0 <LCD_void_print_signed_integer+0xfc>
						   number/=10;
					   }

				   while(count)
					   {
						   LCD_void_write_char(Str[--count]+'0');
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	81 50       	subi	r24, 0x01	; 1
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	ce 01       	movw	r24, r28
    34e0:	02 96       	adiw	r24, 0x02	; 2
    34e2:	fc 01       	movw	r30, r24
    34e4:	e2 0f       	add	r30, r18
    34e6:	f3 1f       	adc	r31, r19
    34e8:	80 81       	ld	r24, Z
    34ea:	80 5d       	subi	r24, 0xD0	; 208
    34ec:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_void_write_char>
					   {
						   Str[count++]=number%10;
						   number/=10;
					   }

				   while(count)
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	88 23       	and	r24, r24
    34f4:	71 f7       	brne	.-36     	; 0x34d2 <LCD_void_print_signed_integer+0xde>
					   {
						   LCD_void_write_char(Str[--count]+'0');
					   }
}
    34f6:	65 96       	adiw	r28, 0x15	; 21
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	f8 94       	cli
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	cd bf       	out	0x3d, r28	; 61
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
    350a:	08 95       	ret

0000350c <LCD_void_goto>:
void LCD_void_goto(u8 raw , u8 col)
{
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	00 d0       	rcall	.+0      	; 0x3512 <LCD_void_goto+0x6>
    3512:	00 d0       	rcall	.+0      	; 0x3514 <LCD_void_goto+0x8>
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    3518:	89 83       	std	Y+1, r24	; 0x01
    351a:	6a 83       	std	Y+2, r22	; 0x02
         switch(raw)
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	28 2f       	mov	r18, r24
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	3c 83       	std	Y+4, r19	; 0x04
    3524:	2b 83       	std	Y+3, r18	; 0x03
    3526:	8b 81       	ldd	r24, Y+3	; 0x03
    3528:	9c 81       	ldd	r25, Y+4	; 0x04
    352a:	00 97       	sbiw	r24, 0x00	; 0
    352c:	31 f0       	breq	.+12     	; 0x353a <LCD_void_goto+0x2e>
    352e:	2b 81       	ldd	r18, Y+3	; 0x03
    3530:	3c 81       	ldd	r19, Y+4	; 0x04
    3532:	21 30       	cpi	r18, 0x01	; 1
    3534:	31 05       	cpc	r19, r1
    3536:	49 f0       	breq	.+18     	; 0x354a <LCD_void_goto+0x3e>
    3538:	0f c0       	rjmp	.+30     	; 0x3558 <LCD_void_goto+0x4c>
         {
         case 0:
        	 if ((col <16) &&  (col >=0))
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	80 31       	cpi	r24, 0x10	; 16
    353e:	60 f4       	brcc	.+24     	; 0x3558 <LCD_void_goto+0x4c>
        	 {
        		 LCD_void_send_command(0x80+col);
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	80 58       	subi	r24, 0x80	; 128
    3544:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
    3548:	07 c0       	rjmp	.+14     	; 0x3558 <LCD_void_goto+0x4c>
        	 }
        	 break;
         case 1:
			 if ((col <16) &&  (col >=0))
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	80 31       	cpi	r24, 0x10	; 16
    354e:	20 f4       	brcc	.+8      	; 0x3558 <LCD_void_goto+0x4c>
			 {
				 LCD_void_send_command(0xc0+col);
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	80 54       	subi	r24, 0x40	; 64
    3554:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
			 }
			 break;
         }
}
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	08 95       	ret

00003566 <KeyPad_void_intialize>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "util/delay.h"


void KeyPad_void_intialize(void)
{
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
/*	//keypad connected to portD
	//rows connected to pins 0/1/2/3
	//columns connected to pins 4/5/6/78/*/
}
    356e:	cf 91       	pop	r28
    3570:	df 91       	pop	r29
    3572:	08 95       	ret

00003574 <KeyPad_4x4_adjustKeyNumber>:

static u8 KeyPad_4x4_adjustKeyNumber(u8 button_number)
{
    3574:	df 93       	push	r29
    3576:	cf 93       	push	r28
    3578:	00 d0       	rcall	.+0      	; 0x357a <KeyPad_4x4_adjustKeyNumber+0x6>
    357a:	00 d0       	rcall	.+0      	; 0x357c <KeyPad_4x4_adjustKeyNumber+0x8>
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	28 2f       	mov	r18, r24
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	3c 83       	std	Y+4, r19	; 0x04
    358a:	2b 83       	std	Y+3, r18	; 0x03
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	9c 81       	ldd	r25, Y+4	; 0x04
    3590:	88 30       	cpi	r24, 0x08	; 8
    3592:	91 05       	cpc	r25, r1
    3594:	09 f4       	brne	.+2      	; 0x3598 <KeyPad_4x4_adjustKeyNumber+0x24>
    3596:	70 c0       	rjmp	.+224    	; 0x3678 <KeyPad_4x4_adjustKeyNumber+0x104>
    3598:	2b 81       	ldd	r18, Y+3	; 0x03
    359a:	3c 81       	ldd	r19, Y+4	; 0x04
    359c:	29 30       	cpi	r18, 0x09	; 9
    359e:	31 05       	cpc	r19, r1
    35a0:	5c f5       	brge	.+86     	; 0x35f8 <KeyPad_4x4_adjustKeyNumber+0x84>
    35a2:	8b 81       	ldd	r24, Y+3	; 0x03
    35a4:	9c 81       	ldd	r25, Y+4	; 0x04
    35a6:	84 30       	cpi	r24, 0x04	; 4
    35a8:	91 05       	cpc	r25, r1
    35aa:	09 f4       	brne	.+2      	; 0x35ae <KeyPad_4x4_adjustKeyNumber+0x3a>
    35ac:	59 c0       	rjmp	.+178    	; 0x3660 <KeyPad_4x4_adjustKeyNumber+0xec>
    35ae:	2b 81       	ldd	r18, Y+3	; 0x03
    35b0:	3c 81       	ldd	r19, Y+4	; 0x04
    35b2:	25 30       	cpi	r18, 0x05	; 5
    35b4:	31 05       	cpc	r19, r1
    35b6:	9c f4       	brge	.+38     	; 0x35de <KeyPad_4x4_adjustKeyNumber+0x6a>
    35b8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ba:	9c 81       	ldd	r25, Y+4	; 0x04
    35bc:	82 30       	cpi	r24, 0x02	; 2
    35be:	91 05       	cpc	r25, r1
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <KeyPad_4x4_adjustKeyNumber+0x50>
    35c2:	48 c0       	rjmp	.+144    	; 0x3654 <KeyPad_4x4_adjustKeyNumber+0xe0>
    35c4:	2b 81       	ldd	r18, Y+3	; 0x03
    35c6:	3c 81       	ldd	r19, Y+4	; 0x04
    35c8:	23 30       	cpi	r18, 0x03	; 3
    35ca:	31 05       	cpc	r19, r1
    35cc:	0c f0       	brlt	.+2      	; 0x35d0 <KeyPad_4x4_adjustKeyNumber+0x5c>
    35ce:	45 c0       	rjmp	.+138    	; 0x365a <KeyPad_4x4_adjustKeyNumber+0xe6>
    35d0:	8b 81       	ldd	r24, Y+3	; 0x03
    35d2:	9c 81       	ldd	r25, Y+4	; 0x04
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	91 05       	cpc	r25, r1
    35d8:	09 f4       	brne	.+2      	; 0x35dc <KeyPad_4x4_adjustKeyNumber+0x68>
    35da:	39 c0       	rjmp	.+114    	; 0x364e <KeyPad_4x4_adjustKeyNumber+0xda>
    35dc:	67 c0       	rjmp	.+206    	; 0x36ac <KeyPad_4x4_adjustKeyNumber+0x138>
    35de:	2b 81       	ldd	r18, Y+3	; 0x03
    35e0:	3c 81       	ldd	r19, Y+4	; 0x04
    35e2:	26 30       	cpi	r18, 0x06	; 6
    35e4:	31 05       	cpc	r19, r1
    35e6:	09 f4       	brne	.+2      	; 0x35ea <KeyPad_4x4_adjustKeyNumber+0x76>
    35e8:	41 c0       	rjmp	.+130    	; 0x366c <KeyPad_4x4_adjustKeyNumber+0xf8>
    35ea:	8b 81       	ldd	r24, Y+3	; 0x03
    35ec:	9c 81       	ldd	r25, Y+4	; 0x04
    35ee:	87 30       	cpi	r24, 0x07	; 7
    35f0:	91 05       	cpc	r25, r1
    35f2:	0c f0       	brlt	.+2      	; 0x35f6 <KeyPad_4x4_adjustKeyNumber+0x82>
    35f4:	3e c0       	rjmp	.+124    	; 0x3672 <KeyPad_4x4_adjustKeyNumber+0xfe>
    35f6:	37 c0       	rjmp	.+110    	; 0x3666 <KeyPad_4x4_adjustKeyNumber+0xf2>
    35f8:	2b 81       	ldd	r18, Y+3	; 0x03
    35fa:	3c 81       	ldd	r19, Y+4	; 0x04
    35fc:	2c 30       	cpi	r18, 0x0C	; 12
    35fe:	31 05       	cpc	r19, r1
    3600:	09 f4       	brne	.+2      	; 0x3604 <KeyPad_4x4_adjustKeyNumber+0x90>
    3602:	46 c0       	rjmp	.+140    	; 0x3690 <KeyPad_4x4_adjustKeyNumber+0x11c>
    3604:	8b 81       	ldd	r24, Y+3	; 0x03
    3606:	9c 81       	ldd	r25, Y+4	; 0x04
    3608:	8d 30       	cpi	r24, 0x0D	; 13
    360a:	91 05       	cpc	r25, r1
    360c:	5c f4       	brge	.+22     	; 0x3624 <KeyPad_4x4_adjustKeyNumber+0xb0>
    360e:	2b 81       	ldd	r18, Y+3	; 0x03
    3610:	3c 81       	ldd	r19, Y+4	; 0x04
    3612:	2a 30       	cpi	r18, 0x0A	; 10
    3614:	31 05       	cpc	r19, r1
    3616:	b1 f1       	breq	.+108    	; 0x3684 <KeyPad_4x4_adjustKeyNumber+0x110>
    3618:	8b 81       	ldd	r24, Y+3	; 0x03
    361a:	9c 81       	ldd	r25, Y+4	; 0x04
    361c:	8b 30       	cpi	r24, 0x0B	; 11
    361e:	91 05       	cpc	r25, r1
    3620:	a4 f5       	brge	.+104    	; 0x368a <KeyPad_4x4_adjustKeyNumber+0x116>
    3622:	2d c0       	rjmp	.+90     	; 0x367e <KeyPad_4x4_adjustKeyNumber+0x10a>
    3624:	2b 81       	ldd	r18, Y+3	; 0x03
    3626:	3c 81       	ldd	r19, Y+4	; 0x04
    3628:	2e 30       	cpi	r18, 0x0E	; 14
    362a:	31 05       	cpc	r19, r1
    362c:	b9 f1       	breq	.+110    	; 0x369c <KeyPad_4x4_adjustKeyNumber+0x128>
    362e:	8b 81       	ldd	r24, Y+3	; 0x03
    3630:	9c 81       	ldd	r25, Y+4	; 0x04
    3632:	8e 30       	cpi	r24, 0x0E	; 14
    3634:	91 05       	cpc	r25, r1
    3636:	7c f1       	brlt	.+94     	; 0x3696 <KeyPad_4x4_adjustKeyNumber+0x122>
    3638:	2b 81       	ldd	r18, Y+3	; 0x03
    363a:	3c 81       	ldd	r19, Y+4	; 0x04
    363c:	2f 30       	cpi	r18, 0x0F	; 15
    363e:	31 05       	cpc	r19, r1
    3640:	79 f1       	breq	.+94     	; 0x36a0 <KeyPad_4x4_adjustKeyNumber+0x12c>
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	9c 81       	ldd	r25, Y+4	; 0x04
    3646:	80 31       	cpi	r24, 0x10	; 16
    3648:	91 05       	cpc	r25, r1
    364a:	69 f1       	breq	.+90     	; 0x36a6 <KeyPad_4x4_adjustKeyNumber+0x132>
    364c:	2f c0       	rjmp	.+94     	; 0x36ac <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
    364e:	97 e0       	ldi	r25, 0x07	; 7
    3650:	9a 83       	std	Y+2, r25	; 0x02
    3652:	2e c0       	rjmp	.+92     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
    3654:	28 e0       	ldi	r18, 0x08	; 8
    3656:	2a 83       	std	Y+2, r18	; 0x02
    3658:	2b c0       	rjmp	.+86     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
    365a:	39 e0       	ldi	r19, 0x09	; 9
    365c:	3a 83       	std	Y+2, r19	; 0x02
    365e:	28 c0       	rjmp	.+80     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    3660:	85 e2       	ldi	r24, 0x25	; 37
    3662:	8a 83       	std	Y+2, r24	; 0x02
    3664:	25 c0       	rjmp	.+74     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
    3666:	94 e0       	ldi	r25, 0x04	; 4
    3668:	9a 83       	std	Y+2, r25	; 0x02
    366a:	22 c0       	rjmp	.+68     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    366c:	25 e0       	ldi	r18, 0x05	; 5
    366e:	2a 83       	std	Y+2, r18	; 0x02
    3670:	1f c0       	rjmp	.+62     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
    3672:	36 e0       	ldi	r19, 0x06	; 6
    3674:	3a 83       	std	Y+2, r19	; 0x02
    3676:	1c c0       	rjmp	.+56     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    3678:	8a e2       	ldi	r24, 0x2A	; 42
    367a:	8a 83       	std	Y+2, r24	; 0x02
    367c:	19 c0       	rjmp	.+50     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
    367e:	91 e0       	ldi	r25, 0x01	; 1
    3680:	9a 83       	std	Y+2, r25	; 0x02
    3682:	16 c0       	rjmp	.+44     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
    3684:	22 e0       	ldi	r18, 0x02	; 2
    3686:	2a 83       	std	Y+2, r18	; 0x02
    3688:	13 c0       	rjmp	.+38     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
    368a:	33 e0       	ldi	r19, 0x03	; 3
    368c:	3a 83       	std	Y+2, r19	; 0x02
    368e:	10 c0       	rjmp	.+32     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    3690:	8d e2       	ldi	r24, 0x2D	; 45
    3692:	8a 83       	std	Y+2, r24	; 0x02
    3694:	0d c0       	rjmp	.+26     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return ' ';  /* ASCII of Space */
    3696:	90 e2       	ldi	r25, 0x20	; 32
    3698:	9a 83       	std	Y+2, r25	; 0x02
    369a:	0a c0       	rjmp	.+20     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
    369c:	1a 82       	std	Y+2, r1	; 0x02
    369e:	08 c0       	rjmp	.+16     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    36a0:	2d e3       	ldi	r18, 0x3D	; 61
    36a2:	2a 83       	std	Y+2, r18	; 0x02
    36a4:	05 c0       	rjmp	.+10     	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    36a6:	3b e2       	ldi	r19, 0x2B	; 43
    36a8:	3a 83       	std	Y+2, r19	; 0x02
    36aa:	02 c0       	rjmp	.+4      	; 0x36b0 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	8a 83       	std	Y+2, r24	; 0x02
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	08 95       	ret

000036c0 <KeyPad_getPressedKey>:
u8 KeyPad_getPressedKey(void)
{
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <KeyPad_getPressedKey+0x6>
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
		u8 col,row;
		while(1)
		{
		for(col=0;col<N_col;col++) /* loop for columns */
    36ca:	1a 82       	std	Y+2, r1	; 0x02
    36cc:	42 c0       	rjmp	.+132    	; 0x3752 <KeyPad_getPressedKey+0x92>
		/*
		 * each time only one of the column pins will be output and
		 * the rest will be input pins include the row pins DDRD= (0b00010000<<col);
		 */

		DIO_void_setPort_direction(KEYPAD_PORT, (0b00010000<<col));
    36ce:	8a 81       	ldd	r24, Y+2	; 0x02
    36d0:	28 2f       	mov	r18, r24
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	80 e1       	ldi	r24, 0x10	; 16
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	02 c0       	rjmp	.+4      	; 0x36de <KeyPad_getPressedKey+0x1e>
    36da:	88 0f       	add	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	2a 95       	dec	r18
    36e0:	e2 f7       	brpl	.-8      	; 0x36da <KeyPad_getPressedKey+0x1a>
    36e2:	98 2f       	mov	r25, r24
    36e4:	82 e0       	ldi	r24, 0x02	; 2
    36e6:	69 2f       	mov	r22, r25
    36e8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <DIO_void_setPort_direction>

		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins PORTD = (~(0b00010000<<col));
		 */
		DIO_void_setPort_value(KEYPAD_PORT, (~(0b00010000<<col)));
    36ec:	8a 81       	ldd	r24, Y+2	; 0x02
    36ee:	28 2f       	mov	r18, r24
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	80 e1       	ldi	r24, 0x10	; 16
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	02 c0       	rjmp	.+4      	; 0x36fc <KeyPad_getPressedKey+0x3c>
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	2a 95       	dec	r18
    36fe:	e2 f7       	brpl	.-8      	; 0x36f8 <KeyPad_getPressedKey+0x38>
    3700:	98 2f       	mov	r25, r24
    3702:	90 95       	com	r25
    3704:	82 e0       	ldi	r24, 0x02	; 2
    3706:	69 2f       	mov	r22, r25
    3708:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_void_setPort_value>

			for(row=0;row<N_row;row++) /* loop for rows */
    370c:	19 82       	std	Y+1, r1	; 0x01
    370e:	1b c0       	rjmp	.+54     	; 0x3746 <KeyPad_getPressedKey+0x86>
				{
				if (DIO_value_type_getPin_value(KEYPAD_PORT, row) == LOW) /* if the switch is press in this row */
    3710:	82 e0       	ldi	r24, 0x02	; 2
    3712:	69 81       	ldd	r22, Y+1	; 0x01
    3714:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <DIO_value_type_getPin_value>
    3718:	88 23       	and	r24, r24
    371a:	91 f4       	brne	.+36     	; 0x3740 <KeyPad_getPressedKey+0x80>
				{return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);}//end if
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	88 2f       	mov	r24, r24
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	88 0f       	add	r24, r24
    3724:	99 1f       	adc	r25, r25
    3726:	88 0f       	add	r24, r24
    3728:	99 1f       	adc	r25, r25
    372a:	98 2f       	mov	r25, r24
    372c:	8a 81       	ldd	r24, Y+2	; 0x02
    372e:	89 0f       	add	r24, r25
    3730:	8f 5f       	subi	r24, 0xFF	; 255
    3732:	0e 94 ba 1a 	call	0x3574	; 0x3574 <KeyPad_4x4_adjustKeyNumber>
				}//end for loop (rows)
			}//end for columns loop
		}//end while(1)
	}//end function
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	cf 91       	pop	r28
    373c:	df 91       	pop	r29
    373e:	08 95       	ret
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins PORTD = (~(0b00010000<<col));
		 */
		DIO_void_setPort_value(KEYPAD_PORT, (~(0b00010000<<col)));

			for(row=0;row<N_row;row++) /* loop for rows */
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	8f 5f       	subi	r24, 0xFF	; 255
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	84 30       	cpi	r24, 0x04	; 4
    374a:	10 f3       	brcs	.-60     	; 0x3710 <KeyPad_getPressedKey+0x50>
u8 KeyPad_getPressedKey(void)
{
		u8 col,row;
		while(1)
		{
		for(col=0;col<N_col;col++) /* loop for columns */
    374c:	8a 81       	ldd	r24, Y+2	; 0x02
    374e:	8f 5f       	subi	r24, 0xFF	; 255
    3750:	8a 83       	std	Y+2, r24	; 0x02
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	84 30       	cpi	r24, 0x04	; 4
    3756:	08 f4       	brcc	.+2      	; 0x375a <KeyPad_getPressedKey+0x9a>
    3758:	ba cf       	rjmp	.-140    	; 0x36ce <KeyPad_getPressedKey+0xe>
    375a:	b7 cf       	rjmp	.-146    	; 0x36ca <KeyPad_getPressedKey+0xa>

0000375c <main>:
#include "includes.h"

int main(void)
{        ////////////////////////////////
    375c:	ef 92       	push	r14
    375e:	ff 92       	push	r15
    3760:	0f 93       	push	r16
    3762:	1f 93       	push	r17
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
    376c:	ee 97       	sbiw	r28, 0x3e	; 62
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
	    DIO_void_setPin_direction(PORTD_ID,PIN0,INPUT);
    3778:	83 e0       	ldi	r24, 0x03	; 3
    377a:	60 e0       	ldi	r22, 0x00	; 0
    377c:	40 e0       	ldi	r20, 0x00	; 0
    377e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
		DIO_void_setPin_direction(PORTD_ID,PIN1,OUTPUT);
    3782:	83 e0       	ldi	r24, 0x03	; 3
    3784:	61 e0       	ldi	r22, 0x01	; 1
    3786:	41 e0       	ldi	r20, 0x01	; 1
    3788:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_void_setPin_direction>
        LCD_void_init(LCD_enum_4BITS_MODE);
    378c:	80 e0       	ldi	r24, 0x00	; 0
    378e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_void_init>
	    UART_void_initialize();
    3792:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_void_initialize>
	    TIMER0_voidInitializeTimer0();
    3796:	0e 94 70 08 	call	0x10e0	; 0x10e0 <TIMER0_voidInitializeTimer0>
	    SPI_InitSlave();
    379a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <SPI_InitSlave>
	     ////////////////////////////////
	    u8 StorePass[]="123456";
    379e:	ce 01       	movw	r24, r28
    37a0:	83 96       	adiw	r24, 0x23	; 35
    37a2:	9b af       	std	Y+59, r25	; 0x3b
    37a4:	8a af       	std	Y+58, r24	; 0x3a
    37a6:	a8 e8       	ldi	r26, 0x88	; 136
    37a8:	b0 e0       	ldi	r27, 0x00	; 0
    37aa:	bd af       	std	Y+61, r27	; 0x3d
    37ac:	ac af       	std	Y+60, r26	; 0x3c
    37ae:	b7 e0       	ldi	r27, 0x07	; 7
    37b0:	be af       	std	Y+62, r27	; 0x3e
    37b2:	ec ad       	ldd	r30, Y+60	; 0x3c
    37b4:	fd ad       	ldd	r31, Y+61	; 0x3d
    37b6:	00 80       	ld	r0, Z
    37b8:	8c ad       	ldd	r24, Y+60	; 0x3c
    37ba:	9d ad       	ldd	r25, Y+61	; 0x3d
    37bc:	01 96       	adiw	r24, 0x01	; 1
    37be:	9d af       	std	Y+61, r25	; 0x3d
    37c0:	8c af       	std	Y+60, r24	; 0x3c
    37c2:	aa ad       	ldd	r26, Y+58	; 0x3a
    37c4:	bb ad       	ldd	r27, Y+59	; 0x3b
    37c6:	0c 92       	st	X, r0
    37c8:	ea ad       	ldd	r30, Y+58	; 0x3a
    37ca:	fb ad       	ldd	r31, Y+59	; 0x3b
    37cc:	31 96       	adiw	r30, 0x01	; 1
    37ce:	fb af       	std	Y+59, r31	; 0x3b
    37d0:	ea af       	std	Y+58, r30	; 0x3a
    37d2:	fe ad       	ldd	r31, Y+62	; 0x3e
    37d4:	f1 50       	subi	r31, 0x01	; 1
    37d6:	fe af       	std	Y+62, r31	; 0x3e
    37d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    37da:	88 23       	and	r24, r24
    37dc:	51 f7       	brne	.-44     	; 0x37b2 <main+0x56>
		u32 i, j,count=0,number=sizeof(StorePass)-1;
    37de:	1f 8a       	std	Y+23, r1	; 0x17
    37e0:	18 8e       	std	Y+24, r1	; 0x18
    37e2:	19 8e       	std	Y+25, r1	; 0x19
    37e4:	1a 8e       	std	Y+26, r1	; 0x1a
    37e6:	86 e0       	ldi	r24, 0x06	; 6
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	a0 e0       	ldi	r26, 0x00	; 0
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	8b 8b       	std	Y+19, r24	; 0x13
    37f0:	9c 8b       	std	Y+20, r25	; 0x14
    37f2:	ad 8b       	std	Y+21, r26	; 0x15
    37f4:	be 8b       	std	Y+22, r27	; 0x16
		char pass[sizeof(StorePass)-1];
		//////////////////////////////
		LCD_void_goto(0,1);
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	61 e0       	ldi	r22, 0x01	; 1
    37fa:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_void_goto>
		LCD_void_write_string("ENTER PASSWORD");
    37fe:	80 e6       	ldi	r24, 0x60	; 96
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_void_write_string>
		LCD_void_goto(1,1);
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	61 e0       	ldi	r22, 0x01	; 1
    380a:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_void_goto>
		for(i=0;i<=sizeof(StorePass)-1;i++)
    380e:	1f 8e       	std	Y+31, r1	; 0x1f
    3810:	18 a2       	std	Y+32, r1	; 0x20
    3812:	19 a2       	std	Y+33, r1	; 0x21
    3814:	1a a2       	std	Y+34, r1	; 0x22
    3816:	25 c0       	rjmp	.+74     	; 0x3862 <main+0x106>
		{
			        pass[i] = UART_void_recieve_data();      //Receive PASSWARD
    3818:	ef 8c       	ldd	r14, Y+31	; 0x1f
    381a:	f8 a0       	ldd	r15, Y+32	; 0x20
    381c:	09 a1       	ldd	r16, Y+33	; 0x21
    381e:	1a a1       	ldd	r17, Y+34	; 0x22
    3820:	0e 94 2b 08 	call	0x1056	; 0x1056 <UART_void_recieve_data>
    3824:	28 2f       	mov	r18, r24
    3826:	ce 01       	movw	r24, r28
    3828:	8a 96       	adiw	r24, 0x2a	; 42
    382a:	fc 01       	movw	r30, r24
    382c:	ee 0d       	add	r30, r14
    382e:	ff 1d       	adc	r31, r15
    3830:	20 83       	st	Z, r18
					LCD_void_write_char(pass[i]);
    3832:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3834:	98 a1       	ldd	r25, Y+32	; 0x20
    3836:	a9 a1       	ldd	r26, Y+33	; 0x21
    3838:	ba a1       	ldd	r27, Y+34	; 0x22
    383a:	9e 01       	movw	r18, r28
    383c:	26 5d       	subi	r18, 0xD6	; 214
    383e:	3f 4f       	sbci	r19, 0xFF	; 255
    3840:	f9 01       	movw	r30, r18
    3842:	e8 0f       	add	r30, r24
    3844:	f9 1f       	adc	r31, r25
    3846:	80 81       	ld	r24, Z
    3848:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_void_write_char>
		char pass[sizeof(StorePass)-1];
		//////////////////////////////
		LCD_void_goto(0,1);
		LCD_void_write_string("ENTER PASSWORD");
		LCD_void_goto(1,1);
		for(i=0;i<=sizeof(StorePass)-1;i++)
    384c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    384e:	98 a1       	ldd	r25, Y+32	; 0x20
    3850:	a9 a1       	ldd	r26, Y+33	; 0x21
    3852:	ba a1       	ldd	r27, Y+34	; 0x22
    3854:	01 96       	adiw	r24, 0x01	; 1
    3856:	a1 1d       	adc	r26, r1
    3858:	b1 1d       	adc	r27, r1
    385a:	8f 8f       	std	Y+31, r24	; 0x1f
    385c:	98 a3       	std	Y+32, r25	; 0x20
    385e:	a9 a3       	std	Y+33, r26	; 0x21
    3860:	ba a3       	std	Y+34, r27	; 0x22
    3862:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3864:	98 a1       	ldd	r25, Y+32	; 0x20
    3866:	a9 a1       	ldd	r26, Y+33	; 0x21
    3868:	ba a1       	ldd	r27, Y+34	; 0x22
    386a:	87 30       	cpi	r24, 0x07	; 7
    386c:	91 05       	cpc	r25, r1
    386e:	a1 05       	cpc	r26, r1
    3870:	b1 05       	cpc	r27, r1
    3872:	90 f2       	brcs	.-92     	; 0x3818 <main+0xbc>
		{
			        pass[i] = UART_void_recieve_data();      //Receive PASSWARD
					LCD_void_write_char(pass[i]);
		}
		for(j=0;j<number;j++)
    3874:	1b 8e       	std	Y+27, r1	; 0x1b
    3876:	1c 8e       	std	Y+28, r1	; 0x1c
    3878:	1d 8e       	std	Y+29, r1	; 0x1d
    387a:	1e 8e       	std	Y+30, r1	; 0x1e
    387c:	2e c0       	rjmp	.+92     	; 0x38da <main+0x17e>
		      {
		        if(pass[j]==StorePass[j])
    387e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3880:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3882:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3884:	be 8d       	ldd	r27, Y+30	; 0x1e
    3886:	9e 01       	movw	r18, r28
    3888:	26 5d       	subi	r18, 0xD6	; 214
    388a:	3f 4f       	sbci	r19, 0xFF	; 255
    388c:	f9 01       	movw	r30, r18
    388e:	e8 0f       	add	r30, r24
    3890:	f9 1f       	adc	r31, r25
    3892:	40 81       	ld	r20, Z
    3894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3898:	ad 8d       	ldd	r26, Y+29	; 0x1d
    389a:	be 8d       	ldd	r27, Y+30	; 0x1e
    389c:	9e 01       	movw	r18, r28
    389e:	2d 5d       	subi	r18, 0xDD	; 221
    38a0:	3f 4f       	sbci	r19, 0xFF	; 255
    38a2:	f9 01       	movw	r30, r18
    38a4:	e8 0f       	add	r30, r24
    38a6:	f9 1f       	adc	r31, r25
    38a8:	80 81       	ld	r24, Z
    38aa:	48 17       	cp	r20, r24
    38ac:	59 f4       	brne	.+22     	; 0x38c4 <main+0x168>
		        count++;
    38ae:	8f 89       	ldd	r24, Y+23	; 0x17
    38b0:	98 8d       	ldd	r25, Y+24	; 0x18
    38b2:	a9 8d       	ldd	r26, Y+25	; 0x19
    38b4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    38b6:	01 96       	adiw	r24, 0x01	; 1
    38b8:	a1 1d       	adc	r26, r1
    38ba:	b1 1d       	adc	r27, r1
    38bc:	8f 8b       	std	Y+23, r24	; 0x17
    38be:	98 8f       	std	Y+24, r25	; 0x18
    38c0:	a9 8f       	std	Y+25, r26	; 0x19
    38c2:	ba 8f       	std	Y+26, r27	; 0x1a
		for(i=0;i<=sizeof(StorePass)-1;i++)
		{
			        pass[i] = UART_void_recieve_data();      //Receive PASSWARD
					LCD_void_write_char(pass[i]);
		}
		for(j=0;j<number;j++)
    38c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38c8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    38ca:	be 8d       	ldd	r27, Y+30	; 0x1e
    38cc:	01 96       	adiw	r24, 0x01	; 1
    38ce:	a1 1d       	adc	r26, r1
    38d0:	b1 1d       	adc	r27, r1
    38d2:	8b 8f       	std	Y+27, r24	; 0x1b
    38d4:	9c 8f       	std	Y+28, r25	; 0x1c
    38d6:	ad 8f       	std	Y+29, r26	; 0x1d
    38d8:	be 8f       	std	Y+30, r27	; 0x1e
    38da:	2b 8d       	ldd	r18, Y+27	; 0x1b
    38dc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    38de:	4d 8d       	ldd	r20, Y+29	; 0x1d
    38e0:	5e 8d       	ldd	r21, Y+30	; 0x1e
    38e2:	8b 89       	ldd	r24, Y+19	; 0x13
    38e4:	9c 89       	ldd	r25, Y+20	; 0x14
    38e6:	ad 89       	ldd	r26, Y+21	; 0x15
    38e8:	be 89       	ldd	r27, Y+22	; 0x16
    38ea:	28 17       	cp	r18, r24
    38ec:	39 07       	cpc	r19, r25
    38ee:	4a 07       	cpc	r20, r26
    38f0:	5b 07       	cpc	r21, r27
    38f2:	28 f2       	brcs	.-118    	; 0x387e <main+0x122>
		      {
		        if(pass[j]==StorePass[j])
		        count++;
		      }
		  if(count==number)
    38f4:	2f 89       	ldd	r18, Y+23	; 0x17
    38f6:	38 8d       	ldd	r19, Y+24	; 0x18
    38f8:	49 8d       	ldd	r20, Y+25	; 0x19
    38fa:	5a 8d       	ldd	r21, Y+26	; 0x1a
    38fc:	8b 89       	ldd	r24, Y+19	; 0x13
    38fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3900:	ad 89       	ldd	r26, Y+21	; 0x15
    3902:	be 89       	ldd	r27, Y+22	; 0x16
    3904:	28 17       	cp	r18, r24
    3906:	39 07       	cpc	r19, r25
    3908:	4a 07       	cpc	r20, r26
    390a:	5b 07       	cpc	r21, r27
    390c:	09 f0       	breq	.+2      	; 0x3910 <main+0x1b4>
    390e:	54 c0       	rjmp	.+168    	; 0x39b8 <main+0x25c>
		  {
			  LCD_void_send_command(0x01);
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
//								  }//end  if
//////////////////////////////////////	END TEMP SENSOR////////////////////////////////////
                                         /////////////////////////////////////////////////
 /////////////////////////////////////START ULTRA SENSOR///////////////////////////////////
                                         /////////////////////////////////////////////////
                                         u8 Ultra_Data[10]={0};
    3916:	8a e0       	ldi	r24, 0x0A	; 10
    3918:	fe 01       	movw	r30, r28
    391a:	f0 96       	adiw	r30, 0x30	; 48
    391c:	df 01       	movw	r26, r30
    391e:	98 2f       	mov	r25, r24
    3920:	1d 92       	st	X+, r1
    3922:	9a 95       	dec	r25
    3924:	e9 f7       	brne	.-6      	; 0x3920 <main+0x1c4>
										  LCD_void_goto(1,0);
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	60 e0       	ldi	r22, 0x00	; 0
    392a:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_void_goto>
										  LCD_void_write_string("Dis = ");
    392e:	8f e6       	ldi	r24, 0x6F	; 111
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_void_write_string>
										  for(i=0;i<10;i++)
    3936:	1f 8e       	std	Y+31, r1	; 0x1f
    3938:	18 a2       	std	Y+32, r1	; 0x20
    393a:	19 a2       	std	Y+33, r1	; 0x21
    393c:	1a a2       	std	Y+34, r1	; 0x22
    393e:	1a c0       	rjmp	.+52     	; 0x3974 <main+0x218>
										  {
											   SPI_ReceiveByte(Ultra_Data[i]);     //Receive data
    3940:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3942:	98 a1       	ldd	r25, Y+32	; 0x20
    3944:	a9 a1       	ldd	r26, Y+33	; 0x21
    3946:	ba a1       	ldd	r27, Y+34	; 0x22
    3948:	9e 01       	movw	r18, r28
    394a:	20 5d       	subi	r18, 0xD0	; 208
    394c:	3f 4f       	sbci	r19, 0xFF	; 255
    394e:	f9 01       	movw	r30, r18
    3950:	e8 0f       	add	r30, r24
    3952:	f9 1f       	adc	r31, r25
    3954:	80 81       	ld	r24, Z
    3956:	88 2f       	mov	r24, r24
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0e 94 89 0a 	call	0x1512	; 0x1512 <SPI_ReceiveByte>
 /////////////////////////////////////START ULTRA SENSOR///////////////////////////////////
                                         /////////////////////////////////////////////////
                                         u8 Ultra_Data[10]={0};
										  LCD_void_goto(1,0);
										  LCD_void_write_string("Dis = ");
										  for(i=0;i<10;i++)
    395e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3960:	98 a1       	ldd	r25, Y+32	; 0x20
    3962:	a9 a1       	ldd	r26, Y+33	; 0x21
    3964:	ba a1       	ldd	r27, Y+34	; 0x22
    3966:	01 96       	adiw	r24, 0x01	; 1
    3968:	a1 1d       	adc	r26, r1
    396a:	b1 1d       	adc	r27, r1
    396c:	8f 8f       	std	Y+31, r24	; 0x1f
    396e:	98 a3       	std	Y+32, r25	; 0x20
    3970:	a9 a3       	std	Y+33, r26	; 0x21
    3972:	ba a3       	std	Y+34, r27	; 0x22
    3974:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3976:	98 a1       	ldd	r25, Y+32	; 0x20
    3978:	a9 a1       	ldd	r26, Y+33	; 0x21
    397a:	ba a1       	ldd	r27, Y+34	; 0x22
    397c:	8a 30       	cpi	r24, 0x0A	; 10
    397e:	91 05       	cpc	r25, r1
    3980:	a1 05       	cpc	r26, r1
    3982:	b1 05       	cpc	r27, r1
    3984:	e8 f2       	brcs	.-70     	; 0x3940 <main+0x1e4>
										  {
											   SPI_ReceiveByte(Ultra_Data[i]);     //Receive data
										  }

										 LCD_void_write_string(Ultra_Data);
    3986:	ce 01       	movw	r24, r28
    3988:	c0 96       	adiw	r24, 0x30	; 48
    398a:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_void_write_string>
										 LCD_void_write_string("Cm");
    398e:	86 e7       	ldi	r24, 0x76	; 118
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_void_write_string>
												 u32 digit=0;
    3996:	1f 86       	std	Y+15, r1	; 0x0f
    3998:	18 8a       	std	Y+16, r1	; 0x10
    399a:	19 8a       	std	Y+17, r1	; 0x11
    399c:	1a 8a       	std	Y+18, r1	; 0x12
												  digit = atoi(Ultra_Data);
    399e:	ce 01       	movw	r24, r28
    39a0:	c0 96       	adiw	r24, 0x30	; 48
    39a2:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <atoi>
    39a6:	aa 27       	eor	r26, r26
    39a8:	97 fd       	sbrc	r25, 7
    39aa:	a0 95       	com	r26
    39ac:	ba 2f       	mov	r27, r26
    39ae:	8f 87       	std	Y+15, r24	; 0x0f
    39b0:	98 8b       	std	Y+16, r25	; 0x10
    39b2:	a9 8b       	std	Y+17, r26	; 0x11
    39b4:	ba 8b       	std	Y+18, r27	; 0x12
    39b6:	af cf       	rjmp	.-162    	; 0x3916 <main+0x1ba>
					        }//END WHILE

		  }
		  else
		  {
			  LCD_void_send_command(0x01);
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
			  LCD_void_goto(0,1);
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	61 e0       	ldi	r22, 0x01	; 1
    39c2:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_void_goto>
			  LCD_void_write_string("Wrong Password");
    39c6:	89 e7       	ldi	r24, 0x79	; 121
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_void_write_string>
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	aa ef       	ldi	r26, 0xFA	; 250
    39d4:	b4 e4       	ldi	r27, 0x44	; 68
    39d6:	8b 87       	std	Y+11, r24	; 0x0b
    39d8:	9c 87       	std	Y+12, r25	; 0x0c
    39da:	ad 87       	std	Y+13, r26	; 0x0d
    39dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39de:	6b 85       	ldd	r22, Y+11	; 0x0b
    39e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	4a ef       	ldi	r20, 0xFA	; 250
    39ec:	54 e4       	ldi	r21, 0x44	; 68
    39ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	8f 83       	std	Y+7, r24	; 0x07
    39f8:	98 87       	std	Y+8, r25	; 0x08
    39fa:	a9 87       	std	Y+9, r26	; 0x09
    39fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3a00:	78 85       	ldd	r23, Y+8	; 0x08
    3a02:	89 85       	ldd	r24, Y+9	; 0x09
    3a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	40 e8       	ldi	r20, 0x80	; 128
    3a0c:	5f e3       	ldi	r21, 0x3F	; 63
    3a0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a12:	88 23       	and	r24, r24
    3a14:	2c f4       	brge	.+10     	; 0x3a20 <main+0x2c4>
		__ticks = 1;
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	9e 83       	std	Y+6, r25	; 0x06
    3a1c:	8d 83       	std	Y+5, r24	; 0x05
    3a1e:	3f c0       	rjmp	.+126    	; 0x3a9e <main+0x342>
	else if (__tmp > 65535)
    3a20:	6f 81       	ldd	r22, Y+7	; 0x07
    3a22:	78 85       	ldd	r23, Y+8	; 0x08
    3a24:	89 85       	ldd	r24, Y+9	; 0x09
    3a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	3f ef       	ldi	r19, 0xFF	; 255
    3a2c:	4f e7       	ldi	r20, 0x7F	; 127
    3a2e:	57 e4       	ldi	r21, 0x47	; 71
    3a30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a34:	18 16       	cp	r1, r24
    3a36:	4c f5       	brge	.+82     	; 0x3a8a <main+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e2       	ldi	r20, 0x20	; 32
    3a46:	51 e4       	ldi	r21, 0x41	; 65
    3a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	bc 01       	movw	r22, r24
    3a52:	cd 01       	movw	r24, r26
    3a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	9e 83       	std	Y+6, r25	; 0x06
    3a5e:	8d 83       	std	Y+5, r24	; 0x05
    3a60:	0f c0       	rjmp	.+30     	; 0x3a80 <main+0x324>
    3a62:	88 ec       	ldi	r24, 0xC8	; 200
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9c 83       	std	Y+4, r25	; 0x04
    3a68:	8b 83       	std	Y+3, r24	; 0x03
    3a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6e:	01 97       	sbiw	r24, 0x01	; 1
    3a70:	f1 f7       	brne	.-4      	; 0x3a6e <main+0x312>
    3a72:	9c 83       	std	Y+4, r25	; 0x04
    3a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	9e 83       	std	Y+6, r25	; 0x06
    3a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a80:	8d 81       	ldd	r24, Y+5	; 0x05
    3a82:	9e 81       	ldd	r25, Y+6	; 0x06
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	69 f7       	brne	.-38     	; 0x3a62 <main+0x306>
    3a88:	14 c0       	rjmp	.+40     	; 0x3ab2 <main+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a8c:	78 85       	ldd	r23, Y+8	; 0x08
    3a8e:	89 85       	ldd	r24, Y+9	; 0x09
    3a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	9e 83       	std	Y+6, r25	; 0x06
    3a9c:	8d 83       	std	Y+5, r24	; 0x05
    3a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa2:	9a 83       	std	Y+2, r25	; 0x02
    3aa4:	89 83       	std	Y+1, r24	; 0x01
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01
    3aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	f1 f7       	brne	.-4      	; 0x3aaa <main+0x34e>
    3aae:	9a 83       	std	Y+2, r25	; 0x02
    3ab0:	89 83       	std	Y+1, r24	; 0x01
			  _delay_ms(2000);
			  LCD_void_send_command(0x01);
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_void_send_command>
			  LCD_void_goto(0,1);
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	61 e0       	ldi	r22, 0x01	; 1
    3abc:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_void_goto>
			  LCD_void_write_string("ENTER PASSWORD");
    3ac0:	80 e6       	ldi	r24, 0x60	; 96
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_void_write_string>
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	90 e0       	ldi	r25, 0x00	; 0

		  }
}
    3acc:	ee 96       	adiw	r28, 0x3e	; 62
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
    3ad8:	cf 91       	pop	r28
    3ada:	df 91       	pop	r29
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	ff 90       	pop	r15
    3ae2:	ef 90       	pop	r14
    3ae4:	08 95       	ret

00003ae6 <__mulsi3>:
    3ae6:	62 9f       	mul	r22, r18
    3ae8:	d0 01       	movw	r26, r0
    3aea:	73 9f       	mul	r23, r19
    3aec:	f0 01       	movw	r30, r0
    3aee:	82 9f       	mul	r24, r18
    3af0:	e0 0d       	add	r30, r0
    3af2:	f1 1d       	adc	r31, r1
    3af4:	64 9f       	mul	r22, r20
    3af6:	e0 0d       	add	r30, r0
    3af8:	f1 1d       	adc	r31, r1
    3afa:	92 9f       	mul	r25, r18
    3afc:	f0 0d       	add	r31, r0
    3afe:	83 9f       	mul	r24, r19
    3b00:	f0 0d       	add	r31, r0
    3b02:	74 9f       	mul	r23, r20
    3b04:	f0 0d       	add	r31, r0
    3b06:	65 9f       	mul	r22, r21
    3b08:	f0 0d       	add	r31, r0
    3b0a:	99 27       	eor	r25, r25
    3b0c:	72 9f       	mul	r23, r18
    3b0e:	b0 0d       	add	r27, r0
    3b10:	e1 1d       	adc	r30, r1
    3b12:	f9 1f       	adc	r31, r25
    3b14:	63 9f       	mul	r22, r19
    3b16:	b0 0d       	add	r27, r0
    3b18:	e1 1d       	adc	r30, r1
    3b1a:	f9 1f       	adc	r31, r25
    3b1c:	bd 01       	movw	r22, r26
    3b1e:	cf 01       	movw	r24, r30
    3b20:	11 24       	eor	r1, r1
    3b22:	08 95       	ret

00003b24 <__divmodhi4>:
    3b24:	97 fb       	bst	r25, 7
    3b26:	09 2e       	mov	r0, r25
    3b28:	07 26       	eor	r0, r23
    3b2a:	0a d0       	rcall	.+20     	; 0x3b40 <__divmodhi4_neg1>
    3b2c:	77 fd       	sbrc	r23, 7
    3b2e:	04 d0       	rcall	.+8      	; 0x3b38 <__divmodhi4_neg2>
    3b30:	49 d0       	rcall	.+146    	; 0x3bc4 <__udivmodhi4>
    3b32:	06 d0       	rcall	.+12     	; 0x3b40 <__divmodhi4_neg1>
    3b34:	00 20       	and	r0, r0
    3b36:	1a f4       	brpl	.+6      	; 0x3b3e <__divmodhi4_exit>

00003b38 <__divmodhi4_neg2>:
    3b38:	70 95       	com	r23
    3b3a:	61 95       	neg	r22
    3b3c:	7f 4f       	sbci	r23, 0xFF	; 255

00003b3e <__divmodhi4_exit>:
    3b3e:	08 95       	ret

00003b40 <__divmodhi4_neg1>:
    3b40:	f6 f7       	brtc	.-4      	; 0x3b3e <__divmodhi4_exit>
    3b42:	90 95       	com	r25
    3b44:	81 95       	neg	r24
    3b46:	9f 4f       	sbci	r25, 0xFF	; 255
    3b48:	08 95       	ret

00003b4a <__udivmodsi4>:
    3b4a:	a1 e2       	ldi	r26, 0x21	; 33
    3b4c:	1a 2e       	mov	r1, r26
    3b4e:	aa 1b       	sub	r26, r26
    3b50:	bb 1b       	sub	r27, r27
    3b52:	fd 01       	movw	r30, r26
    3b54:	0d c0       	rjmp	.+26     	; 0x3b70 <__udivmodsi4_ep>

00003b56 <__udivmodsi4_loop>:
    3b56:	aa 1f       	adc	r26, r26
    3b58:	bb 1f       	adc	r27, r27
    3b5a:	ee 1f       	adc	r30, r30
    3b5c:	ff 1f       	adc	r31, r31
    3b5e:	a2 17       	cp	r26, r18
    3b60:	b3 07       	cpc	r27, r19
    3b62:	e4 07       	cpc	r30, r20
    3b64:	f5 07       	cpc	r31, r21
    3b66:	20 f0       	brcs	.+8      	; 0x3b70 <__udivmodsi4_ep>
    3b68:	a2 1b       	sub	r26, r18
    3b6a:	b3 0b       	sbc	r27, r19
    3b6c:	e4 0b       	sbc	r30, r20
    3b6e:	f5 0b       	sbc	r31, r21

00003b70 <__udivmodsi4_ep>:
    3b70:	66 1f       	adc	r22, r22
    3b72:	77 1f       	adc	r23, r23
    3b74:	88 1f       	adc	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	1a 94       	dec	r1
    3b7a:	69 f7       	brne	.-38     	; 0x3b56 <__udivmodsi4_loop>
    3b7c:	60 95       	com	r22
    3b7e:	70 95       	com	r23
    3b80:	80 95       	com	r24
    3b82:	90 95       	com	r25
    3b84:	9b 01       	movw	r18, r22
    3b86:	ac 01       	movw	r20, r24
    3b88:	bd 01       	movw	r22, r26
    3b8a:	cf 01       	movw	r24, r30
    3b8c:	08 95       	ret

00003b8e <__divmodsi4>:
    3b8e:	97 fb       	bst	r25, 7
    3b90:	09 2e       	mov	r0, r25
    3b92:	05 26       	eor	r0, r21
    3b94:	0e d0       	rcall	.+28     	; 0x3bb2 <__divmodsi4_neg1>
    3b96:	57 fd       	sbrc	r21, 7
    3b98:	04 d0       	rcall	.+8      	; 0x3ba2 <__divmodsi4_neg2>
    3b9a:	d7 df       	rcall	.-82     	; 0x3b4a <__udivmodsi4>
    3b9c:	0a d0       	rcall	.+20     	; 0x3bb2 <__divmodsi4_neg1>
    3b9e:	00 1c       	adc	r0, r0
    3ba0:	38 f4       	brcc	.+14     	; 0x3bb0 <__divmodsi4_exit>

00003ba2 <__divmodsi4_neg2>:
    3ba2:	50 95       	com	r21
    3ba4:	40 95       	com	r20
    3ba6:	30 95       	com	r19
    3ba8:	21 95       	neg	r18
    3baa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bac:	4f 4f       	sbci	r20, 0xFF	; 255
    3bae:	5f 4f       	sbci	r21, 0xFF	; 255

00003bb0 <__divmodsi4_exit>:
    3bb0:	08 95       	ret

00003bb2 <__divmodsi4_neg1>:
    3bb2:	f6 f7       	brtc	.-4      	; 0x3bb0 <__divmodsi4_exit>
    3bb4:	90 95       	com	r25
    3bb6:	80 95       	com	r24
    3bb8:	70 95       	com	r23
    3bba:	61 95       	neg	r22
    3bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc2:	08 95       	ret

00003bc4 <__udivmodhi4>:
    3bc4:	aa 1b       	sub	r26, r26
    3bc6:	bb 1b       	sub	r27, r27
    3bc8:	51 e1       	ldi	r21, 0x11	; 17
    3bca:	07 c0       	rjmp	.+14     	; 0x3bda <__udivmodhi4_ep>

00003bcc <__udivmodhi4_loop>:
    3bcc:	aa 1f       	adc	r26, r26
    3bce:	bb 1f       	adc	r27, r27
    3bd0:	a6 17       	cp	r26, r22
    3bd2:	b7 07       	cpc	r27, r23
    3bd4:	10 f0       	brcs	.+4      	; 0x3bda <__udivmodhi4_ep>
    3bd6:	a6 1b       	sub	r26, r22
    3bd8:	b7 0b       	sbc	r27, r23

00003bda <__udivmodhi4_ep>:
    3bda:	88 1f       	adc	r24, r24
    3bdc:	99 1f       	adc	r25, r25
    3bde:	5a 95       	dec	r21
    3be0:	a9 f7       	brne	.-22     	; 0x3bcc <__udivmodhi4_loop>
    3be2:	80 95       	com	r24
    3be4:	90 95       	com	r25
    3be6:	bc 01       	movw	r22, r24
    3be8:	cd 01       	movw	r24, r26
    3bea:	08 95       	ret

00003bec <__prologue_saves__>:
    3bec:	2f 92       	push	r2
    3bee:	3f 92       	push	r3
    3bf0:	4f 92       	push	r4
    3bf2:	5f 92       	push	r5
    3bf4:	6f 92       	push	r6
    3bf6:	7f 92       	push	r7
    3bf8:	8f 92       	push	r8
    3bfa:	9f 92       	push	r9
    3bfc:	af 92       	push	r10
    3bfe:	bf 92       	push	r11
    3c00:	cf 92       	push	r12
    3c02:	df 92       	push	r13
    3c04:	ef 92       	push	r14
    3c06:	ff 92       	push	r15
    3c08:	0f 93       	push	r16
    3c0a:	1f 93       	push	r17
    3c0c:	cf 93       	push	r28
    3c0e:	df 93       	push	r29
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
    3c14:	ca 1b       	sub	r28, r26
    3c16:	db 0b       	sbc	r29, r27
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	0f be       	out	0x3f, r0	; 63
    3c20:	cd bf       	out	0x3d, r28	; 61
    3c22:	09 94       	ijmp

00003c24 <__epilogue_restores__>:
    3c24:	2a 88       	ldd	r2, Y+18	; 0x12
    3c26:	39 88       	ldd	r3, Y+17	; 0x11
    3c28:	48 88       	ldd	r4, Y+16	; 0x10
    3c2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c30:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c32:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c34:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c36:	b9 84       	ldd	r11, Y+9	; 0x09
    3c38:	c8 84       	ldd	r12, Y+8	; 0x08
    3c3a:	df 80       	ldd	r13, Y+7	; 0x07
    3c3c:	ee 80       	ldd	r14, Y+6	; 0x06
    3c3e:	fd 80       	ldd	r15, Y+5	; 0x05
    3c40:	0c 81       	ldd	r16, Y+4	; 0x04
    3c42:	1b 81       	ldd	r17, Y+3	; 0x03
    3c44:	aa 81       	ldd	r26, Y+2	; 0x02
    3c46:	b9 81       	ldd	r27, Y+1	; 0x01
    3c48:	ce 0f       	add	r28, r30
    3c4a:	d1 1d       	adc	r29, r1
    3c4c:	0f b6       	in	r0, 0x3f	; 63
    3c4e:	f8 94       	cli
    3c50:	de bf       	out	0x3e, r29	; 62
    3c52:	0f be       	out	0x3f, r0	; 63
    3c54:	cd bf       	out	0x3d, r28	; 61
    3c56:	ed 01       	movw	r28, r26
    3c58:	08 95       	ret

00003c5a <atoi>:
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	88 27       	eor	r24, r24
    3c5e:	99 27       	eor	r25, r25
    3c60:	e8 94       	clt
    3c62:	21 91       	ld	r18, Z+
    3c64:	20 32       	cpi	r18, 0x20	; 32
    3c66:	e9 f3       	breq	.-6      	; 0x3c62 <atoi+0x8>
    3c68:	29 30       	cpi	r18, 0x09	; 9
    3c6a:	10 f0       	brcs	.+4      	; 0x3c70 <atoi+0x16>
    3c6c:	2e 30       	cpi	r18, 0x0E	; 14
    3c6e:	c8 f3       	brcs	.-14     	; 0x3c62 <atoi+0x8>
    3c70:	2b 32       	cpi	r18, 0x2B	; 43
    3c72:	41 f0       	breq	.+16     	; 0x3c84 <atoi+0x2a>
    3c74:	2d 32       	cpi	r18, 0x2D	; 45
    3c76:	39 f4       	brne	.+14     	; 0x3c86 <atoi+0x2c>
    3c78:	68 94       	set
    3c7a:	04 c0       	rjmp	.+8      	; 0x3c84 <atoi+0x2a>
    3c7c:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__mulhi_const_10>
    3c80:	82 0f       	add	r24, r18
    3c82:	91 1d       	adc	r25, r1
    3c84:	21 91       	ld	r18, Z+
    3c86:	20 53       	subi	r18, 0x30	; 48
    3c88:	2a 30       	cpi	r18, 0x0A	; 10
    3c8a:	c0 f3       	brcs	.-16     	; 0x3c7c <atoi+0x22>
    3c8c:	1e f4       	brtc	.+6      	; 0x3c94 <atoi+0x3a>
    3c8e:	90 95       	com	r25
    3c90:	81 95       	neg	r24
    3c92:	9f 4f       	sbci	r25, 0xFF	; 255
    3c94:	08 95       	ret

00003c96 <__mulhi_const_10>:
    3c96:	7a e0       	ldi	r23, 0x0A	; 10
    3c98:	97 9f       	mul	r25, r23
    3c9a:	90 2d       	mov	r25, r0
    3c9c:	87 9f       	mul	r24, r23
    3c9e:	80 2d       	mov	r24, r0
    3ca0:	91 0d       	add	r25, r1
    3ca2:	11 24       	eor	r1, r1
    3ca4:	08 95       	ret

00003ca6 <_exit>:
    3ca6:	f8 94       	cli

00003ca8 <__stop_program>:
    3ca8:	ff cf       	rjmp	.-2      	; 0x3ca8 <__stop_program>
